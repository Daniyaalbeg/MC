[{"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/index.js":"1","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/reducers.js":"2","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/App.js":"3","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/createEventReducer.js":"4","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/mapInfoReducer.js":"5","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/orgReducer.js":"6","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/updateReducer.js":"7","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/signUpReducer.js":"8","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/homeViewReducer.js":"9","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/groupReducer.js":"10","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/cnicReducer.js":"11","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/deleteReducer.js":"12","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/authReducer.js":"13","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/volunteerReducer.js":"14","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/projectReducer.js":"15","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/userInfoReducer.js":"16","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/navigationBar.component.js":"17","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/404.component.js":"18","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/authActions.js":"19","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/termsAndConditions.js":"20","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/scrollToTop.component.js":"21","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/about.component.js":"22","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/privacyPolicy.component.js":"23","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mainMap.component.js":"24","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/loadingSpinner.component.js":"25","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/organisations/organisationsView.component.js":"26","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/homeView/homeView.component.js":"27","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/errors/generalError.component.js":"28","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/dashboardContainer.component.js":"29","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/groups/groupView.component.js":"30","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/organisations/organisationInfoView.component.js":"31","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/createProject.component.js":"32","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/emailVerification.component.js":"33","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/createEvent.component.js":"34","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/signUpOrg.component.js":"35","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/createGroup.component.js":"36","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/mainProjectView.component.js":"37","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/mainSelectedProjectView.component.js":"38","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/signupUser.component.js":"39","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/update/updateProfile.component.js":"40","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/mainVolunteerView.component.js":"41","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/update/updateOrganisation.component.js":"42","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/reset/resetPassword.component.js":"43","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/update/updateVolunteerProfile.component.js":"44","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/inspire/inspireView.component.js":"45","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/update/updateEvent.component.js":"46","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/reset/resettingPassword.component.js":"47","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/cnicView.component.js":"48","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/volunteer/createUserVolunteer.component.js":"49","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/volunteer/createVolunteer.component.js":"50","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/mainSelectedVolunteerView.component.js":"51","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/mapSelectActions.js":"52","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/createEventActions.js":"53","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/mapInfoActions.js":"54","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/getOrgInfoActions.js":"55","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/orgActions.js":"56","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/updateActions.js":"57","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/signUpActions.js":"58","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/filterSearchOrgAction.js":"59","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/volunteerActions.js":"60","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/homeViewActions.js":"61","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/groupActions.js":"62","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/filterSearchMapAction.js":"63","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/cnicActions.js":"64","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/mapActions.js":"65","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/deleteEventAction.js":"66","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/filterMainProjectActions.js":"67","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapLayerTypes.js":"68","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/userInfoActions.js":"69","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/normalise.js":"70","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/projectActions.js":"71","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/randomMCColour.component.js":"72","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/config.js":"73","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/volunteer/createUserVolunteerForm.component.js":"74","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/volunteer/createVolunteerForm.component.js":"75","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/cnicSearch.component.js":"76","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/tabComponent.js":"77","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/signedUpMessage.component.js":"78","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/cnicAddNew.component.js":"79","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/thumb.component.js":"80","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/update/updateMap.component.js":"81","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/Checkboxs.component.js":"82","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/dropzoneStyles.js":"83","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/update/updateVolunteerProfileForm.component.js":"84","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/iconController/iconCategories.component.js":"85","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/volunteerPillsList.component.js":"86","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/volunteerGender.component.js":"87","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/imageUpload.js":"88","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/volunteerPersonalIconInfo.component.js":"89","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/volunteerImage.component.js":"90","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/volunteerIconInfo.component.js":"91","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/assets/svg.js":"92","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/MainVolunteerViewContent.component.js":"93","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/organisationCnicCard.component.js":"94","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/selectEventToAddCnic.component.js":"95","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/cnicSearchResult.component.js":"96","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/addingCnicInfo.component.js":"97","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/dataOptions.component.js":"98","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/selectMap.component.js":"99","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/selectBadgeOptions.component.js":"100","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/skillsSelection.component.js":"101","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/selectedProjectCategories.component.js":"102","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/signupUserForm.component.js":"103","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/selectedProjectSponsor.component.js":"104","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/selectedProjectImageView.component.js":"105","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/selectedProjectInfoTabs.component.js":"106","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/mainProjectViewContent.component.js":"107","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/categoryOptions.component.js":"108","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/categoryOptionValues.js":"109","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/selectedProjectCallToAction.component.js":"110","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/filterSearchBar/projectFilterSearchBar.component.js":"111","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/volunteerUtilities.js":"112","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/filterAndSearch.js":"113","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/mainVolunteerCard.component.js":"114","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/standardCard.component.js":"115","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/cnicUploadOptions.component.js":"116","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/events/eventItemCard.component.js":"117","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/skillOptions.component.js":"118","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/imageCarousel.component.js":"119","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/faqPanel.component.js":"120","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/updatesPanel.component.js":"121","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectCard/mainProjectCard.component.js":"122","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/commentsPanel/commentsPanel.component.js":"123","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/filterSearchBar/searchBarProjectView.component.js":"124","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/filterSearchBar/filterModalProjectView.component.js":"125","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/genericModal.component.js":"126","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/callToActionProgressViews.component.js":"127","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/callToActionButtonView.component.js":"128","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectCard/mainProjectCardSheet.component.js":"129","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/commentsPanel/createComment.component.js":"130","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/dateUtilities.component.js":"131","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/mainProjectAuthor.component.js":"132","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/projectUtils.component.js":"133","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/progressCircle.component.js":"134","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/callToActionModal.component.js":"135","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/events/eventItemInfo.component.js":"136","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/contributedMessage.component.js":"137","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/submitSupply.component.js":"138","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/forms/applyVolunteerForm.component.js":"139","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/login/loginForm.component.js":"140","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/suppliesPanel.component.js":"141","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/fundingPanel.component.js":"142","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/infoPanel.component.js":"143","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/contributeSelectedSupply.component.js":"144","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/projectSupplyItem.component.js":"145","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/mapForDisplay.component.js":"146","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/address.component.js":"147","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/bankingDetails.component.js":"148","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/socialMediaIcons.component.js":"149","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/whichLogo.component.js":"150","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/numberMoneyDetails.component.js":"151","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/groups/groupModal.component.js":"152","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/colourUtils.js":"153","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/dashboardView.component.js":"154","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/login/loginContainer.component.js":"155","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/homeView/mainFooter.component.js":"156","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/starRing.js":"157","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/filterOptions.js":"158","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapListView.component.js":"159","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapViewGoogle.component.js":"160","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/windowDimension.component.js":"161","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/events/eventView.component.js":"162","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/login/SignUpSheet.component.js":"163","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/profile/profileInfoView.component.js":"164","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/organisationInfoViewDash.component.js":"165","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/groups/groupInfoView.component.js":"166","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/projectView.component.js":"167","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/volunteer/volunteerView.component.js":"168","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/projectListItem.component.js":"169","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/eventInfoView.component.js":"170","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapModalOptions.component.js":"171","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/eventListItem.component.js":"172","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapListControl.component.js":"173","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapLayer.component.js":"174","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapSelectModal.component.js":"175","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapMarkers.component.js":"176","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapLegend.component.js":"177","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapLayerNational.component.js":"178","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/volunteer/volunteerContentView.component.js":"179","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/events/eventsContainer.component.js":"180","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/HeaderIcons.component.js":"181","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/organisationDashboardContent.component.js":"182","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/projectContentView.component.js":"183","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/MapSettingLayerList.component.js":"184","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/createPolygon.js":"185","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/changeMapModeButton.component.js":"186","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/volunteer/volunteerSelectionView.component.js":"187","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/events/eventAccordionContainer.component.js":"188","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/organisationCard.component.js":"189","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/singleOrganisationInfo.component.js":"190","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/orgSelection.component.js":"191","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/ProjectListView.component.js":"192","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/volunteer/volunteerProfile.component.js":"193","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/volunteer/volunteerRequestsInfo.component.js":"194","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/orgInfo/orgBank.component.js":"195","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/orgInfo/orgProfileInfo.component.js":"196","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/orgInfo/orgLogo.component.js":"197","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/projectList.component.js":"198","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/orgInfo/orgSponsoringRequests.component.js":"199","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/orgInfo/orgSponsoring.components.js":"200","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/orgInfo/orgSocial.component.js":"201","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/userImagePlaceholder.component.js":"202","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/volunteer/volunteerRequests.component.js":"203","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/buttons.component.js":"204","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/selectedProjectView.component.js":"205","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/projectCard/projectCard.component.js":"206","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/volunteer/volunteerRequestCard.component.js":"207","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/projectInfoTab.component.js":"208","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/publishButton.component.js":"209","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/faqTab/faqTab.component.js":"210","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/supplyTab/projectSupplies.component.js":"211","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/volunteerTab/volunteerTab.component.js":"212","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/fundingTab/projectFunding.component.js":"213","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/updateTab/updateTab.component.js":"214","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/projectCard/projectCardSheet.component.js":"215","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/supplyTab/selectedProjectSupply.component.js":"216","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/faqTab/faqListItem.component.js":"217","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/faqTab/addFaqForm.component.js":"218","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/supplyTab/addSupplyForm.component.js":"219","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/volunteerTab/projectVolunteerRequestForm.component.js":"220","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/infoTab/sponsorDonor.component.js":"221","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/volunteerTab/volunteerInfo.component.js":"222","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/fundingTab/projectFundingForm.component.js":"223","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/fundingTab/projectFundingInfo.component.js":"224","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/updateTab/addUpdateForm.component.js":"225","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/updateTab/updateListOrSelect.component.js":"226","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/infoTab/sponsorDonorModal.component.js":"227","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/supplyTab/projectSupplyReceivedListItem.component.js":"228","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/projectCardDashProgressRing.js":"229","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/updateTab/selectedUpdate.component.js":"230","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/updateTab/updateList.component.js":"231","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/updateTab/updateListItem.component.js":"232","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/floodlight/floodLight.js":"233"},{"size":798,"mtime":1601715950000,"results":"234","hashOfConfig":"235"},{"size":1072,"mtime":1615387436000,"results":"236","hashOfConfig":"235"},{"size":6665,"mtime":1662914824764,"results":"237","hashOfConfig":"235"},{"size":824,"mtime":1591534176000,"results":"238","hashOfConfig":"235"},{"size":6061,"mtime":1662930332126,"results":"239","hashOfConfig":"235"},{"size":1699,"mtime":1604088445000,"results":"240","hashOfConfig":"235"},{"size":1885,"mtime":1596196206000,"results":"241","hashOfConfig":"235"},{"size":3207,"mtime":1616277786000,"results":"242","hashOfConfig":"235"},{"size":1644,"mtime":1595079806000,"results":"243","hashOfConfig":"235"},{"size":1681,"mtime":1594595329000,"results":"244","hashOfConfig":"235"},{"size":2024,"mtime":1596278223000,"results":"245","hashOfConfig":"235"},{"size":1865,"mtime":1596201616000,"results":"246","hashOfConfig":"235"},{"size":1176,"mtime":1590438237000,"results":"247","hashOfConfig":"235"},{"size":2472,"mtime":1615980959000,"results":"248","hashOfConfig":"235"},{"size":6178,"mtime":1608579533000,"results":"249","hashOfConfig":"235"},{"size":3305,"mtime":1662930290373,"results":"250","hashOfConfig":"235"},{"size":5372,"mtime":1665601901552,"results":"251","hashOfConfig":"235"},{"size":650,"mtime":1591568158000,"results":"252","hashOfConfig":"235"},{"size":2583,"mtime":1615546940000,"results":"253","hashOfConfig":"235"},{"size":11891,"mtime":1595086247000,"results":"254","hashOfConfig":"235"},{"size":245,"mtime":1591038138000,"results":"255","hashOfConfig":"235"},{"size":4425,"mtime":1592771318000,"results":"256","hashOfConfig":"235"},{"size":21529,"mtime":1595086244000,"results":"257","hashOfConfig":"235"},{"size":669,"mtime":1601984817000,"results":"258","hashOfConfig":"235"},{"size":451,"mtime":1603310325000,"results":"259","hashOfConfig":"235"},{"size":4279,"mtime":1604087546000,"results":"260","hashOfConfig":"235"},{"size":10443,"mtime":1666436314740,"results":"261","hashOfConfig":"235"},{"size":741,"mtime":1592664247000,"results":"262","hashOfConfig":"235"},{"size":629,"mtime":1605966734000,"results":"263","hashOfConfig":"235"},{"size":2409,"mtime":1596137692000,"results":"264","hashOfConfig":"235"},{"size":4187,"mtime":1662914929321,"results":"265","hashOfConfig":"235"},{"size":14618,"mtime":1607955236000,"results":"266","hashOfConfig":"235"},{"size":1484,"mtime":1591569923000,"results":"267","hashOfConfig":"235"},{"size":15522,"mtime":1616025529000,"results":"268","hashOfConfig":"235"},{"size":27120,"mtime":1607955418000,"results":"269","hashOfConfig":"235"},{"size":19363,"mtime":1607955291000,"results":"270","hashOfConfig":"235"},{"size":714,"mtime":1601573851000,"results":"271","hashOfConfig":"235"},{"size":2594,"mtime":1604432214000,"results":"272","hashOfConfig":"235"},{"size":544,"mtime":1605965691000,"results":"273","hashOfConfig":"235"},{"size":11875,"mtime":1616274909000,"results":"274","hashOfConfig":"235"},{"size":771,"mtime":1615931279000,"results":"275","hashOfConfig":"235"},{"size":42781,"mtime":1616275661000,"results":"276","hashOfConfig":"235"},{"size":1409,"mtime":1590152778000,"results":"277","hashOfConfig":"235"},{"size":936,"mtime":1616278597000,"results":"278","hashOfConfig":"235"},{"size":7906,"mtime":1662923350135,"results":"279","hashOfConfig":"235"},{"size":16072,"mtime":1616276062000,"results":"280","hashOfConfig":"235"},{"size":4233,"mtime":1590152593000,"results":"281","hashOfConfig":"235"},{"size":3044,"mtime":1596317787000,"results":"282","hashOfConfig":"235"},{"size":666,"mtime":1605965708000,"results":"283","hashOfConfig":"235"},{"size":268,"mtime":1604857267000,"results":"284","hashOfConfig":"235"},{"size":4695,"mtime":1662226671122,"results":"285","hashOfConfig":"235"},{"size":839,"mtime":1602265146000,"results":"286","hashOfConfig":"235"},{"size":3752,"mtime":1596446766000,"results":"287","hashOfConfig":"235"},{"size":1992,"mtime":1602166607000,"results":"288","hashOfConfig":"235"},{"size":912,"mtime":1596040622000,"results":"289","hashOfConfig":"235"},{"size":148,"mtime":1604067158000,"results":"290","hashOfConfig":"235"},{"size":4699,"mtime":1596450100000,"results":"291","hashOfConfig":"235"},{"size":3847,"mtime":1596204593000,"results":"292","hashOfConfig":"235"},{"size":419,"mtime":1589718446000,"results":"293","hashOfConfig":"235"},{"size":6747,"mtime":1616279179000,"results":"294","hashOfConfig":"235"},{"size":1983,"mtime":1590436492000,"results":"295","hashOfConfig":"235"},{"size":3383,"mtime":1595107323000,"results":"296","hashOfConfig":"235"},{"size":441,"mtime":1602086430000,"results":"297","hashOfConfig":"235"},{"size":4363,"mtime":1596443500000,"results":"298","hashOfConfig":"235"},{"size":4358,"mtime":1593013195000,"results":"299","hashOfConfig":"235"},{"size":1224,"mtime":1596201826000,"results":"300","hashOfConfig":"235"},{"size":320,"mtime":1600632364000,"results":"301","hashOfConfig":"235"},{"size":210,"mtime":1592341918000,"results":"302","hashOfConfig":"235"},{"size":2741,"mtime":1662927774401,"results":"303","hashOfConfig":"235"},{"size":4360,"mtime":1662930338176,"results":"304","hashOfConfig":"235"},{"size":14708,"mtime":1609188295000,"results":"305","hashOfConfig":"235"},{"size":230,"mtime":1599568154000,"results":"306","hashOfConfig":"235"},{"size":516,"mtime":1662221109311,"results":"307","hashOfConfig":"235"},{"size":29187,"mtime":1615549710000,"results":"308","hashOfConfig":"235"},{"size":24668,"mtime":1616277171000,"results":"309","hashOfConfig":"235"},{"size":1591,"mtime":1596270353000,"results":"310","hashOfConfig":"235"},{"size":1045,"mtime":1599424760000,"results":"311","hashOfConfig":"235"},{"size":1185,"mtime":1605966383000,"results":"312","hashOfConfig":"235"},{"size":1674,"mtime":1596277490000,"results":"313","hashOfConfig":"235"},{"size":1754,"mtime":1593599830000,"results":"314","hashOfConfig":"235"},{"size":2481,"mtime":1591908812000,"results":"315","hashOfConfig":"235"},{"size":2306,"mtime":1593718958000,"results":"316","hashOfConfig":"235"},{"size":541,"mtime":1593524926000,"results":"317","hashOfConfig":"235"},{"size":24906,"mtime":1662226671121,"results":"318","hashOfConfig":"235"},{"size":7771,"mtime":1602433464000,"results":"319","hashOfConfig":"235"},{"size":804,"mtime":1662226671124,"results":"320","hashOfConfig":"235"},{"size":629,"mtime":1616020259000,"results":"321","hashOfConfig":"235"},{"size":3357,"mtime":1662226671120,"results":"322","hashOfConfig":"235"},{"size":1839,"mtime":1662226671123,"results":"323","hashOfConfig":"235"},{"size":947,"mtime":1662930905970,"results":"324","hashOfConfig":"235"},{"size":921,"mtime":1662226671123,"results":"325","hashOfConfig":"235"},{"size":3773,"mtime":1593012864000,"results":"326","hashOfConfig":"235"},{"size":1804,"mtime":1662930636571,"results":"327","hashOfConfig":"235"},{"size":358,"mtime":1596277282000,"results":"328","hashOfConfig":"235"},{"size":1498,"mtime":1596277050000,"results":"329","hashOfConfig":"235"},{"size":1053,"mtime":1596278057000,"results":"330","hashOfConfig":"235"},{"size":1469,"mtime":1596272814000,"results":"331","hashOfConfig":"235"},{"size":221,"mtime":1605288029000,"results":"332","hashOfConfig":"235"},{"size":2411,"mtime":1591908801000,"results":"333","hashOfConfig":"235"},{"size":2405,"mtime":1605288213000,"results":"334","hashOfConfig":"235"},{"size":2402,"mtime":1606506452000,"results":"335","hashOfConfig":"235"},{"size":501,"mtime":1601559622000,"results":"336","hashOfConfig":"235"},{"size":15668,"mtime":1607954972000,"results":"337","hashOfConfig":"235"},{"size":1042,"mtime":1615382544000,"results":"338","hashOfConfig":"235"},{"size":299,"mtime":1600625147000,"results":"339","hashOfConfig":"235"},{"size":2105,"mtime":1601573098000,"results":"340","hashOfConfig":"235"},{"size":1547,"mtime":1602607582000,"results":"341","hashOfConfig":"235"},{"size":304,"mtime":1600629205000,"results":"342","hashOfConfig":"235"},{"size":2359,"mtime":1605273243000,"results":"343","hashOfConfig":"235"},{"size":691,"mtime":1599589097000,"results":"344","hashOfConfig":"235"},{"size":1078,"mtime":1602167259000,"results":"345","hashOfConfig":"235"},{"size":772,"mtime":1615992804000,"results":"346","hashOfConfig":"235"},{"size":3032,"mtime":1602085975000,"results":"347","hashOfConfig":"235"},{"size":2403,"mtime":1662931326450,"results":"348","hashOfConfig":"235"},{"size":375,"mtime":1608324047000,"results":"349","hashOfConfig":"235"},{"size":5880,"mtime":1596272419000,"results":"350","hashOfConfig":"235"},{"size":1342,"mtime":1596193787000,"results":"351","hashOfConfig":"235"},{"size":9694,"mtime":1605515393000,"results":"352","hashOfConfig":"235"},{"size":1689,"mtime":1599396321000,"results":"353","hashOfConfig":"235"},{"size":628,"mtime":1599862000000,"results":"354","hashOfConfig":"235"},{"size":971,"mtime":1599862005000,"results":"355","hashOfConfig":"235"},{"size":1484,"mtime":1616254821000,"results":"356","hashOfConfig":"235"},{"size":815,"mtime":1599388601000,"results":"357","hashOfConfig":"235"},{"size":781,"mtime":1602264373000,"results":"358","hashOfConfig":"235"},{"size":728,"mtime":1605287390000,"results":"359","hashOfConfig":"235"},{"size":1671,"mtime":1603110966000,"results":"360","hashOfConfig":"235"},{"size":1478,"mtime":1616262023000,"results":"361","hashOfConfig":"235"},{"size":2858,"mtime":1616262007000,"results":"362","hashOfConfig":"235"},{"size":1859,"mtime":1616254865000,"results":"363","hashOfConfig":"235"},{"size":1538,"mtime":1601559049000,"results":"364","hashOfConfig":"235"},{"size":986,"mtime":1599383970000,"results":"365","hashOfConfig":"235"},{"size":650,"mtime":1599398979000,"results":"366","hashOfConfig":"235"},{"size":2179,"mtime":1616254824000,"results":"367","hashOfConfig":"235"},{"size":1509,"mtime":1599862958000,"results":"368","hashOfConfig":"235"},{"size":1587,"mtime":1607334795000,"results":"369","hashOfConfig":"235"},{"size":4254,"mtime":1598290988000,"results":"370","hashOfConfig":"235"},{"size":991,"mtime":1607345987000,"results":"371","hashOfConfig":"235"},{"size":882,"mtime":1606511836000,"results":"372","hashOfConfig":"235"},{"size":6249,"mtime":1616255022000,"results":"373","hashOfConfig":"235"},{"size":2849,"mtime":1605966828000,"results":"374","hashOfConfig":"235"},{"size":629,"mtime":1616262218000,"results":"375","hashOfConfig":"235"},{"size":3411,"mtime":1600034699000,"results":"376","hashOfConfig":"235"},{"size":1266,"mtime":1599593927000,"results":"377","hashOfConfig":"235"},{"size":7583,"mtime":1606514431000,"results":"378","hashOfConfig":"235"},{"size":465,"mtime":1599862447000,"results":"379","hashOfConfig":"235"},{"size":1965,"mtime":1602020705000,"results":"380","hashOfConfig":"235"},{"size":1487,"mtime":1594913607000,"results":"381","hashOfConfig":"235"},{"size":1483,"mtime":1603880816000,"results":"382","hashOfConfig":"235"},{"size":457,"mtime":1596115836000,"results":"383","hashOfConfig":"235"},{"size":1152,"mtime":1596116005000,"results":"384","hashOfConfig":"235"},{"size":314,"mtime":1603880871000,"results":"385","hashOfConfig":"235"},{"size":5648,"mtime":1596278848000,"results":"386","hashOfConfig":"235"},{"size":538,"mtime":1596203460000,"results":"387","hashOfConfig":"235"},{"size":5063,"mtime":1616025059000,"results":"388","hashOfConfig":"235"},{"size":1163,"mtime":1605966801000,"results":"389","hashOfConfig":"235"},{"size":2029,"mtime":1591521898000,"results":"390","hashOfConfig":"235"},{"size":3349,"mtime":1590234622000,"results":"391","hashOfConfig":"235"},{"size":2367,"mtime":1602431840000,"results":"392","hashOfConfig":"235"},{"size":3945,"mtime":1603110542000,"results":"393","hashOfConfig":"235"},{"size":7343,"mtime":1602775596000,"results":"394","hashOfConfig":"235"},{"size":581,"mtime":1591209299000,"results":"395","hashOfConfig":"235"},{"size":1190,"mtime":1616276201000,"results":"396","hashOfConfig":"235"},{"size":1761,"mtime":1605966685000,"results":"397","hashOfConfig":"235"},{"size":3288,"mtime":1597312104000,"results":"398","hashOfConfig":"235"},{"size":1811,"mtime":1608322754000,"results":"399","hashOfConfig":"235"},{"size":3406,"mtime":1616024777000,"results":"400","hashOfConfig":"235"},{"size":737,"mtime":1608578574000,"results":"401","hashOfConfig":"235"},{"size":769,"mtime":1606408099000,"results":"402","hashOfConfig":"235"},{"size":689,"mtime":1601828704000,"results":"403","hashOfConfig":"235"},{"size":2864,"mtime":1601823174000,"results":"404","hashOfConfig":"235"},{"size":2387,"mtime":1602620202000,"results":"405","hashOfConfig":"235"},{"size":664,"mtime":1602166348000,"results":"406","hashOfConfig":"235"},{"size":1295,"mtime":1603111534000,"results":"407","hashOfConfig":"235"},{"size":8385,"mtime":1602428776000,"results":"408","hashOfConfig":"235"},{"size":975,"mtime":1602435752000,"results":"409","hashOfConfig":"235"},{"size":2109,"mtime":1602166904000,"results":"410","hashOfConfig":"235"},{"size":983,"mtime":1594322525000,"results":"411","hashOfConfig":"235"},{"size":897,"mtime":1602428998000,"results":"412","hashOfConfig":"235"},{"size":1050,"mtime":1662929985055,"results":"413","hashOfConfig":"235"},{"size":2268,"mtime":1616276218000,"results":"414","hashOfConfig":"235"},{"size":870,"mtime":1594316467000,"results":"415","hashOfConfig":"235"},{"size":1616,"mtime":1608325964000,"results":"416","hashOfConfig":"235"},{"size":1352,"mtime":1608579012000,"results":"417","hashOfConfig":"235"},{"size":4241,"mtime":1602620530000,"results":"418","hashOfConfig":"235"},{"size":1633,"mtime":1592939332000,"results":"419","hashOfConfig":"235"},{"size":795,"mtime":1601827096000,"results":"420","hashOfConfig":"235"},{"size":374,"mtime":1616188472000,"results":"421","hashOfConfig":"235"},{"size":3250,"mtime":1616276324000,"results":"422","hashOfConfig":"235"},{"size":461,"mtime":1608324254000,"results":"423","hashOfConfig":"235"},{"size":1900,"mtime":1608325651000,"results":"424","hashOfConfig":"235"},{"size":1157,"mtime":1608579312000,"results":"425","hashOfConfig":"235"},{"size":1507,"mtime":1608579388000,"results":"426","hashOfConfig":"235"},{"size":4280,"mtime":1616277888000,"results":"427","hashOfConfig":"235"},{"size":3944,"mtime":1616263508000,"results":"428","hashOfConfig":"235"},{"size":547,"mtime":1608325188000,"results":"429","hashOfConfig":"235"},{"size":1140,"mtime":1608325056000,"results":"430","hashOfConfig":"235"},{"size":332,"mtime":1608325124000,"results":"431","hashOfConfig":"235"},{"size":2213,"mtime":1609188006000,"results":"432","hashOfConfig":"235"},{"size":3574,"mtime":1608325904000,"results":"433","hashOfConfig":"235"},{"size":1210,"mtime":1608325680000,"results":"434","hashOfConfig":"235"},{"size":887,"mtime":1608325286000,"results":"435","hashOfConfig":"235"},{"size":410,"mtime":1606393238000,"results":"436","hashOfConfig":"235"},{"size":960,"mtime":1616252647000,"results":"437","hashOfConfig":"235"},{"size":710,"mtime":1616250102000,"results":"438","hashOfConfig":"235"},{"size":4195,"mtime":1615382479000,"results":"439","hashOfConfig":"235"},{"size":886,"mtime":1608580070000,"results":"440","hashOfConfig":"235"},{"size":943,"mtime":1616257115000,"results":"441","hashOfConfig":"235"},{"size":2507,"mtime":1606509305000,"results":"442","hashOfConfig":"235"},{"size":2811,"mtime":1616261797000,"results":"443","hashOfConfig":"235"},{"size":1982,"mtime":1598536910000,"results":"444","hashOfConfig":"235"},{"size":3297,"mtime":1609186932000,"results":"445","hashOfConfig":"235"},{"size":1466,"mtime":1609187422000,"results":"446","hashOfConfig":"235"},{"size":502,"mtime":1599403368000,"results":"447","hashOfConfig":"235"},{"size":1416,"mtime":1609188165000,"results":"448","hashOfConfig":"235"},{"size":1632,"mtime":1608580535000,"results":"449","hashOfConfig":"235"},{"size":2033,"mtime":1600353614000,"results":"450","hashOfConfig":"235"},{"size":775,"mtime":1598881279000,"results":"451","hashOfConfig":"235"},{"size":3057,"mtime":1607955370000,"results":"452","hashOfConfig":"235"},{"size":4707,"mtime":1607955347000,"results":"453","hashOfConfig":"235"},{"size":5692,"mtime":1616261719000,"results":"454","hashOfConfig":"235"},{"size":2842,"mtime":1604431907000,"results":"455","hashOfConfig":"235"},{"size":7791,"mtime":1616262590000,"results":"456","hashOfConfig":"235"},{"size":3767,"mtime":1607955376000,"results":"457","hashOfConfig":"235"},{"size":832,"mtime":1599565025000,"results":"458","hashOfConfig":"235"},{"size":5848,"mtime":1607955385000,"results":"459","hashOfConfig":"235"},{"size":662,"mtime":1609188165000,"results":"460","hashOfConfig":"235"},{"size":9149,"mtime":1608581417000,"results":"461","hashOfConfig":"235"},{"size":3908,"mtime":1600376866000,"results":"462","hashOfConfig":"235"},{"size":884,"mtime":1597751704000,"results":"463","hashOfConfig":"235"},{"size":1586,"mtime":1599055432000,"results":"464","hashOfConfig":"235"},{"size":1170,"mtime":1609188165000,"results":"465","hashOfConfig":"235"},{"size":731,"mtime":1609187935000,"results":"466","hashOfConfig":"235"},{"size":334,"mtime":1662922266669,"results":"467","hashOfConfig":"235"},{"filePath":"468","messages":"469","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},"1emqspi",{"filePath":"471","messages":"472","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"473","messages":"474","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"475","usedDeprecatedRules":"470"},{"filePath":"476","messages":"477","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"478","messages":"479","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"480","messages":"481","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"482","messages":"483","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"484","messages":"485","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"486","usedDeprecatedRules":"470"},{"filePath":"487","messages":"488","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"489","messages":"490","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"491","messages":"492","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"493","messages":"494","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"495","messages":"496","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"497","messages":"498","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"499","messages":"500","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"501","messages":"502","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"503","usedDeprecatedRules":"470"},{"filePath":"504","messages":"505","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"506","messages":"507","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"508","usedDeprecatedRules":"470"},{"filePath":"509","messages":"510","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"511","messages":"512","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"513","messages":"514","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"515","messages":"516","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"517","messages":"518","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"519","messages":"520","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521","usedDeprecatedRules":"470"},{"filePath":"522","messages":"523","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"524","messages":"525","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"526","messages":"527","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"528","messages":"529","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"530","messages":"531","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"532","messages":"533","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"534","usedDeprecatedRules":"470"},{"filePath":"535","messages":"536","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"537","usedDeprecatedRules":"470"},{"filePath":"538","messages":"539","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"540","usedDeprecatedRules":"470"},{"filePath":"541","messages":"542","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"543","usedDeprecatedRules":"470"},{"filePath":"544","messages":"545","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546","usedDeprecatedRules":"470"},{"filePath":"547","messages":"548","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"549","messages":"550","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551","usedDeprecatedRules":"470"},{"filePath":"552","messages":"553","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"554","messages":"555","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"556","usedDeprecatedRules":"470"},{"filePath":"557","messages":"558","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"559","messages":"560","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"561","usedDeprecatedRules":"470"},{"filePath":"562","messages":"563","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"564","messages":"565","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"566","usedDeprecatedRules":"470"},{"filePath":"567","messages":"568","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"569","messages":"570","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"571","messages":"572","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"573","usedDeprecatedRules":"470"},{"filePath":"574","messages":"575","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"576","usedDeprecatedRules":"470"},{"filePath":"577","messages":"578","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"579","messages":"580","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"470"},{"filePath":"582","messages":"583","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"584","messages":"585","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"586","usedDeprecatedRules":"470"},{"filePath":"587","messages":"588","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"589","usedDeprecatedRules":"470"},{"filePath":"590","messages":"591","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"592","messages":"593","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"594","messages":"595","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"596","messages":"597","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"598","messages":"599","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"600","messages":"601","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"602","messages":"603","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"604","messages":"605","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"606","messages":"607","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"608","messages":"609","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"610","messages":"611","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"612","usedDeprecatedRules":"470"},{"filePath":"613","messages":"614","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"615","messages":"616","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"617","messages":"618","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"619","messages":"620","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621","usedDeprecatedRules":"470"},{"filePath":"622","messages":"623","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"624","messages":"625","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"626","messages":"627","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"628","messages":"629","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"630","usedDeprecatedRules":"470"},{"filePath":"631","messages":"632","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"633","messages":"634","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"635","messages":"636","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"637","messages":"638","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"639","usedDeprecatedRules":"470"},{"filePath":"640","messages":"641","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"642","usedDeprecatedRules":"470"},{"filePath":"643","messages":"644","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"645","messages":"646","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"647","usedDeprecatedRules":"470"},{"filePath":"648","messages":"649","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"650","usedDeprecatedRules":"470"},{"filePath":"651","messages":"652","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"653","messages":"654","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"655","messages":"656","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"657","usedDeprecatedRules":"470"},{"filePath":"658","messages":"659","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"660","messages":"661","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"662","messages":"663","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664","usedDeprecatedRules":"470"},{"filePath":"665","messages":"666","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"667","usedDeprecatedRules":"470"},{"filePath":"668","messages":"669","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"670","messages":"671","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"672","messages":"673","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"674","messages":"675","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"676","messages":"677","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"678","usedDeprecatedRules":"470"},{"filePath":"679","messages":"680","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"681","messages":"682","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"683","messages":"684","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"685","usedDeprecatedRules":"470"},{"filePath":"686","messages":"687","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"688","messages":"689","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"690","messages":"691","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"692","messages":"693","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"694","messages":"695","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"696","messages":"697","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"698","usedDeprecatedRules":"470"},{"filePath":"699","messages":"700","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"701","messages":"702","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"703","messages":"704","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"705","messages":"706","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"707","messages":"708","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"709","usedDeprecatedRules":"470"},{"filePath":"710","messages":"711","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"712","messages":"713","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"714","usedDeprecatedRules":"470"},{"filePath":"715","messages":"716","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"717","usedDeprecatedRules":"470"},{"filePath":"718","messages":"719","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"720","messages":"721","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"722","usedDeprecatedRules":"470"},{"filePath":"723","messages":"724","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"725","messages":"726","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"727","usedDeprecatedRules":"470"},{"filePath":"728","messages":"729","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"730","usedDeprecatedRules":"470"},{"filePath":"731","messages":"732","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"733","usedDeprecatedRules":"470"},{"filePath":"734","messages":"735","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"736","usedDeprecatedRules":"470"},{"filePath":"737","messages":"738","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"739","messages":"740","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"741","usedDeprecatedRules":"470"},{"filePath":"742","messages":"743","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"744","messages":"745","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"746","messages":"747","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"748","messages":"749","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"750","messages":"751","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"752","messages":"753","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"754","usedDeprecatedRules":"470"},{"filePath":"755","messages":"756","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"757","messages":"758","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"759","messages":"760","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"761","messages":"762","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"763","messages":"764","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"765","messages":"766","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"767","messages":"768","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"769","messages":"770","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"771","messages":"772","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"773","messages":"774","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"775","messages":"776","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"777","messages":"778","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"779","messages":"780","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"781","messages":"782","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"783","messages":"784","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"785","usedDeprecatedRules":"470"},{"filePath":"786","messages":"787","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"788","messages":"789","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"790","usedDeprecatedRules":"470"},{"filePath":"791","messages":"792","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"793","messages":"794","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"795","messages":"796","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"797","messages":"798","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"799","messages":"800","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"801","usedDeprecatedRules":"470"},{"filePath":"802","messages":"803","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"804","messages":"805","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806","usedDeprecatedRules":"470"},{"filePath":"807","messages":"808","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"809","messages":"810","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"811","messages":"812","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"813","messages":"814","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"815","messages":"816","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"817","messages":"818","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"819","usedDeprecatedRules":"470"},{"filePath":"820","messages":"821","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"822","usedDeprecatedRules":"470"},{"filePath":"823","messages":"824","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"825","usedDeprecatedRules":"470"},{"filePath":"826","messages":"827","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"828","usedDeprecatedRules":"470"},{"filePath":"829","messages":"830","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"831","messages":"832","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"833","messages":"834","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"835","messages":"836","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"837","usedDeprecatedRules":"470"},{"filePath":"838","messages":"839","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"840","usedDeprecatedRules":"470"},{"filePath":"841","messages":"842","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"843","messages":"844","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"845","messages":"846","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"847","usedDeprecatedRules":"470"},{"filePath":"848","messages":"849","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"850","messages":"851","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"852","messages":"853","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"854","messages":"855","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"856","usedDeprecatedRules":"470"},{"filePath":"857","messages":"858","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"859","messages":"860","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"861","messages":"862","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"863","messages":"864","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"865","usedDeprecatedRules":"470"},{"filePath":"866","messages":"867","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"868","messages":"869","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"870","messages":"871","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"872","messages":"873","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"874","messages":"875","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"876","messages":"877","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"878","messages":"879","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"880","usedDeprecatedRules":"470"},{"filePath":"881","messages":"882","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"883","messages":"884","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"885","messages":"886","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"887","usedDeprecatedRules":"470"},{"filePath":"888","messages":"889","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"890","messages":"891","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"892","messages":"893","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"894","usedDeprecatedRules":"470"},{"filePath":"895","messages":"896","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"897","messages":"898","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"899","messages":"900","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"901","messages":"902","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"903","messages":"904","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"905","usedDeprecatedRules":"470"},{"filePath":"906","messages":"907","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"908","messages":"909","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"910","messages":"911","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"912","messages":"913","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"914","messages":"915","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"916","messages":"917","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"918","messages":"919","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"920","messages":"921","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"922","messages":"923","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"924","messages":"925","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"926","messages":"927","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"928","messages":"929","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"930","messages":"931","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"932","usedDeprecatedRules":"470"},{"filePath":"933","messages":"934","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"935","messages":"936","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"937","messages":"938","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"939","usedDeprecatedRules":"470"},{"filePath":"940","messages":"941","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"942","usedDeprecatedRules":"470"},{"filePath":"943","messages":"944","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"945","usedDeprecatedRules":"470"},{"filePath":"946","messages":"947","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"948","messages":"949","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"950","messages":"951","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"952","messages":"953","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"954","usedDeprecatedRules":"470"},{"filePath":"955","messages":"956","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"957","messages":"958","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"959","messages":"960","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"961","usedDeprecatedRules":"470"},{"filePath":"962","messages":"963","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"964","messages":"965","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"966","messages":"967","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"968","messages":"969","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"970","usedDeprecatedRules":"470"},{"filePath":"971","messages":"972","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"973","usedDeprecatedRules":"470"},{"filePath":"974","messages":"975","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"976","usedDeprecatedRules":"470"},{"filePath":"977","messages":"978","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"979","messages":"980","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"981","usedDeprecatedRules":"470"},{"filePath":"982","messages":"983","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"984","usedDeprecatedRules":"470"},{"filePath":"985","messages":"986","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"987","messages":"988","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"989","usedDeprecatedRules":"470"},{"filePath":"990","messages":"991","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"992","messages":"993","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"994","usedDeprecatedRules":"470"},{"filePath":"995","messages":"996","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"997","usedDeprecatedRules":"470"},{"filePath":"998","messages":"999","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"1000","messages":"1001","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1002","usedDeprecatedRules":"470"},{"filePath":"1003","messages":"1004","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},{"filePath":"1005","messages":"1006","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1007","usedDeprecatedRules":"470"},{"filePath":"1008","messages":"1009","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"470"},"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/index.js",[],["1010","1011"],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/reducers.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/App.js",["1012","1013"],"import React, { Suspense, lazy, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport ScrollToTop from './components/utilities/scrollToTop.component';\n\nimport { checkCookie } from './Actions/authActions';\nimport LoadingSpinner from './components/utilities/loadingSpinner.component';\n// import mcSpinner from './assets/svg/mcWhole3.svg';\n\nimport './css/about.css';\nimport './css/app.css';\nimport './css/cnic.css';\nimport './css/dashboard.css';\nimport './css/eventInfoView.css';\nimport './css/eventlistView.css';\nimport './css/eventView.css';\nimport './css/form.css';\nimport './css/general.css';\nimport './css/homeView.css';\nimport './css/index.css';\nimport './css/mainMap.css';\nimport './css/map.css';\nimport './css/misc.css';\nimport './css/navbar.css';\nimport './css/organisationsView.css';\nimport './css/organisationInfoView.css';\nimport './css/profileInfoView.css';\nimport './css/signupUser.css';\nimport './css/organisationDashInfoView.css';\nimport './css/groupInfoView.css';\nimport './css/groupMainView.css';\nimport './css/inspireView.css';\nimport './css/projectView.css';\nimport './css/volunteer.css';\n\nimport NavigationBar from './components/navigationBar.component';\nimport HomeView from './components/homeView/homeView.component';\nimport GeneralError from './components/errors/generalError.component';\nimport Error404 from './components/404.component';\nimport { faAmazonPay } from '@fortawesome/free-brands-svg-icons';\n\nconst MainMap = lazy(() => import('./components/map/mainMap.component'));\nconst Dashboard = lazy(() =>\n\timport('./components/dashboard/dashboardContainer.component')\n);\nconst OrgView = lazy(() =>\n\timport('./components/organisations/organisationsView.component')\n);\nconst GroupView = lazy(() => import('./components/groups/groupView.component'));\nconst CreateProject = lazy(() =>\n\timport('./components/signup/createProject.component')\n);\nconst OrgViewInfo = lazy(() =>\n\timport('./components/organisations/organisationInfoView.component')\n);\nconst ProjectView = lazy(() =>\n\timport('./components/projects/mainProjectView.component')\n);\nconst MainSelectedProjectView = lazy(() =>\n\timport('./components/projects/mainSelectedProjectView.component')\n);\nconst VolunteerView = lazy(() =>\n\timport('./components/volunteers/mainVolunteerView.component')\n);\nconst SelectedVolunteerView = lazy(() =>\n\timport('./components/volunteers/mainSelectedVolunteerView.component')\n);\nconst SignUpOrg = lazy(() => import('./components/signup/signUpOrg.component'));\nconst EditOrg = lazy(() =>\n\timport('./components/update/updateOrganisation.component')\n);\nconst SignupUser = lazy(() =>\n\timport('./components/signup/signupUser.component')\n);\nconst UpdateProfile = lazy(() =>\n\timport('./components/update/updateProfile.component')\n);\nconst ResetPassword = lazy(() =>\n\timport('./components/reset/resetPassword.component')\n);\nconst ResettingPassword = lazy(() =>\n\timport('./components/reset/resettingPassword.component')\n);\nconst EmailVerification = lazy(() =>\n\timport('./components/signup/emailVerification.component')\n);\nconst CreateEvent = lazy(() =>\n\timport('./components/signup/createEvent.component')\n);\nconst UpdateEvent = lazy(() =>\n\timport('./components/update/updateEvent.component')\n);\nconst AboutView = lazy(() => import('./components/about.component'));\nconst InspireView = lazy(() =>\n\timport('./components/inspire/inspireView.component')\n);\nconst CnicView = lazy(() => import('./components/cnic/cnicView.component'));\nconst PrivacyPolicy = lazy(() =>\n\timport('./components/privacyPolicy.component')\n);\nconst TermsAndConditions = lazy(() =>\n\timport('./components/termsAndConditions')\n);\nconst CreateGroup = lazy(() =>\n\timport('./components/signup/createGroup.component')\n);\nconst CreateVolunteer = lazy(() =>\n\timport('./components/signup/volunteer/createVolunteer.component')\n);\nconst CreateUserVolunteer = lazy(() =>\n\timport('./components/signup/volunteer/createUserVolunteer.component')\n);\nconst UpdateVolunteerProfile = lazy(() =>\n\timport('./components/update/updateVolunteerProfile.component')\n);\nconst Floodlight = lazy(() => import('./components/floodlight/floodLight'));\n\nfunction App({ dispatch, checkedCookie }) {\n\tuseEffect(() => {\n\t\tif (!checkedCookie) {\n\t\t\tdispatch(checkCookie());\n\t\t}\n\t});\n\n\treturn (\n\t\t<Router>\n\t\t\t<GeneralError>\n\t\t\t\t<ScrollToTop />\n\t\t\t\t<NavigationBar />\n\t\t\t\t<Suspense fallback={<LoadingSpinner />}>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route path=\"/\" exact component={HomeView} />\n\t\t\t\t\t\t<Route path=\"/dashboard\" exact component={Dashboard} />\n\t\t\t\t\t\t<Route path=\"/floodlight\" exact component={Floodlight} />\n\t\t\t\t\t\t<Route path=\"/map\" exact component={MainMap} />\n\t\t\t\t\t\t<Route path=\"/organisations/:id\" component={OrgViewInfo} />\n\t\t\t\t\t\t<Route path=\"/organisations\" component={OrgView} />\n\t\t\t\t\t\t<Route path=\"/projects/:id\" component={MainSelectedProjectView} />\n\t\t\t\t\t\t<Route path=\"/projects\" component={ProjectView} />\n\t\t\t\t\t\t<Route path=\"/volunteers/:id\" component={SelectedVolunteerView} />\n\t\t\t\t\t\t<Route path=\"/volunteers\" component={VolunteerView} />\n\t\t\t\t\t\t<Route path=\"/groups\" component={GroupView} />\n\t\t\t\t\t\t<Route path=\"/about\" component={AboutView} />\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\tpath={['/inspire/:id', '/inspire']}\n\t\t\t\t\t\t\tcomponent={InspireView}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Route path=\"/signup\" component={SignupUser} />\n\t\t\t\t\t\t<Route path=\"/updateProfile\" component={UpdateProfile} />\n\t\t\t\t\t\t<Route path=\"/signupOrg\" component={SignUpOrg} />\n\t\t\t\t\t\t<Route path=\"/updateOrg/:id\" component={EditOrg} />\n\t\t\t\t\t\t<Route path=\"/createProject/:orgID\" component={CreateProject} />\n\t\t\t\t\t\t<Route path=\"/reset\" component={ResetPassword} />\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\tpath=\"/resetPassword/:id/:token\"\n\t\t\t\t\t\t\tcomponent={ResettingPassword}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Route path=\"/verify/:token\" component={EmailVerification} />\n\t\t\t\t\t\t<Route path=\"/createEvent/:orgID\" component={CreateEvent} />\n\t\t\t\t\t\t<Route path=\"/updateEvent/:orgID/:id\" component={UpdateEvent} />\n\t\t\t\t\t\t<Route path=\"/createGroup\" component={CreateGroup} />\n\t\t\t\t\t\t<Route path=\"/createVolunteer\" component={CreateVolunteer} />\n\t\t\t\t\t\t<Route\n\t\t\t\t\t\t\tpath=\"/createUserVolunteer\"\n\t\t\t\t\t\t\tcomponent={CreateUserVolunteer}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Route path=\"/updateVolunteer\" component={UpdateVolunteerProfile} />\n\t\t\t\t\t\t{/* <Route path=\"/cnic\" component={CnicView} /> */}\n\t\t\t\t\t\t<Route path=\"/privacypolicy\" component={PrivacyPolicy} />\n\t\t\t\t\t\t<Route path=\"/termsandconditions\" component={TermsAndConditions} />\n\t\t\t\t\t\t<Route component={Error404} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</Suspense>\n\t\t\t</GeneralError>\n\t\t</Router>\n\t);\n}\n\nconst MapStateToProps = (state) => ({\n\tcheckedCookie: state.auth.checkedCookie,\n});\n\nexport default connect(MapStateToProps)(App);\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/createEventReducer.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/mapInfoReducer.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/orgReducer.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/updateReducer.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/signUpReducer.js",["1014"],"import * as actions from \"../Actions/signUpActions\";\nimport * as volunteerActions from \"../Actions/volunteerActions\";\n\nexport const initialState = {\n  loading: false,\n  hasErrors: false,\n  error: null,\n  success: false,\n};\n\nexport default function signUpReducer(state = initialState, action) {\n  switch (action.type) {\n    case actions.SIGNUP:\n      return {\n        ...state,\n        loading: true,\n        success: false,\n        hasErrors: false,\n      };\n    case actions.SIGNUP_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        success: true,\n        hasErrors: false,\n      };\n    case actions.SIGNUP_FAILURE:\n      if (\n        action.payload &&\n        action.payload.data &&\n        action.payload.data.errorCode\n      ) {\n        return {\n          loading: false,\n          success: false,\n          error: action.payload.data.errorCode,\n          hasErrors: true,\n        };\n      } else {\n        return {\n          loading: false,\n          success: false,\n          error: 100,\n          hasErrors: true,\n        };\n      }\n    case actions.SIGNUP_RESET:\n      return initialState;\n    case volunteerActions.CREATE_VOLUNTEER:\n      return {\n        ...state,\n        loading: true,\n        success: false,\n        hasErrors: false,\n      };\n    case volunteerActions.CREATE_VOLUNTEER_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        success: true,\n        hasErrors: false,\n      };\n    case volunteerActions.CREATE_VOLUNTEER_FAILURE:\n      return {\n        loading: false,\n        success: false,\n        error: 100,\n        hasErrors: true,\n      };\n    case volunteerActions.CREATE_USER_VOLUNTEER_RESET:\n      return initialState;\n    case volunteerActions.CREATE_USER_VOLUNTEER:\n      return {\n        ...state,\n        loading: true,\n        success: false,\n        hasErrors: false,\n      };\n    case volunteerActions.CREATE_USER_VOLUNTEER_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        success: true,\n        hasErrors: false,\n      };\n    case volunteerActions.CREATE_USER_VOLUNTEER_FAILURE:\n      if (\n        action.payload &&\n        action.payload.data &&\n        action.payload.data.errorCode\n      ) {\n        return {\n          loading: false,\n          success: false,\n          error: action.payload.data.errorCode,\n          hasErrors: true,\n        };\n      } else {\n        return {\n          loading: false,\n          success: false,\n          error: 100,\n          hasErrors: true,\n        };\n      }\n    case volunteerActions.CREATE_USER_VOLUNTEER_RESET:\n      return initialState;\n    case volunteerActions.UPDATE_VOLUNTEER:\n      return {\n        ...state,\n        loading: true,\n        success: false,\n        hasErrors: false,\n      };\n    case volunteerActions.UPDATE_VOLUNTEER_SUCCESS:\n      return {\n        ...state,\n        loading: false,\n        success: true,\n        hasErrors: false,\n      };\n    case volunteerActions.UPDATE_VOLUNTEER_FAILURE:\n      return {\n        loading: false,\n        success: false,\n        error: 100,\n        hasErrors: true,\n      };\n    case volunteerActions.UPDATE_VOLUNTEER_RESET:\n      return initialState;\n    default:\n      return state;\n  }\n}\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/homeViewReducer.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/groupReducer.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/cnicReducer.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/deleteReducer.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/authReducer.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/volunteerReducer.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/projectReducer.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Reducers/userInfoReducer.js",["1015","1016"],"import * as actions from '../Actions/userInfoActions';\nimport { LOGOUT } from '../Actions/authActions';\nimport { normalizeUserState } from '../components/utilities/normalise';\n\nexport const initialState = {\n\tfetched: false,\n\tloading: false,\n\tentities: '',\n\tentityIds: {\n\t\t// createdOrganisations: [],\n\t\t// projects: [],\n\t\t// createdGroups: [],\n\t\t// sponsorRequests: [],\n\t\t// volunteerInfo: [],\n\t\t// volunteerRequests: [],\n\t\t// updates: [],\n\t\t// supplies: [],\n\t},\n\tsponsorRequests: null,\n\tcreatedOrganisations: null,\n\tprojects: null,\n\tgroups: null,\n\tvolunteeringInfo: null,\n\tvolunteerRequests: null,\n\tupdates: null,\n\tsupplies: null,\n\tuser: null,\n\tuserID: null,\n\thasErrors: false,\n\terror: null,\n};\n\nconst newFundingState = (funding) => {\n\tif (funding) {\n\t\treturn {\n\t\t\tfundingNeeded: funding.fundingNeeded,\n\t\t\tfundingReceived: funding.fundingReceived,\n\t\t\tbackers: funding.backers,\n\t\t\tfundingUsedFor: funding.fundingUsedFor,\n\t\t};\n\t}\n\treturn null;\n};\n\nconst newSupplyState = (supplies) => {\n\tif (supplies) {\n\t\treturn supplies.map((supply) => {\n\t\t\treturn {\n\t\t\t\t...supply,\n\t\t\t\tsuppliedBy: supply.suppliedBy,\n\t\t\t};\n\t\t});\n\t}\n\treturn null;\n};\n\nexport default function userInfoReducer(state = initialState, action) {\n\tswitch (action.type) {\n\t\tcase actions.GET_USER_INFO:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: true,\n\t\t\t};\n\t\tcase actions.GET_USER_INFO_SUCCESS:\n\t\t\tconst normalizedState = normalizeUserState(action.payload);\n\t\t\treturn {\n\t\t\t\t...normalizedState.entities,\n\t\t\t\tentityIds: normalizedState.entityIds,\n\t\t\t\tfetched: true,\n\t\t\t\tloading: false,\n\t\t\t\thasErrors: false,\n\t\t\t};\n\t\tcase actions.GET_USER_INFO_FAILURE:\n\t\t\tconsole.log(action.payload);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tfetched: false,\n\t\t\t\thasErrors: true,\n\t\t\t\tloading: false,\n\t\t\t\terror: action.payload,\n\t\t\t};\n\t\tcase actions.GET_USER_INFO_BACKGROUND:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\t// loading: true\n\t\t\t};\n\t\tcase actions.GET_USER_INFO_BACKGROUND_SUCCESS:\n\t\t\tconst normalizedState2 = normalizeUserState(action.payload);\n\t\t\treturn {\n\t\t\t\t...normalizedState2.entities,\n\t\t\t\tentityIds: normalizedState2.entityIds,\n\t\t\t\tfetched: true,\n\t\t\t\tloading: false,\n\t\t\t\thasErrors: false,\n\t\t\t};\n\t\tcase actions.GET_USER_INFO_BACKGROUND_FAILURE:\n\t\t\tconsole.log(action.payload);\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tloading: false,\n\t\t\t\thasErrors: true,\n\t\t\t\tfetched: false,\n\t\t\t};\n\t\tcase actions.RESET_USER_INFO_GET:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tfetched: false,\n\t\t\t\tloading: false,\n\t\t\t\thasErrors: false,\n\t\t\t};\n\t\tcase LOGOUT:\n\t\t\treturn initialState;\n\t\tcase actions.DELETE_USER_INFO_EVENT:\n\t\t\tlet orgs = [...state.user.createdOrganisations];\n\t\t\tfor (let i = 0; i < orgs.length; i++) {\n\t\t\t\tfor (let j = 0; j < orgs[i].events.length; j++) {\n\t\t\t\t\tif (orgs[i].events[j]._id === action.payload) {\n\t\t\t\t\t\torgs[i].events.splice(j, 1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuser: {\n\t\t\t\t\t...state.user,\n\t\t\t\t\tcreatedOrganisations: [...orgs],\n\t\t\t\t},\n\t\t\t};\n\t\tcase actions.DELETE_USER_INFO_GROUP:\n\t\t\tlet newCreatedGroups = [...state.user.createdGroups];\n\t\t\tfor (let i = 0; i < state.user.createdGroups.length; i++) {\n\t\t\t\tif (state.user.createdGroups[i]._id === action.payload) {\n\t\t\t\t\tnewCreatedGroups.splice(i, 1);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tuser: {\n\t\t\t\t\t...state.user,\n\t\t\t\t\tcreatedGroups: [...newCreatedGroups],\n\t\t\t\t},\n\t\t\t};\n\t\tdefault:\n\t\t\treturn state;\n\t}\n}\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/navigationBar.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/404.component.js",["1017","1018","1019"],"import React from 'react'\nimport MCRing from '../assets/svg/MCRing.svg'\nimport MCRing2 from '../assets/svg/mcWhole.svg'\nimport MCRing3 from '../assets/svg/mcWhole1.svg'\nimport MCRing5 from '../assets/svg/mcWhole3.svg'\n\nimport '../css/misc.css'\n\nconst Error404 = () => {\n  return (\n    <div className=\"Error404\">\n      <div className=\"Container404\">\n        <p className=\"pHeight\">4</p>\n        <img className=\"MCRing\" src={MCRing5} alt=\"\" />\n        <p className=\"pHeight\">4</p>\n      </div>\n      <p style={{\n        color: \"white\",\n        fontWeight: \"bold\",\n        fontSize: \"2em\"\n      }}> Error </p>\n    </div>\n  )\n}\n\nexport default Error404;\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/authActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/termsAndConditions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/scrollToTop.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/about.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/privacyPolicy.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mainMap.component.js",["1020"],"import React, { useEffect } from 'react';\n// import MapView from './mapView.component';\nimport { Helmet } from 'react-helmet';\nimport MapView from './mapViewGoogle.component';\nimport MapListView from './mapListView.component';\n\nconst HomeView = () => {\n\n  return (\n    <>\n    <Helmet>\n      <html lang=\"en\" />\n      <meta name=\"description\" content=\"Map that shows distribtuions, projects, layer data, etc all over Pakistan\" />\n    </Helmet>\n    <div className=\"containerHome\">\n      <div className=\"mapView\">\n        <MapView />\n      </div>\n      <div className=\"eventListView\">\n        <MapListView />\n      </div>\n    </div>\n    </>\n  )\n}\n\n\nexport default HomeView;","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/loadingSpinner.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/organisations/organisationsView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/homeView/homeView.component.js",["1021","1022","1023"],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/errors/generalError.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/dashboardContainer.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/groups/groupView.component.js",["1024","1025","1026"],"import React, { useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport { Spinner } from 'react-bootstrap';\n\nimport { getGroups } from '../../Actions/groupActions';\nimport getRandomColour from '../utilities/randomMCColour.component';\nimport { LightenDarkenColor } from '../utilities/colourUtils';\nimport { GroupModal } from '../groups/groupModal.component';\n\nimport '../sharedComponents/standardCard.component';\nimport StandardCard from '../sharedComponents/standardCard.component';\n\nconst GroupView = ({ dispatch, loading, fetched, hasErrors, groups }) => {\n  useEffect(() => {\n    if (!loading && !fetched) {\n      dispatch(getGroups())\n    }\n  })\n\n  return (\n    <>\n    <Helmet>\n      <html lang=\"en\" />\n      <meta name=\"description\" content=\"A list of groups that a user can join\" />\n    </Helmet>\n    <div className=\"groupMainContainer\">\n      <h1> Groups </h1>\n      <p> Select the whatsapp group that you would like to join. Click on the link and contribute. </p>\n      <FilterBar />\n      <Groups groups={groups} hasErrors={hasErrors} loading={loading} />\n    </div>\n    </>\n  )\n}\n\nconst FilterBar = ({  }) => {\n  return (\n    null\n  )\n}\n\nconst Groups = ({ groups, loading, hasErrors }) => {\n  const [selectedGroup, setSelectedGroup] = useState(null)\n\n  if (loading) {\n    return (\n      <div className=\"spinnerThing\">\n\t\t\t\t<Spinner animation=\"border\" role=\"status\" style={{color: \"black\"}}>\n\t\t\t\t\t<span className=\"sr-only\">Loading...</span>\n\t\t\t\t</Spinner>\n\t\t\t</div>\n    )\n  }\n\n  if (hasErrors) {\n    return (\n      null\n    )\n  }\n\n  return (\n    <>\n    <div className=\"groupMainCardsContainer\">\n      {groups.map((group) => {\n        const randomColour = getRandomColour()\n        return (\n          <div key={group._id} className=\"groupCard groupCardShadow growSmall\" onClick={() => setSelectedGroup(group)} >\n            <StandardCard name={group.groupName} image={group.groupImage} />\n          </div>\n        )\n      })}\n    </div>\n    {selectedGroup &&\n      <GroupModal group={selectedGroup} setSelectedGroup={setSelectedGroup} />\n    }\n    </>\n  )\n}\n\nconst MapStateToProps = (state) => ({\n  loading: state.groupInfo.groupData.loading,\n  hasErrors: state.groupInfo.groupData.hasErrors,\n  fetched: state.groupInfo.groupData.fetched,\n  groups: state.groupInfo.groupData.groups,\n})\n\nexport default connect(MapStateToProps)(GroupView)","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/organisations/organisationInfoView.component.js",["1027"],"import React, { Fragment, useEffect, useState } from 'react';\nimport { connect } from 'react-redux';\nimport { Card, Spinner } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom';\nimport MoneyNumberDetails from '../sharedComponents/numberMoneyDetails.component';\nimport WhichLogo from '../sharedComponents/whichLogo.component';\nimport SocialMediaIcons from '../sharedComponents/socialMediaIcons.component';\nimport BankingDetails from '../sharedComponents/bankingDetails.component';\nimport { getOrgInfo } from '../../Actions/getOrgInfoActions';\nimport { WhatCategories } from '../iconController/iconCategories.component';\nimport CheckOldOrNewAddress from '../sharedComponents/address.component';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faGlobe } from '@fortawesome/pro-solid-svg-icons';\nimport imagePlaceholder from '../../assets/Images/temp.jpg';\n\nconst OrganisationsInfoView = ({\n\tdispatch,\n\thasErrors,\n\tloading,\n\torgs,\n\tfetched,\n\tprops,\n}) => {\n\tconst { id } = useParams();\n\tconst [org, setOrg] = useState(null);\n\n\tuseEffect(() => {\n\t\tif (!fetched && !loading) {\n\t\t\tdispatch(getOrgInfo());\n\t\t}\n\t\tif (fetched) {\n\t\t\tconst chosenOrg = orgs.find((filteredOrg) => {\n\t\t\t\treturn id === filteredOrg._id;\n\t\t\t});\n\t\t\tsetOrg(chosenOrg);\n\t\t}\n\t}, [fetched]);\n\n\tif (hasErrors) {\n\t\treturn <p> Error </p>;\n\t}\n\n\tif (!org || loading) {\n\t\treturn (\n\t\t\t<div className=\"orgInfoLoading\">\n\t\t\t\t<Spinner animation=\"border\" role=\"status\">\n\t\t\t\t\t<span className=\"sr-only\">Loading...</span>\n\t\t\t\t</Spinner>\n\t\t\t</div>\n\t\t);\n\t} else {\n\t\treturn (\n\t\t\t<div className=\"orgInfoCardContainer\">\n\t\t\t\t<Card className=\"orgInfoCard\">\n\t\t\t\t\t<Card.Body>\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName=\"backButtonOrgView standardButton\"\n\t\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\t\tprops.history.goBack();\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\tBack\n\t\t\t\t\t\t</button>\n\t\t\t\t\t\t<Card.Img\n\t\t\t\t\t\t\tclassName=\"orgInfoImage\"\n\t\t\t\t\t\t\tvariant=\"top\"\n\t\t\t\t\t\t\tsrc={org.imageURL ? org.imageURL : imagePlaceholder}\n\t\t\t\t\t\t\talt=\"\"\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Card.Title> {org.name} </Card.Title>\n\t\t\t\t\t\t<Card.Subtitle> {org.type} </Card.Subtitle>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<h6 className=\"text-muted smallHeader\"> Description </h6>\n\t\t\t\t\t\t<Card.Text> {org.description} </Card.Text>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<h6 className=\"text-muted\"> Type of Work </h6>\n\t\t\t\t\t\t<div className=\"orgInfoIcons\">\n\t\t\t\t\t\t\t<WhatCategories types={org.areaOfWork} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<h6 className=\"text-muted\"> Address </h6>\n\t\t\t\t\t\t<CheckOldOrNewAddress address={org.address} />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<h6 className=\"text-muted\"> Donation Info </h6>\n\t\t\t\t\t\t<BankingDetails bankingDetails={org.bankingDetails} />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<MoneyNumberDetails\n\t\t\t\t\t\t\tname=\"EasyPaisa\"\n\t\t\t\t\t\t\tnumber={org.bankingDetails.easyPaisa}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<MoneyNumberDetails\n\t\t\t\t\t\t\tname=\"JazzCash\"\n\t\t\t\t\t\t\tnumber={org.bankingDetails.jazzCash}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<h6 className=\"text-muted\"> Point of Contact </h6>\n\t\t\t\t\t\t<Card.Text> {org.contactName} </Card.Text>\n\t\t\t\t\t\t<Card.Text> {org.contactNumber} </Card.Text>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t{org.contactInfo && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<h6 className=\"text-muted\"> Other Contact Info </h6>\n\t\t\t\t\t\t\t\t<Card.Text> {org.contactInfo} </Card.Text>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t{org.websiteURL && (\n\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t<h6 className=\"text-muted\"> Website </h6>\n\t\t\t\t\t\t\t\t<a\n\t\t\t\t\t\t\t\t\thref={org.websiteURL}\n\t\t\t\t\t\t\t\t\tkey={org.websiteURL}\n\t\t\t\t\t\t\t\t\ttarget=\"_blank\"\n\t\t\t\t\t\t\t\t\trel=\"noopener noreferrer\"\n\t\t\t\t\t\t\t\t\tclassName=\"icon\"\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t\t\t<FontAwesomeIcon icon={faGlobe} />\n\t\t\t\t\t\t\t\t</a>\n\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t)}\n\t\t\t\t\t\t<SocialMediaIcons org={org} />\n\t\t\t\t\t\t<div className=\"orgSocialMediaContainer\">\n\t\t\t\t\t\t\t<WhichLogo icon={org.facebookURL} />\n\t\t\t\t\t\t\t<WhichLogo icon={org.twitterURL} />\n\t\t\t\t\t\t\t<WhichLogo icon={org.instagramURL} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</Card.Body>\n\t\t\t\t</Card>\n\t\t\t</div>\n\t\t);\n\t}\n};\n\nconst MapStateToProps = (state, ownProps) => ({\n\tloading: state.orgInfo.orgMainInfo.loading,\n\torgs: state.orgInfo.orgMainInfo.orgInfo,\n\tfetched: state.orgInfo.orgMainInfo.fetched,\n\thasErrors: state.orgInfo.orgMainInfo.hasErrors,\n\tprops: ownProps,\n});\n\nexport default connect(MapStateToProps)(OrganisationsInfoView);\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/createProject.component.js",["1028","1029","1030"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Spinner } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { createProject, creatingProjectReset } from \"../../Actions/projectActions\";\nimport { baseStyle, acceptStyle, activeStyle, rejectStyle } from \"../utilities/dropzoneStyles\";\nimport SelectMap from \"./selectMap.component\";\nimport Dropzone, { useDropzone } from \"react-dropzone\";\nimport Thumb from \"../utilities/thumb.component\";\nimport CategoryOptions from '../sharedComponents/categoryOptions.component';\nimport { CategoryBadgeOptionsForm } from '../sharedComponents/selectBadgeOptions.component'\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faProjectDiagram } from \"@fortawesome/pro-solid-svg-icons\";\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required(\"*Project name is required\")\n    .min(1, \"*Project name must be longer than 1 charachter\")\n    .max(50, \"*Project name must be less than 50 charachters\")\n    .matches(\n      /^[a-zA-Z0-9,!?_ ]*$/,\n      \"*Project name must only contain letters or numbers\"\n    ),\n  tagline: Yup.string()\n  .required(\"*Tagline is required\")\n  .min(1, \"*Tagline must be longer than 1 charachter\")\n  .max(1000, \"*Tagline must be less than 100 charachters\"),\n  description: Yup.string()\n    .required(\"*Description is required\")\n    .min(1, \"*Description must be longer than 1 charachter\")\n    .max(1000, \"*Description must be less than 1000 charachters\"),\n  problem: Yup.string()\n    .required(\"*Problem description is required\")\n    .min(1, \"*Problem description must be longer than 1 charachter\")\n    .max(1000, \"*Problem description must be less than 1000 charachters\"),\n  solution: Yup.string()\n    .required(\"*Solution description is required\")\n    .min(1, \"*Solution description must be longer than 1 charachter\")\n    .max(1000, \"*Solution description must be less than 1000 charachters\"),\n  date: Yup.date().min(new Date(), \"*Date must be in the future\"),\n  agreedToTerms: Yup.bool().oneOf([true], \"*Must accept terms and conditions\"),\n  mapClicked: Yup.bool().oneOf([true], \"*Must select a location\"),\n});\n\nconst CreateProject = ({ dispatch, auth, orgID, loading, success, hasErrors, history }) => {\n  const [location, setLocation] = useState([]);\n  const [imageFiles, setImageFiles] = useState([]);\n  const [rejectedFilesState, setRejectedFilesState] = useState([]);\n  const { isDragActive, isDragAccept, isDragReject } = useDropzone({\n    accept: \"image/jpeg, image/png, image/jpg, image/gif\",\n    maxSize: 2000000,\n  });\n\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {}),\n    }),\n    [isDragActive, isDragReject]\n  );\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      tagline: \"\",\n      description: \"\",\n      problem: \"\",\n      solution: \"\",\n      primaryCategory: \"animalWelfare\",\n      secondaryCategories: [],\n      date: new Date(),\n      images: [],\n      mapClicked: false,\n      agreedToTerms: false,\n    },\n    validationSchema: validationSchema,\n    validateOnChange: false,\n    validateOnBlur: false,\n    onSubmit: (values) => {\n      const newPoint = {\n        type: \"Point\",\n        coordinates: location,\n      };\n      let project = {\n        name: values.name,\n        tagline: values.tagline,\n        description: values.description,\n        problem: values.problem,\n        solution: values.solution,\n        primaryCategory: values.primaryCategory,\n        secondaryCategories: values.secondaryCategories,\n        completionDate: values.date,\n        images: values.images,\n        location: newPoint,\n        orgID: orgID,\n      };\n      dispatch(createProject(project));\n    },\n  });\n\n  useEffect(() => {\n    if (!orgID || !auth) {\n      history.push('/dashboard')\n    }\n  }, [orgID, auth])\n\n  useEffect(() => {\n    if (success) {\n      dispatch(creatingProjectReset());\n      history.push('/dashboard')\n    }\n  }, [success])\n\n  return (\n    <div className=\"formCardContainer\">\n      <div className=\"createProjectForm\">\n        <form noValidate onSubmit={formik.handleSubmit}>\n          <div className=\"formMainHeader\">\n            <FontAwesomeIcon icon={faProjectDiagram} size=\"2x\" />\n            <h2> Create Project </h2>\n          </div>\n          <div className=\"formMainBody\">\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">Name of Project</p>\n              <input\n                autoFocus\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Enter Project Name\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.name}\n              />\n              {formik.errors.name && (\n                <p className=\"formInputError\"> {formik.errors.name} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">Tagline</p>\n              <textarea\n                type=\"text\"\n                name=\"tagline\"\n                rows=\"2\"\n                placeholder=\"Enter tagline\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.tagline}\n              />\n              {formik.errors.tagline && (\n                <p className=\"formInputError\"> {formik.errors.tagline} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">Description</p>\n              <textarea\n                type=\"text\"\n                name=\"description\"\n                rows=\"3\"\n                placeholder=\"Enter Description\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.description}\n              />\n              {formik.errors.description && (\n                <p className=\"formInputError\"> {formik.errors.description} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">What problem are you solving?</p>\n              <textarea\n                type=\"text\"\n                name=\"problem\"\n                rows=\"3\"\n                placeholder=\"Enter Problem\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.problem}\n              />\n              {formik.errors.problem && (\n                <p className=\"formInputError\"> {formik.errors.problem} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">What is your proposed solution?</p>\n              <textarea\n                type=\"text\"\n                name=\"solution\"\n                rows=\"3\"\n                placeholder=\"Enter solution\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.solution}\n              />\n              {formik.errors.solution && (\n                <p className=\"formInputError\"> {formik.errors.solution} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">What category does the project fall under?</p>\n              <select\n                name=\"primaryCategory\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.primaryCategory}\n              >\n                <CategoryOptions />\n              </select>\n              {formik.errors.primaryCategory && (\n                <p className=\"formInputError\"> {formik.errors.primaryCategory} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">Select any other categories that may be valid</p>\n              <CategoryBadgeOptionsForm fieldName=\"secondaryCategories\" setFieldValue={formik.setFieldValue} options={formik.values.secondaryCategories} />\n              {/* {formik.errors.solution && (\n                <p className=\"formInputError\"> {formik.errors.secondary} </p>\n              )} */}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">Project date</p>\n              <DatePicker\n                selected={formik.values.date}\n                onChange={(date) => {\n                  formik.setFieldValue(\"date\", date);\n                }}\n                name=\"date\"\n                className=\"datePicker\"\n                minDate={new Date()}\n              />\n              {formik.errors.date && (\n                <p className=\"formInputError\"> {formik.errors.date} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Project Images (Under 1mb, only 3 images, files must have\n                extension of either .jpg, .jpeg or .png)\n              </p>\n              <Dropzone\n                accept=\"image/jpeg, image/png, image/jpg, image/gif\"\n                maxSize={11000000}\n                onDropRejected={(rejectedFiles) => {\n                  console.log(\"rejected\");\n                  setRejectedFilesState(rejectedFiles);\n                }}\n                onDrop={(acceptedFiles, rejectedFiles) => {\n                  if (rejectedFiles.length === 0) {\n                    setRejectedFilesState([]);\n                  }\n                  setImageFiles(acceptedFiles);\n                  formik.setFieldValue(\"images\", acceptedFiles);\n                }}\n              >\n                {({ getRootProps, getInputProps }) => (\n                  <>\n                    <div {...getRootProps({ style })}>\n                      <input {...getInputProps()} />\n                      <p>\n                        Drag 'n' drop images here, or click to select images\n                      </p>\n                      <div className=\"thumbnailRow\">\n                        {imageFiles.map((file) => {\n                          return <Thumb file={file} key={file.name} />;\n                        })}\n                      </div>\n                    </div>\n                    {rejectedFilesState.length === 0 ? null : (\n                      <p className=\"redError\">\n                        {\" \"}\n                        Some files were rejected. make sure they are not more\n                        than 1mb.{\" \"}\n                      </p>\n                    )}\n                  </>\n                )}\n              </Dropzone>\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">Location of the project?</p>\n              <SelectMap\n                id=\"mapClicked\"\n                name=\"mapClicked\"\n                className=\"selectMap\"\n                callBack={(location) => {\n                  setLocation(location);\n                  formik.setFieldValue(\"mapClicked\", true);\n                }}\n              />\n              {!formik.values.mapClicked && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  *Must select a location on the map{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <div className=\"formGroupCheckBox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"agreedToTerms\"\n                  id=\"formCheckbox\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.agreedToTerms}\n                />\n                <p className=\"agreedTo\">\n                  {\" \"}\n                  Agreed to{\" \"}\n                  <Link to=\"/termsandconditions\" target=\"_blank\">\n                    {\" \"}\n                    Terms & Conditions{\" \"}\n                  </Link>\n                </p>\n              </div>\n              {formik.errors.agreedToTerms && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.agreedToTerms}{\" \"}\n                </p>\n              )}\n            </div>\n\n            {/* <Form.Group controlId=\"formBasicAgreed\">\n              <Field\n                component={Checkbox}\n                name=\"agreedToTerms\"\n                id=\"agreedToTerms\"\n                label={<p className=\"agreedTo\"> Agreed to <Link to=\"/termsandconditions\" target=\"_blank\" > Terms & Conditions </Link></p>}\n                isValid={touched.agreedToTerms && !errors.agreedToTerms}\n                isInvalid={errors.agreedToTerms}\n              />\n            </Form.Group> */}\n\n            <div className=\"formButtons\">\n              <button\n                className=\"standardButtonWithoutColour mcGreenBG\"\n                type=\"submit\"\n                disabled={loading}\n                style={{ marginRight: \"8px\" }}\n              >\n                {loading ? (\n                  <Spinner\n                    animation=\"grow\"\n                    size=\"sm\"\n                    style={{ marginRight: \"8px\" }}\n                  />\n                ) : null}\n                {loading ? \"Creating Project\" : \"Create Project\"}\n              </button>\n              <button\n                type=\"button\"\n                className=\"standardButton redVersion\"\n                onClick={formik.resetForm}\n                disabled={loading}\n              >\n                Reset\n              </button>\n            </div>\n\n            {hasErrors && (\n              <>\n                <br />\n                <p className=\"redError\">\n                  {\" \"}\n                  An error has occured please try again later or email support.\n                </p>\n              </>\n            )}\n\n            <p className=\"text-muted\">\n              Note: Once we have verified your project will it become visible on\n              the page.\n            </p>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst MapStateToProps = (state, ownProps) => ({\n  auth: state.auth.auth,\n  orgID: ownProps.match.params.orgID,\n  history: ownProps.history,\n  loading: state.projectInfo.createProject.loading,\n  hasErrors: state.projectInfo.createProject.hasErrors,\n  success: state.projectInfo.createProject.success,\n});\n\nexport default connect(MapStateToProps)(CreateProject);\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/emailVerification.component.js",["1031"],"import React, { useEffect, useState, Fragment } from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport { useParams } from 'react-router-dom'\nimport axios from 'axios';\nimport '../../css/misc.css'\nimport { API, rootURL, production } from '../../config'\n\n\nconst EmailVerification = (props) => {\n  const [requested, setRequested] = useState(false)\n  const [verified, setVerified] = useState(false)\n  const [hasErrors, setErrors] = useState(false)\n  let { token } = useParams();\n\n  useEffect(() => {\n    if (!requested) {\n      setRequested(true)\n      axios({\n        url: rootURL(production)+API+'/emailVerification/verify',\n        method: 'post',\n        headers: { 'Content-Type': 'application/json', 'x-access-token': token}\n      })\n      .then((res) => setVerified(true))\n      .catch((error) => {\n        // console.log(error.response)\n      })\n    }\n  }, [requested, token])\n\n  if (hasErrors) {\n    return (\n      <h4 className=\"title\"> There was an error verifying your email. Please contact support info@ministryofchange.org </h4>\n    )\n  }\n\n  if (verified) {\n    return (\n      <h2 className=\"title\"> You have succesfully verified your email. </h2>\n    )\n  } else {\n      return (\n        <Fragment>\n          <div className=\"spinner-middle\">\n          <Spinner animation=\"border\" role=\"status\" size=\"lg\">\n          <span className=\"sr-only\">Loading...</span>\n          </Spinner>\n          </div>\n        </Fragment>\n      )\n  }\n}\n\nexport default EmailVerification;","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/createEvent.component.js",["1032","1033","1034"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { Row, Card, Form, Spinner } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport { Formik, Field, setFieldValue } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Checkbox } from \"../utilities/Checkboxs.component\";\nimport {\n  creatingNewEvent,\n  creatingEventRedirect,\n  creatingEventReset,\n} from \"../../Actions/createEventActions\";\nimport {\n  baseStyle,\n  acceptStyle,\n  activeStyle,\n  rejectStyle,\n} from \"../utilities/dropzoneStyles\";\nimport SelectMap from \"./selectMap.component\";\nimport Dropzone, { useDropzone } from \"react-dropzone\";\nimport Thumb from \"../utilities/thumb.component\";\n\nimport \"../../css/form.css\";\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required(\"*Event name is required\")\n    .min(1, \"*Event name must be longer than 1 charachter\")\n    .max(50, \"*Event name must be less than 50 charachters\")\n    .matches(\n      /^[a-zA-Z0-9_ ]*$/,\n      \"*Event name must only contain letters or numbers\"\n    ),\n  description: Yup.string()\n    .required(\"*Description is required\")\n    .min(1, \"*Description must be longer than 1 charachter\")\n    .max(1000, \"*Description must be less than 1000 charachters\"),\n  numOfItems: Yup.number()\n    .required(\"*Number of items is required\")\n    .typeError(\"*Provided number must be an integer\")\n    .min(1, \"*You cannot have less than 1 item...\")\n    .max(\n      10000,\n      \"*You cannot have more than 10000 items... If you do please message info@ministryofchange.org to get this added\"\n    ),\n  descriptionOfItems: Yup.string()\n    .required(\"*Description of items is required\")\n    .min(1, \"*Description must be longer than 1 charachter\")\n    .max(1000, \"*Description  must be less than 1000 charachters\"),\n  // location: Yup.array(Yup.number())\n  // .required(\"*Must add a location\"),\n  // typeOfEvent: Yup.string()\n  // .required(\"*Type of rations distributed is required\")\n  // .min(1, \"*Must be longer than 1 charachter\")\n  // .max(100, \"*Must be less than 1000 charachters\"),\n  agreedToTerms: Yup.bool().oneOf([true], \"*Must accept terms and conditions\"),\n  mapClicked: Yup.bool().oneOf([true], \"*Must select a location\"),\n});\n\nconst CreateEvent = ({\n  dispatch,\n  loading,\n  hasErrors,\n  success,\n  auth,\n  orgID,\n  props,\n}) => {\n  const [location, setLocation] = useState([]);\n  const [imageFiles, setImageFiles] = useState([]);\n  const [rejectedFilesState, setRejectedFilesState] = useState([]);\n  const { isDragActive, isDragAccept, isDragReject } = useDropzone({\n    accept: \"image/jpeg, image/png, image/jpg, image/gif\",\n    maxSize: 2000000,\n  });\n\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {}),\n    }),\n    [isDragActive, isDragReject]\n  );\n\n  useEffect(() => {\n    if (success) {\n      dispatch(creatingEventReset());\n      dispatch(creatingEventRedirect());\n      props.history.push(\"/dashboard\");\n    }\n  }, [success]);\n\n  if (!orgID || !auth) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <Card bg=\"light\" text=\"dark\" className=\"oldForm\">\n      <Card.Header> Create New Distribution </Card.Header>\n\n      <Formik\n        initialValues={{\n          name: \"\",\n          description: \"\",\n          numOfItems: \"\",\n          descriptionOfItems: \"\",\n          typeOfEvent: \"clothes\",\n          images: [],\n          date: new Date(),\n          agreedToTerms: false,\n          mapClicked: false,\n        }}\n        validationSchema={validationSchema}\n        validateOnChange={false}\n        validateOnBlur={false}\n        onSubmit={(values) => {\n          const newPoint = {\n            type: \"Point\",\n            coordinates: location,\n          };\n          const newEvent = {\n            name: values.name,\n            description: values.description,\n            totalNumberOfItems: values.numOfItems,\n            itemsDescription: values.descriptionOfItems,\n            typeOfRation: values.typeOfEvent,\n            images: values.images,\n            location: newPoint,\n            date: values.date,\n          };\n          dispatch(creatingNewEvent(newEvent, orgID));\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting,\n          setFieldValue,\n          setFieldTouched,\n          resetForm,\n        }) => (\n          <Form noValidate onSubmit={handleSubmit}>\n            <Card.Body>\n              {/* <Card.Title>  </Card.Title> */}\n              <Form.Group controlId=\"formBasicName\">\n                <Form.Label>\n                  Name of Distribution <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Enter name\"\n                  name=\"name\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.name}\n                  isValid={touched.name && !errors.name}\n                  isInvalid={errors.name}\n                />\n                <Form.Control.Feedback type=\"valid\">\n                  Looks good!\n                </Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.name}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              <Form.Group controlId=\"formBasicDescription\">\n                <Form.Label>\n                  Description of Distribution <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"3\"\n                  placeholder=\"Enter description\"\n                  name=\"description\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.description}\n                  isValid={touched.description && !errors.description}\n                  isInvalid={errors.description}\n                />\n                <Form.Control.Feedback type=\"valid\">\n                  Looks good!\n                </Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.description}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              <Form.Group controlId=\"formBasicNumberOfItems\">\n                <Form.Label>\n                  Total Quantity of Distribution <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Enter number of items\"\n                  name=\"numOfItems\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.numOfItems}\n                  isValid={touched.numOfItems && !errors.numOfItems}\n                  isInvalid={errors.numOfItems}\n                />\n                <Form.Control.Feedback type=\"valid\">\n                  Looks good!\n                </Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.numOfItems}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              <Form.Group controlId=\"formBasicDescriptionOfItems\">\n                <Form.Label>\n                  Contents of Distribution e.g. (Rations){\" \"}\n                  <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"3\"\n                  placeholder=\"Enter description of items\"\n                  name=\"descriptionOfItems\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.descriptionOfItems}\n                  isValid={\n                    touched.descriptionOfItems && !errors.descriptionOfItems\n                  }\n                  isInvalid={errors.descriptionOfItems}\n                />\n                <Form.Control.Feedback type=\"valid\">\n                  Looks good!\n                </Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.descriptionOfItems}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              <Form.Group controlId=\"formTypeOfEvent\">\n                <Form.Label>\n                  Type of Distribution <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  as=\"select\"\n                  name=\"typeOfEvent\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.typeOfEvent}\n                >\n                  <option value=\"clothes\" defaultValue>\n                    Clothes\n                  </option>\n                  <option value=\"food\">Food</option>\n                  <option value=\"money\">Money</option>\n                  <option value=\"ppe\">\n                    PPE (Personal Protection Equipment)\n                  </option>\n                  {/* <option value=\"ramadan\">Ramadan</option> */}\n                  <option value=\"other\">Other</option>\n                </Form.Control>\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label>\n                  {\" \"}\n                  Images of Distribution (Under 1mb, only 3 images, files must\n                  have extension of either .jpg, .jpeg or .png){\" \"}\n                </Form.Label>\n                <Dropzone\n                  accept=\"image/jpeg, image/png, image/jpg, image/gif\"\n                  maxSize={11000000}\n                  onDropRejected={(rejectedFiles) => {\n                    console.log(\"rejected\");\n                    setRejectedFilesState(rejectedFiles);\n                  }}\n                  onDrop={(acceptedFiles, rejectedFiles) => {\n                    if (rejectedFiles.length === 0) {\n                      setRejectedFilesState([]);\n                    }\n                    setImageFiles(acceptedFiles);\n                    setFieldValue(\"images\", acceptedFiles);\n                  }}\n                >\n                  {({ getRootProps, getInputProps }) => (\n                    <>\n                      <div {...getRootProps({ style })}>\n                        <input {...getInputProps()} />\n                        <p>Drag 'n' images here, or click to select images</p>\n                        <Row>\n                          {\" \"}\n                          {imageFiles.map((file) => {\n                            return <Thumb file={file} key={file.name} />;\n                          })}{\" \"}\n                        </Row>\n                      </div>\n                      {rejectedFilesState.length === 0 ? null : (\n                        <p className=\"redError\">\n                          {\" \"}\n                          Some files were rejected. make sure they are not more\n                          than 1mb.{\" \"}\n                        </p>\n                      )}\n                    </>\n                  )}\n                  {/* <div {...getRootProps({style})}>\n            <input {...getInputProps()} />\n            <p>Drag 'n' images here, or click to select images</p>\n            <Row> {thumbFiles} </Row>\n          </div>\n          {rejectedFiles.length === 0 ? null : <p className=\"redError\"> Some files were rejected. make sure they are not more than 1mb. </p>}     */}\n                </Dropzone>\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label>\n                  {\" \"}\n                  Date of the Distribution (Can be in the future or past){\" \"}\n                  <span className=\"red\">*</span>{\" \"}\n                </Form.Label>\n                <br />\n                <DatePicker\n                  selected={values.date}\n                  onChange={(date) => {\n                    setFieldValue(\"date\", date);\n                  }}\n                  name=\"date\"\n                  className=\"datePicker\"\n                  maxDate={new Date()}\n                />\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label>\n                  {\" \"}\n                  Location of the Distribution <span className=\"red\">\n                    *\n                  </span>{\" \"}\n                </Form.Label>\n                <SelectMap\n                  id=\"mapClicked\"\n                  name=\"mapClicked\"\n                  className=\"selectMap\"\n                  callBack={(location) => {\n                    setLocation(location);\n                    setFieldValue(\"mapClicked\", true);\n                  }}\n                />\n                {!values.mapClicked && (\n                  <p className=\"input-feedback\">\n                    {\" \"}\n                    *Must select a location on the map{\" \"}\n                  </p>\n                )}\n              </Form.Group>\n\n              <Form.Group>\n                <Field\n                  component={Checkbox}\n                  name=\"agreedToTerms\"\n                  id=\"agreedToTerms\"\n                  label={\n                    <p className=\"agreedTo\">\n                      {\" \"}\n                      Agreed to{\" \"}\n                      <Link to=\"/termsandconditions\" target=\"_blank\">\n                        {\" \"}\n                        Terms & Conditions{\" \"}\n                      </Link>\n                    </p>\n                  }\n                  isValid={touched.agreedToTerms && !errors.agreedToTerms}\n                  isInvalid={errors.agreedToTerms}\n                />\n              </Form.Group>\n\n              <div className=\"formButtons\">\n                <button\n                  className=\"standardButton\"\n                  type=\"submit\"\n                  disabled={loading}\n                  style={{ marginRight: \"8px\" }}\n                >\n                  {loading ? (\n                    <Spinner\n                      animation=\"grow\"\n                      size=\"sm\"\n                      style={{ marginRight: \"8px\" }}\n                    />\n                  ) : null}\n                  {loading ? \"Creating Event\" : \"Create Event\"}\n                </button>\n                <button\n                  type=\"button\"\n                  className=\"standardButton redVersion\"\n                  onClick={resetForm}\n                  disabled={loading}\n                >\n                  Reset\n                </button>\n              </div>\n\n              {hasErrors && (\n                <>\n                  <br />\n                  <p className=\"redError\">\n                    {\" \"}\n                    An error has occured please try again later or email\n                    support.\n                  </p>\n                </>\n              )}\n\n              <Form.Text className=\"text-muted\">\n                Note: Once we have verified your information only then will you\n                be able to add distribution and become visible on the page.\n              </Form.Text>\n            </Card.Body>\n          </Form>\n        )}\n      </Formik>\n    </Card>\n  );\n};\n\nconst MapStateToProps = (state, ownProps) => ({\n  auth: state.auth.auth,\n  loading: state.createEvent.loading,\n  hasErrors: state.createEvent.hasErrors,\n  success: state.createEvent.success,\n  orgID: ownProps.match.params.orgID,\n  props: ownProps,\n});\n\nexport default connect(MapStateToProps)(CreateEvent);\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/signUpOrg.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/createGroup.component.js",["1035","1036"],"import React, { useState, useMemo } from 'react'\nimport { connect } from 'react-redux'\nimport { Link, Redirect } from 'react-router-dom';\nimport { Form, Spinner, Card } from 'react-bootstrap';\nimport { Formik, Field, yupToFormErrors } from 'formik';\nimport * as Yup from 'yup';\nimport Dropzone, { useDropzone } from 'react-dropzone';\n\nimport CheckboxGroup, { Checkbox } from '../utilities/Checkboxs.component';\nimport Thumb from '../utilities/thumb.component';\nimport { baseStyle, acceptStyle, activeStyle, rejectStyle } from '../utilities/dropzoneStyles';\nimport { createGroup, resettingCreateGroup } from '../../Actions/groupActions';\n\n\nconst validationSchema = Yup.object().shape({\n  groupName: Yup.string()\n  .required(\"*Group name is required\")\n  .min(1, \"*Event name must be longer than 1 charachter\")\n  .max(30, \"*Event name must be less than 30 charachters\")\n  .matches(/^[a-zA-Z0-9_ ]*$/, \"*Event name must only contain letters or numbers\"),\n  groupDescription: Yup.string()\n  .required(\"*Group description is required\")\n  .min(1, \"*Group description must be longer than 1 charachter\")\n  .max(600, \"*Group description must be less than 600 charachters\"),\n  groupWhatsappLink: Yup.string()\n  .when('privateGroup', {\n    is: false,\n    then: Yup.string().required(\"*Whatsapp link is required\")\n  })\n  .url(\"*Please enter a valid whatsapp URL e.g. https://chat.whatsapp.com/HJa67a34sdGr2rYR\"),\n  groupAdmin: Yup.string()\n  .required(\"*Admin name is required\")\n  .min(1, \"*Admin name must be longer than 1 charachter\")\n  .max(100, \"*Admin name must be less than 100 charachters\"),\n  groupAdminContact: Yup.string()\n  .required(\"*Admin Whatsapp number is required\")\n  .min(1, \"*Admin Whatsapp number must be longer than 1 charachter\")\n  .max(20, \"*Admin Whatsapp number must be less than 20 charachters\"),\n  affiliatedOrg: Yup.array()\n  .max(1, \"*Can only be affilated with one organisation\"),\n  agreedToTerms: Yup.bool()\n  .oneOf([true], \"*Must accept terms and conditions\"),\n});\n\nconst CreateGroup = ({ dispatch, auth, loading, hasErrors, success, props, orgs, userInfoFetched }) => {\n  const [imageNumberError, setImageNumberError] = useState(false)\n  const [rejectedFilesState, setRejectedFilesState] = useState([])\n  const {\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    accept: 'image/jpeg, image/png, image/jpg, image/gif',\n    maxSize: 2000000,\n  });\n\n  const style = useMemo(() => ({\n    ...baseStyle,\n    ...(isDragActive ? activeStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [\n    isDragActive,\n    isDragReject\n  ]);\n\n  if (!auth || !userInfoFetched) return <Redirect push to=\"/dashboard\" />\n  if (success) {\n    dispatch(resettingCreateGroup())\n    return <Redirect push to=\"/dashboard\" />\n  } \n\n  return (\n    <Card bg=\"light\" text=\"dark\" className=\"oldForm\">\n      <Card.Header> Create Group </Card.Header>\n\n      <Formik\n        initialValues={{\n          groupName: \"\",\n          groupImage: \"\",\n          groupDescription: \"\",\n          groupWhatsappLink: \"\",\n          groupAdmin: \"\",\n          groupAdminContact: \"\",\n          groupType: [],\n          affiliatedOrg: [],\n          privateGroup: true,\n          agreedToTerms: false,\n        }}\n        validationSchema={validationSchema}\n        validateOnChange={false}\n        validateOnBlur={false}\n        onSubmit={(values) => {\n          const group = {\n            groupName: values.groupName,\n            image: values.groupImage,\n            groupDescription: values.groupDescription,\n            groupType: values.groupType,\n            groupAdmin: values.groupAdmin,\n            groupAdminContact: values.groupAdminContact,\n            groupWhatsappLink: values.groupWhatsappLink,\n            affiliatedOrg: values.affiliatedOrg ? values.affiliatedOrg[0] : null,\n            privateGroup: values.privateGroup\n          }\n          dispatch(createGroup(group))\n          // alert(JSON.stringify(group))\n        }}\n      >\n      {({values,\n        errors,\n        touched,\n        handleChange,\n        handleBlur,\n        handleSubmit,\n        isSubmitting,\n        setFieldValue,\n        setFieldTouched, }) => (\n      <Form noValidate onSubmit={handleSubmit}>\n        <Card.Body>\n        {/* <Card.Title>  </Card.Title> */}\n        <Form.Group controlId=\"formBasicName\">\n          <Form.Label> Group Name <span className=\"red\">*</span></Form.Label>\n          <Form.Control\n            type=\"text\" \n            placeholder=\"Enter group name\"\n            name=\"groupName\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.groupName}\n            isValid={touched.groupName && !errors.groupName}\n            isInvalid={errors.groupName}\n          />\n          <Form.Control.Feedback type=\"valid\">Looks good!</Form.Control.Feedback>\n          <Form.Control.Feedback type=\"invalid\">{errors.groupName}</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicDescription\">\n          <Form.Label> Group Description <span className=\"red\">*</span></Form.Label>\n          <Form.Control\n            as=\"textarea\"\n            rows=\"3\"\n            placeholder=\"Enter group description\"\n            name=\"groupDescription\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.groupDescription}\n            isValid={touched.groupDescription && !errors.groupDescription}\n            isInvalid={errors.groupDescription}\n          />\n          <Form.Control.Feedback type=\"valid\">Looks good!</Form.Control.Feedback>\n          <Form.Control.Feedback type=\"invalid\">{errors.groupDescription}</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label> Group image (Under 1mb, file must have extension of either .jpg, .jpeg or .png) </Form.Label>\n          <Dropzone \n            accept = 'image/jpeg, image/png, image/jpg, image/gif'\n            maxSize = {11000000}\n            onDropRejected={(rejectedFiles) => {\n              console.log('rejected')\n              setRejectedFilesState(rejectedFiles)\n            }}\n            onDrop={(acceptedFiles, rejectedFiles) => {\n              if (rejectedFiles.length === 0) {\n                setRejectedFilesState([])\n              }\n              if (acceptedFiles.length > 1) {\n                setImageNumberError(true)\n              } else {\n                setImageNumberError(false)\n                setFieldValue('groupImage', acceptedFiles[0]);\n              }\n          }}>\n            {({getRootProps, getInputProps}) => (\n              <>\n              <div {...getRootProps({style})}>\n                <input {...getInputProps()} />\n                <p>Drag your image here, or click to select a image</p>\n                <div className=\"rowThumb\">\n                  { values.groupImage &&\n                      <Thumb file={values.groupImage} key={values.groupImage.name} />\n                  }\n                </div>\n              </div>\n              {rejectedFilesState.length === 0 ? null : <p className=\"redStandardError\"> Your file was rejected. Make sure they are not more than 1mb. </p>}\n              {imageNumberError ? <p className=\"redStandardError\"> Only 1 image is allowed. </p> : null}\n              </>\n          )}\n          </Dropzone>\n          <p className=\"redStandardError\"> {errors.imageFile} </p>\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicGroupWhatsappLink\">\n          <Form.Label>Group Whatsapp Invite Link <span className=\"red\">*</span></Form.Label>\n          <Form.Control\n            type=\"text\" \n            placeholder=\"Enter whatsapp invite link\"\n            name=\"groupWhatsappLink\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.groupWhatsappLink}\n            isValid={touched.groupWhatsappLink && !errors.groupWhatsappLink}\n            isInvalid={errors.groupWhatsappLink}\n          />\n          <Form.Control.Feedback type=\"valid\">Looks good!</Form.Control.Feedback>\n          <Form.Control.Feedback type=\"invalid\">{errors.groupWhatsappLink}</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicAdminName\">\n          <Form.Label>Group Admin Name <span className=\"red\">*</span></Form.Label>\n          <Form.Control\n            type=\"text\" \n            placeholder=\"Enter admin name\"\n            name=\"groupAdmin\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.groupAdmin}\n            isValid={touched.groupAdmin && !errors.groupAdmin}\n            isInvalid={errors.groupAdmin}\n          />\n          <Form.Control.Feedback type=\"valid\">Looks good!</Form.Control.Feedback>\n          <Form.Control.Feedback type=\"invalid\">{errors.groupAdmin}</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group controlId=\"formBasicGroupAdminContact\">\n          <Form.Label>Group Admin Whatsapp Number <span className=\"red\">*</span></Form.Label>\n          <Form.Control\n            type=\"text\" \n            placeholder=\"Enter admin whatsapp number\"\n            name=\"groupAdminContact\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.groupAdminContact}\n            isValid={touched.groupAdminContact && !errors.groupAdminContact}\n            isInvalid={errors.groupAdminContact}\n          />\n          <Form.Control.Feedback type=\"valid\">Looks good!</Form.Control.Feedback>\n          <Form.Control.Feedback type=\"invalid\">{errors.groupAdminContact}</Form.Control.Feedback>\n        </Form.Group>\n\n        <Form.Group>\n          <Form.Label> Category </Form.Label>\n          <CheckboxGroup\n            id=\"groupType\"\n            value={values.groupType}\n            error={errors.groupType}\n            touched={touched.groupType}\n            onChange={setFieldValue}\n            onBlur={setFieldTouched}\n          >\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"animalWelfare\"\n              label=\"Animal Welfare\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"artsAndCulture\"\n              label=\"Arts and Culture\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"clothing\"\n              label=\"Clothing\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"communityDevelopment\"\n              label=\"Community Development\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"disability\"\n              label=\"Disability\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"disaster\"\n              label=\"Disaster\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"education\"\n              label=\"Education\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"primary\"\n              label=\" - Primary\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"secondary\"\n              label=\" - Secondary\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"higher\"\n              label=\" - Higher\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"energy\"\n              label=\"Energy\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"environment\"\n              label=\"Environment\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"forest\"\n              label=\" - Forest\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"water\"\n              label=\" - Water\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"equality\"\n              label=\"Equality\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"food\"\n              label=\"Food\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"agriculture\"\n              label=\" - Agriculture\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"areaOfWork\"\n              id=\"livestock\"\n              label=\" - Livestock\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"fisheries\"\n              label=\" - Fisheries\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"gender\"\n              label=\"Gender\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"health\"\n              label=\"Health\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"motherAndChildHealth\"\n              label=\" - Mother and Child Health\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"humanRights\"\n              label=\"Human Rights\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"infrastructure\"\n              label=\"Infrastructure\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"it\"\n              label=\"IT\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"justice\"\n              label=\"Justice\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"livelihood\"\n              label=\"Livelihood\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"money\"\n              label=\"Money\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"peace\"\n              label=\"Peace\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"ppe\"\n              label=\"Protection Equipment\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"povertyAlleviation\"\n              label=\"Poverty Alleviation\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"recycling\"\n              label=\"Recycling\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"sanitation\"\n              label=\"Sanitation\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"sports\"\n              label=\"Sports\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"terrorism\"\n              label=\"Terrorism\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"virus\"\n              label=\"Virus\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"waste\"\n              label=\"Waste\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"youth\"\n              label=\"Youth\"\n            />\n            <Field\n              component={Checkbox}\n              name=\"groupType\"\n              id=\"other\"\n              label=\"Other\"\n            />\n          </CheckboxGroup>\n        </Form.Group>\n\n        {orgs &&\n          <Form.Group>\n          <Form.Label> Affiliated Organisation </Form.Label>\n          <Form.Text> Is your group affilated with one of your organisations? </Form.Text>\n            <CheckboxGroup\n              id=\"affiliatedOrg\"\n              value={values.affiliatedOrg}\n              error={errors.affiliatedOrg}\n              touched={touched.affiliatedOrg}\n              onChange={setFieldValue}\n              onBlur={setFieldTouched}\n            >\n              {\n                orgs.map((org) => {\n                  return (\n                    <Field\n                      key={org._id}\n                      component={Checkbox}\n                      name=\"affilatedOrg\"\n                      id={org._id}\n                      label={org.name}\n                    />\n                  )\n                })\n              }\n            </CheckboxGroup>\n          </Form.Group>\n        }\n\n        <Form.Group>\n          <Field\n            component={Checkbox}\n            name=\"privateGroup\"\n            id=\"privateGroup\"\n            label={<p className=\"agreedTo\"> Is this a private Group? (Invite link is hidden) </p>}\n            isValid={touched.privateGroup && !errors.privateGroup}\n            isInvalid={errors.privateGroup}\n          />\n        </Form.Group>\n\n        <Form.Group>\n          <Field\n            component={Checkbox}\n            name=\"agreedToTerms\"\n            id=\"agreedToTerms\"\n            label={<p className=\"agreedTo\"> Agreed to <Link to=\"/termsandconditions\" target=\"_blank\" > Terms & Conditions </Link></p>}\n            isValid={touched.agreedToTerms && !errors.agreedToTerms}\n            isInvalid={errors.agreedToTerms}\n          />\n        </Form.Group>\n\n        <div className=\"formButtons\">\n          <button className=\"standardButton\" type=\"submit\" disabled={loading}>\n            {\n              loading ? \n              <Spinner animation=\"grow\" size=\"sm\" style={{ marginRight: '8px' }} /> \n              :\n              null\n            }\n            {loading ? 'Creating Group' : 'Create Group'}\n          </button>\n\n          <button className=\"standardButton redVersion\" style={{marginLeft: \"8px\"}} onClick={() => {\n            props.history.goBack()\n          }} disabled={loading}>\n            Cancel\n          </button>\n        </div>\n\n        {hasErrors &&\n          <>\n            <br />\n            <p className=\"redError\"> An error has occured please try again later or email support.</p>\n          </>\n        }\n\n        <Form.Text className=\"text-muted\">\n          Note: Once we have verified your group only then will it become visible on the page.\n        </Form.Text>\n\n        </Card.Body>\n      </Form>\n      )}\n      </Formik>\n    </Card>\n  )\n}\n\nconst MapStateToProps = (state, ownProps) => ({\n  auth: state.auth.auth,\n  loading: state.groupInfo.createGroup.loading,\n  hasErrors: state.groupInfo.createGroup.hasErrors,\n  success: state.groupInfo.createGroup.success,\n  orgs: state.userInfo.user.createdOrganisations,\n  userInfoFetched: state.userInfo.fetched,\n  props: ownProps\n})\n\nexport default connect(MapStateToProps)(CreateGroup)","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/mainProjectView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/mainSelectedProjectView.component.js",["1037"],"import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport LoadingSpinner from '../utilities/loadingSpinner.component';\nimport SelectedProjectImageView from './selectedProjectImageView.component';\nimport SelectedProjectCallToAction from './callToAction/selectedProjectCallToAction.component';\nimport SelectedProjectInfoTabs from './selectedProjectInfoTabs.component';\nimport SelectedProjectCategories from './selectedProjectCategories.component'\nimport SelectedProjectSponsors from './selectedProjectSponsor.component';\n\nimport { getProject } from '../../Actions/projectActions';\n\nconst MainSelectedProjectView = ({ dispatch, selectedProject, props, loading, hasErrors, fetched }) => {\n  const { id } = useParams();\n  const [activeTab, setActiveTab] = useState(0)\n\n  useEffect(() => {\n    dispatch(getProject(id))\n  }, [])\n\n  if (loading) {\n    return <LoadingSpinner />\n  }\n\n  if (hasErrors) return <p> Error Occurred </p>\n\n  if (fetched && selectedProject !== null) {\n    return (\n      <div className=\"mainSelectedProjectViewContainer\">\n        <div className=\"mainSelectedProjectView\">\n          <div className=\"mainSelectedProjectsViewTitle\">\n            <h1> {selectedProject.name} </h1>\n            <p> {selectedProject.tagline} </p>\n          </div>\n          <div className=\"mainSelectedProjectsViewImages mainSelectedProjectCards\">\n            <SelectedProjectImageView project={selectedProject} />\n          </div>\n          <div className=\"mainSelectedProjectsViewCallToAction mainSelectedProjectCards\">\n            <SelectedProjectCallToAction project={selectedProject} setActiveTab={setActiveTab} />\n          </div>\n          <div className=\"mainSelectedProjectsViewCategories mainSelectedProjectCards\">\n            <SelectedProjectCategories project={selectedProject} />\n          </div>\n          <SelectedProjectSponsors project={selectedProject} />\n          <div className=\"mainSelectedProjectsViewInfo mainSelectedProjectCards\">\n            <SelectedProjectInfoTabs project={selectedProject} activeTab={activeTab} setActiveTab={setActiveTab} />\n          </div>\n        </div>\n      </div>\n    )\n  }\n\n  return <LoadingSpinner />\n}\n\n\nconst MapStateToProps = (state, ownProps) => ({\n  loading: state.projectInfo.mainProject.loading,\n  hasErrors: state.projectInfo.mainProject.hasErrors,\n  fetched: state.projectInfo.mainProject.fetched,\n  selectedProject: state.projectInfo.mainProject.selectedProject,\n  props: ownProps\n})\n\nexport default connect(MapStateToProps)(MainSelectedProjectView)","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/signupUser.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/update/updateProfile.component.js",["1038"],"import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Redirect } from \"react-router-dom\";\nimport { Card, Col, Form, Spinner } from \"react-bootstrap\";\nimport { updateUser, updatingUserRedirect } from \"../../Actions/updateActions\";\n\nconst validationSchema = Yup.object().shape({\n  username: Yup.string()\n    .required(\"*Username is required\")\n    .min(5, \"*Username must be longer than 5 charachters\")\n    .max(20, \"*Username must be less than 20 charachters\")\n    .matches(/^[a-zA-Z0-9_ ]*$/, \"*Username must be only letters or numbers\"),\n  mobile: Yup.string()\n    .required(\"*Number is required\")\n    .min(7, \"*Number must be longer than 7 charachters\")\n    .max(14, \"*Number must be less than 14 charachters\"),\n  // .matches(/^(?:(([+]|00)92)|0)((3[0-6][0-9]))(\\d{7})$/, \"*This is not a valid Pakistani mobile numbers\"),\n  cnic: Yup.string().matches(\n    /^(\\d{13})?$|[0-9]{12}-[0-9]{1}$|[0-9]{5}-[0-9]{7}-[0-9]{1}$|[0-9]{6}-[0-9]{6}-[0-9]{1}$/,\n    \"*This is not a valid CNIC, make sure it is in this format: 1234567891234 or 12345-1234567-1 or 123456-123456-1\"\n  ),\n  addressLine1: Yup.string()\n    .min(1, \"*Address Line 1 must be longer than 1 charachter\")\n    .max(50, \"*Adderss Line 1 must be less than 50 charachters\"),\n  city: Yup.string()\n    .required(\"*City is required\")\n    .min(1, \"*City name must be longer than 1 charachter\")\n    .max(50, \"*City name must be less than 50 charachters\"),\n  region: Yup.string()\n    .required(\"*Region is required\")\n    .min(1, \"*Region name must be longer than 1 charachter\")\n    .max(50, \"*Region name must be less than 50 charachters\"),\n  postCode: Yup.string()\n    .min(1, \"*Post Code must be longer than 1 charachter\")\n    .max(20, \"*Post Code must be less than 20 charachters\"),\n  country: Yup.string()\n    .required(\"*Country is required\")\n    .min(1, \"*Country name must be longer than 1 charachter\")\n    .max(60, \"*Country name must be less than 60 charachters\"),\n});\n\nconst UpdateProfile = ({\n  dispatch,\n  hasErrors,\n  loading,\n  success,\n  signUpError,\n  auth,\n  user,\n  userID,\n}) => {\n  if (!auth) {\n    return <Redirect push to=\"/dashboard\" />;\n  }\n\n  if (success) {\n    dispatch(updatingUserRedirect());\n    return <Redirect push to=\"/dashboard\" />;\n  }\n\n  return (\n    <Card bsPrefix=\"card\" bg=\"light\" text=\"dark\" className=\"signUpCard\">\n      <Card.Header>Update Profile</Card.Header>\n      <Formik\n        initialValues={{\n          username: user[userID].username,\n          mobile: user[userID].mobile,\n          cnic: user[userID].cnic,\n          line1: user[userID].address.line1,\n          city: user[userID].address.city,\n          region: user[userID].address.region,\n          postCode: user[userID].address.postCode,\n          country: user[userID].address.country,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={(values) => {\n          const data = {\n            username: values.username,\n            mobile: values.mobile,\n            cnic: values.cnic,\n            line1: values.line1,\n            city: values.city,\n            region: values.region,\n            postCode: values.postCode,\n            country: values.country,\n          };\n          dispatch(updateUser(data));\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          resetForm,\n        }) => (\n          <Form noValidate onSubmit={handleSubmit}>\n            <Card.Body>\n              <Form.Text className=\"text-muted\">\n                required fields <span className=\"red\"> *</span>\n              </Form.Text>\n\n              <Form.Group controlId=\"formUsername\">\n                <Form.Label>\n                  Username <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  name=\"username\"\n                  type=\"text\"\n                  placeholder=\"Enter username\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.username}\n                  isValid={touched.username && !errors.username}\n                  isInvalid={errors.username}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.username}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              <Form.Group controlId=\"formMobile\">\n                <Form.Label>\n                  Mobile <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  name=\"mobile\"\n                  type=\"tel\"\n                  placeholder=\"Mobile no.\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.mobile}\n                  isValid={touched.mobile && !errors.mobile}\n                  isInvalid={errors.mobile}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.mobile}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              <Form.Group controlId=\"formCnic\">\n                <Form.Label>CNIC</Form.Label>\n                <Form.Control\n                  name=\"cnic\"\n                  type=\"tel\"\n                  placeholder=\"CNIC no.\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.cnic}\n                  isValid={touched.cnic && !errors.cnic}\n                  isInvalid={errors.cnic}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.cnic}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              <Card.Subtitle\n                className=\"mb-2 text-muted\"\n                style={{ marginTop: \"24px\" }}\n              >\n                {\" \"}\n                Address{\" \"}\n              </Card.Subtitle>\n\n              <Form.Group controlId=\"formAddressLine1\">\n                <Form.Label>Address Line 1</Form.Label>\n                <Form.Control\n                  name=\"line1\"\n                  type=\"text\"\n                  placeholder=\"Address Line 1\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.line1}\n                  isValid={touched.line1 && !errors.line1}\n                  isInvalid={errors.line1}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.line1}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              <Form.Group controlId=\"formCity\">\n                <Form.Label>\n                  City <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  name=\"city\"\n                  type=\"text\"\n                  placeholder=\"City\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.city}\n                  isValid={touched.city && !errors.city}\n                  isInvalid={errors.city}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.city}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              <Form.Row>\n                <Form.Group as={Col} controlId=\"formRegion\">\n                  <Form.Label>\n                    Province / Region <span className=\"red\">*</span>\n                  </Form.Label>\n                  <Form.Control\n                    name=\"region\"\n                    type=\"text\"\n                    placeholder=\"Province / Region\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.region}\n                    isValid={touched.region && !errors.region}\n                    isInvalid={errors.region}\n                  />\n                  <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.region}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formPostCode\">\n                  <Form.Label>Post Code / Zip Code</Form.Label>\n                  <Form.Control\n                    name=\"postCode\"\n                    type=\"text\"\n                    placeholder=\"Post Code / Zip Code\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.postCode}\n                    isValid={touched.postCode && !errors.postCode}\n                    isInvalid={errors.postCode}\n                  />\n                  <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.postCode}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formCountry\">\n                  <Form.Label>\n                    Country <span className=\"red\">*</span>\n                  </Form.Label>\n                  <Form.Control\n                    name=\"country\"\n                    type=\"text\"\n                    placeholder=\"Country\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.country}\n                    isValid={touched.country && !errors.country}\n                    isInvalid={errors.country}\n                  />\n                  <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.country}\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Form.Row>\n\n              <div className=\"formButtons\">\n                <button\n                  className=\"standardButton signUpButton\"\n                  type=\"submit\"\n                  disabled={loading}\n                >\n                  {loading ? (\n                    <Spinner\n                      animation=\"grow\"\n                      size=\"sm\"\n                      style={{ marginRight: \"8px\" }}\n                    />\n                  ) : null}\n                  {loading ? \"Updating\" : \"Update\"}\n                </button>\n\n                <button\n                  type=\"button\"\n                  className=\"standardButton redVersion\"\n                  onClick={resetForm}\n                  disabled={loading}\n                >\n                  Reset\n                </button>\n              </div>\n\n              {hasErrors && <ErrorComponent signUpError={signUpError} />}\n\n              <Form.Text className=\"text-muted\">\n                Note: Only once we have verified your information will you be\n                able to add charity drives and appear on the page.\n              </Form.Text>\n            </Card.Body>\n          </Form>\n        )}\n      </Formik>\n    </Card>\n  );\n};\n\nconst ErrorComponent = (props) => {\n  return (\n    <>\n      <br />\n      <p className=\"redError\">\n        {\" \"}\n        An error has occured please try again later or email support.\n      </p>\n    </>\n  );\n};\n\nconst MapStateToProps = (state) => ({\n  loading: state.updateInfo.loading,\n  hasErrors: state.updateInfo.hasErrors,\n  success: state.updateInfo.success,\n  auth: state.auth.auth,\n  user: state.userInfo.user,\n  userID: state.userInfo.userID,\n});\n\nexport default connect(MapStateToProps)(UpdateProfile);\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/mainVolunteerView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/update/updateOrganisation.component.js",["1039","1040","1041"],"import React, { useState, useMemo } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Redirect, Link, useParams } from \"react-router-dom\";\nimport { Card, Col, Form, Spinner } from \"react-bootstrap\";\nimport { updateOrg, updatingOrgRedirect } from \"../../Actions/updateActions\";\nimport CheckboxGroup, { Checkbox } from \"../utilities/Checkboxs.component\";\nimport {\n  activeStyle,\n  rejectStyle,\n  baseStyle,\n  acceptStyle,\n} from \"../utilities/dropzoneStyles\";\nimport Dropzone, { useDropzone } from \"react-dropzone\";\nimport Thumb from \"../utilities/thumb.component\";\n\nconst FILE_SIZE = 1100000;\nconst SUPPORTED_FORMATS = [\"image/jpg\", \"image/jpeg\", \"image/gif\", \"image/png\"];\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required(\"*Organisation name is required\")\n    .min(1, \"*Organisation name must be longer than 1 charachter\")\n    .max(50, \"*Organisation name must be less than 50 charachters\")\n    .matches(\n      /^[a-zA-Z0-9_ ]*$/,\n      \"*Organisation name must only contain letters or numbers\"\n    ),\n  bankName: Yup.string()\n    .min(1, \"*Bank name must be longer than 1 charachter\")\n    .max(50, \"*Bank name must be less than 50 charachter\")\n    .matches(\n      /^[a-zA-Z0-9_ ]*$/,\n      \"*Bank name must only contain letters or numbers\"\n    ),\n  bankBranch: Yup.string()\n    .min(1, \"*Bank branch must be longer than 1 charachter\")\n    .max(50, \"*Bank branch must be less than 50 charachter\"),\n  accountTitle: Yup.string()\n    .min(1, \"*Account title must be longer than 1 charachter\")\n    .max(50, \"*Account title must be less than 50 charachter\"),\n  accountNumber: Yup.string()\n    .min(1, \"*Account Number must be longer than 1 charachter\")\n    .max(50, \"*Account Number must be less than 50 charachter\")\n    .matches(/^[0-9_]*$/, \"*Account number must only contain numbers\"),\n  IBAN: Yup.string()\n    .min(1, \"*IBAN number must be longer than 1 charachter\")\n    .max(50, \"*IBAN number must be less than 50 charachter\"),\n  swiftCode: Yup.string()\n    .min(1, \"*Swift code must be longer than 1 charachter\")\n    .max(50, \"*Swift code must be less than 50 charachter\"),\n  easyPaisa: Yup.string()\n    // .min(10, \"*Easypaisa number must be longer than 1 charachter\")\n    // .max(11, \"*Easypaisa number must be less than 50 charachter\")\n    .matches(\n      /^(?:(([+]|00)92)|0)((3[0-6][0-9]))(\\d{7})$/,\n      \"Easypaisa number must be a valid mobile number\"\n    ),\n  jazzCash: Yup.string()\n    // .min(1, \"*Jazzcash number must be longer than 1 charachter\")\n    // .max(50, \"*Jazzcash number must be less than 50 charachter\")\n    .matches(\n      /^(?:(([+]|00)92)|0)((3[0-6][0-9]))(\\d{7})$/,\n      \"Jazzcash number must be a valid mobile number\"\n    ),\n  description: Yup.string()\n    .required(\"*Description is required\")\n    .min(1, \"*Description name must be longer than 1 charachter\")\n    .max(2000, \"*Description name must be less than 1000 charachters\"),\n  addressLine1: Yup.string()\n    .min(1, \"*Address Line 1 must be longer than 1 charachter\")\n    .max(50, \"*Adderss Line 1 must be less than 50 charachters\"),\n  city: Yup.string()\n    .required(\"*City is required\")\n    .min(1, \"*City name must be longer than 1 charachter\")\n    .max(50, \"*City name must be less than 50 charachters\"),\n  region: Yup.string()\n    .required(\"*Region is required\")\n    .min(1, \"*Region name must be longer than 1 charachter\")\n    .max(50, \"*Region name must be less than 50 charachters\"),\n  postCode: Yup.string()\n    .min(1, \"*Post Code must be longer than 1 charachter\")\n    .max(20, \"*Post Code must be less than 20 charachters\"),\n  country: Yup.string()\n    .required(\"*Country is required\")\n    .min(1, \"*Country name must be longer than 1 charachter\")\n    .max(60, \"*Country name must be less than 60 charachters\"),\n  contactName: Yup.string()\n    .required(\"*Contact name is required\")\n    .min(1, \"*Contact name must be longer than 1 charachter\")\n    .max(50, \"*Contact name must be longer than 50 charachters\"),\n  contactNumber: Yup.string()\n    .required(\"*Number is required\")\n    .min(7, \"*Number must be longer than 7 charachters\")\n    .max(14, \"*Number must be less than 14 charachters\"),\n  // .matches(/^(?:(([+]|00)92)|0)((3[0-6][0-9]))(\\d{7})$/, \"*Only valid Pakistani mobile numbers\"),\n  contactInfo: Yup.string()\n    .min(1, \"*Contact info must be longer than 10 charachters\")\n    .max(100, \"*Contact info must be less than 100 charachters\"),\n  websiteURL: Yup.string().url(\n    \"*Please enter a valid URL e.g. http://www.google.com\"\n  ),\n  facebookURL: Yup.string().url(\n    \"*Please enter a valid URL e.g. http://www.google.com\"\n  ),\n  instagramURL: Yup.string().url(\n    \"*Please enter a valid URL e.g. http://www.google.com\"\n  ),\n  twitterURL: Yup.string().url(\n    \"*Please enter a valid URL e.g. http://www.google.com\"\n  ),\n  agreedToTerms: Yup.bool().oneOf([true], \"*Must accept terms and conditions\"),\n});\n\nconst UpdateSupplier = ({\n  dispatch,\n  orgsDict,\n  hasErrors,\n  loading,\n  success,\n  auth,\n  signUpError,\n}) => {\n  const [newImage, setNewImage] = useState(false);\n  const [rejectedFilesState, setRejectedFilesState] = useState([]);\n  const [imageNumberError, setImageNumberError] = useState(\"\");\n  const { id } = useParams();\n  const organisationToUpdate = orgsDict[id];\n\n  const { isDragActive, isDragAccept, isDragReject } = useDropzone({\n    accept: \"image/jpeg, image/png, image/jpg, image/gif\",\n    maxSize: 2000000,\n  });\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {}),\n    }),\n    [isDragActive, isDragReject]\n  );\n\n  if (success) {\n    dispatch(updatingOrgRedirect());\n  }\n\n  if (success) {\n    return <Redirect push to=\"/dashboard\" />;\n  }\n  if (!auth || !organisationToUpdate) {\n    return <Redirect push to=\"/dashboard\" />;\n  }\n\n  if (organisationToUpdate === null) {\n    return <Redirect push to=\"/dashboard\" />;\n  }\n\n  return (\n    <Card bsPrefix=\"card\" bg=\"light\" text=\"dark\" className=\"signUpCard\">\n      <Card.Header>Update Organisation Info</Card.Header>\n      <Formik\n        initialValues={{\n          name: organisationToUpdate.name,\n          imageURL: organisationToUpdate.imageURL,\n          bankName: organisationToUpdate.bankingDetails.bankName,\n          bankBranch: organisationToUpdate.bankingDetails.bankBranch,\n          accountTitle: organisationToUpdate.bankingDetails.accountTitle,\n          accountNumber: organisationToUpdate.bankingDetails.accountNumber,\n          IBAN: organisationToUpdate.bankingDetails.IBAN,\n          swiftCode: organisationToUpdate.bankingDetails.swiftCode,\n          jazzCash: organisationToUpdate.bankingDetails.jazzCash,\n          easyPaisa: organisationToUpdate.bankingDetails.easyPaisa,\n          type: organisationToUpdate.type,\n          areaOfWork: organisationToUpdate.areaOfWork,\n          description: organisationToUpdate.description,\n          addressLine1: organisationToUpdate.address.line1,\n          city: organisationToUpdate.address.city,\n          region: organisationToUpdate.address.region,\n          postCode: organisationToUpdate.address.postCode,\n          country: organisationToUpdate.address.country,\n          contactName: organisationToUpdate.contactName,\n          contactNumber: organisationToUpdate.contactNumber,\n          contactInfo: organisationToUpdate.contactInfo,\n          websiteURL: organisationToUpdate.websiteURL,\n          facebookURL: organisationToUpdate.facebookURL,\n          twitterURL: organisationToUpdate.twitterURL,\n          instagramURL: organisationToUpdate.instagramURL,\n          agreedToTerms: false,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={(values) => {\n          const updatedBankingDetails = {\n            bankName: values.bankName,\n            bankBranch: values.bankBranch,\n            accountTitle: values.accountTitle,\n            accountNumber: values.accountNumber,\n            IBAN: values.IBAN,\n            swiftCode: values.swiftCode,\n            jazzCash: values.jazzCash,\n            easyPaisa: values.easyPaisa,\n          };\n          const updatedAddress = {\n            line1: values.addressLine1,\n            city: values.city,\n            region: values.region,\n            postCode: values.postCode,\n            country: values.country,\n          };\n          const updatedSupplier = {\n            _id: organisationToUpdate._id,\n            name: values.name,\n            image: values.imageURL,\n            bankingDetails: updatedBankingDetails,\n            type: values.type,\n            areaOfWork: values.areaOfWork,\n            description: values.description,\n            address: updatedAddress,\n            contactName: values.contactName,\n            contactNumber: values.contactNumber,\n            contactInfo: values.contactInfo,\n            websiteURL: values.websiteURL,\n            facebookURL: values.facebookURL,\n            twitterURL: values.twitterURL,\n            instagramURL: values.instagramURL,\n          };\n          if (newImage) {\n            updatedSupplier.newImage = true;\n          }\n          dispatch(updateOrg(updatedSupplier));\n          // console.log(updatedSupplier.supplierImageURL)\n          // alert(JSON.stringify(updatedSupplier))\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting,\n          setFieldValue,\n          setFieldTouched,\n          resetForm,\n        }) => (\n          <Form noValidate onSubmit={handleSubmit}>\n            <Card.Body>\n              <span className=\"red\">*</span> required fields\n              <Card.Title>Organisation Info</Card.Title>\n              <Form.Group>\n                <Form.Label>\n                  {\" \"}\n                  Image of Organisation (Under 1mb, file must have extension of\n                  either .jpg, .jpeg or .png){\" \"}\n                </Form.Label>\n                <Dropzone\n                  accept=\"image/jpeg, image/png, image/jpg, image/gif\"\n                  maxSize={11000000}\n                  onDropRejected={(rejectedFiles) => {\n                    console.log(\"rejected\");\n                    setRejectedFilesState(rejectedFiles);\n                  }}\n                  onDrop={(acceptedFiles, rejectedFiles) => {\n                    if (rejectedFiles.length === 0) {\n                      setRejectedFilesState([]);\n                    }\n                    if (acceptedFiles.length > 1) {\n                      setImageNumberError(true);\n                    } else {\n                      setNewImage(true);\n                      setFieldValue(\"imageURL\", acceptedFiles[0]);\n                    }\n                  }}\n                >\n                  {({ getRootProps, getInputProps }) => (\n                    <>\n                      <div {...getRootProps({ style })}>\n                        <input {...getInputProps()} />\n                        <p>Drag 'n' images here, or click to select images</p>\n                        <div className=\"rowThumb\">\n                          {\n                            values.imageURL && (\n                              // values.supplierImageURL.map((file) => {\n                              <Thumb\n                                file={values.imageURL}\n                                key={values.imageURL.name}\n                              />\n                            )\n                            // })\n                          }\n                        </div>\n                      </div>\n                      {rejectedFilesState.length === 0 ? null : (\n                        <p className=\"redStandardError\">\n                          {\" \"}\n                          Some files were rejected. make sure they are not more\n                          than 1mb.{\" \"}\n                        </p>\n                      )}\n                      {imageNumberError ? (\n                        <p className=\"redStandardError\">\n                          {\" \"}\n                          Only 3 images are allowed.{\" \"}\n                        </p>\n                      ) : null}\n                    </>\n                  )}\n                  {/* <div {...getRootProps({style})}>\n            <input {...getInputProps()} />\n            <p>Drag 'n' images here, or click to select images</p>\n            <Row> {thumbFiles} </Row>\n          </div>\n          {rejectedFiles.length === 0 ? null : <p className=\"redError\"> Some files were rejected. make sure they are not more than 2mb. </p>}     */}\n                </Dropzone>\n                <p className=\"redStandardError\"> {errors.imageURL} </p>\n              </Form.Group>\n              <Form.Group controlId=\"formName\">\n                <Form.Label>\n                  Organisation name <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  name=\"name\"\n                  type=\"text\"\n                  placeholder=\"Enter organisation name\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.name}\n                  isValid={touched.name && !errors.name}\n                  isInvalid={errors.name}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.supplierName}\n                </Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group controlId=\"formDescription\">\n                <Form.Label>\n                  Description <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  name=\"description\"\n                  as=\"textarea\"\n                  rows=\"5\"\n                  placeholder=\"Enter only text\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.description}\n                  isValid={touched.description && !errors.description}\n                  isInvalid={errors.description}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.description}\n                </Form.Control.Feedback>\n              </Form.Group>\n              {/* <Form.Group controlId=\"formBankingDetails\">\n          <Form.Label>Your bank details for donations</Form.Label>\n          <Form.Control\n            name=\"bankingDetails\"\n            as=\"textarea\" \n            rows=\"5\" \n            placeholder=\"Enter only text\"\n            onChange={handleChange}\n            onBlur={handleBlur}\n            value={values.bankingDetails}\n            isValid={touched.bankingDetails && !errors.bankingDetails}\n            isInvalid={errors.bankingDetails}\n          />\n          <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          <Form.Control.Feedback type=\"invalid\">{errors.bankingDetails}</Form.Control.Feedback>\n        </Form.Group> */}\n              <br />\n              <hr />\n              <br />\n              <Card.Subtitle className=\"mb-2 text-muted\">\n                {\" \"}\n                Banking Details for Donation{\" \"}\n              </Card.Subtitle>\n              <Form.Row>\n                <Form.Group as={Col} controlId=\"formBankName\">\n                  <Form.Label> Bank name </Form.Label>\n                  <Form.Control\n                    name=\"bankName\"\n                    type=\"text\"\n                    placeholder=\"Enter bank name\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.bankName}\n                    isValid={touched.bankName && !errors.bankName}\n                    isInvalid={errors.bankName}\n                  />\n                  <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.bankName}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formBankBranch\">\n                  <Form.Label> Branch Code </Form.Label>\n                  <Form.Control\n                    name=\"bankBranch\"\n                    type=\"text\"\n                    placeholder=\"Enter bank branch\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.bankBranch}\n                    isValid={touched.bankBranch && !errors.bankBranch}\n                    isInvalid={errors.bankBranch}\n                  />\n                  <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.easyPaisa}\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Form.Row>\n              <Form.Row>\n                <Form.Group as={Col} controlId=\"formAccountTitle\">\n                  <Form.Label> Account title </Form.Label>\n                  <Form.Control\n                    name=\"accountTitle\"\n                    type=\"text\"\n                    placeholder=\"Enter account title\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.accountTitle}\n                    isValid={touched.accountTitle && !errors.accountTitle}\n                    isInvalid={errors.accountTitle}\n                  />\n                  <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.easyPaisa}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formAccountNumber\">\n                  <Form.Label> Account Number </Form.Label>\n                  <Form.Control\n                    name=\"accountNumber\"\n                    type=\"text\"\n                    placeholder=\"Enter account number\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.accountNumber}\n                    isValid={touched.accountNumber && !errors.accountNumber}\n                    isInvalid={errors.accountNumber}\n                  />\n                </Form.Group>\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.easyPaisa}\n                </Form.Control.Feedback>\n              </Form.Row>\n              <Form.Row>\n                <Form.Group as={Col} controlId=\"formIBAN\">\n                  <Form.Label> IBAN </Form.Label>\n                  <Form.Control\n                    name=\"IBAN\"\n                    type=\"text\"\n                    placeholder=\"Enter IBAN\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.IBAN}\n                    isValid={touched.IBAN && !errors.IBAN}\n                    isInvalid={errors.IBAN}\n                  />\n                  <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.IBAN}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formSwift\">\n                  <Form.Label> Swift Code </Form.Label>\n                  <Form.Control\n                    name=\"swiftCode\"\n                    type=\"text\"\n                    placeholder=\"Enter swift code\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.swiftCode}\n                    isValid={touched.swiftCode && !errors.swiftCode}\n                    isInvalid={errors.swiftCode}\n                  />\n                  <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.swiftCode}\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Form.Row>\n              <Form.Group controlId=\"formEasyPaisa\">\n                <Form.Label>Easypaisa number</Form.Label>\n                <Form.Control\n                  name=\"easyPaisa\"\n                  type=\"text\"\n                  placeholder=\"03XXXXXXXXX\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.easyPaisa}\n                  isValid={touched.easyPaisa && !errors.easyPaisa}\n                  isInvalid={errors.easyPaisa}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.easyPaisa}\n                </Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group controlId=\"formJazzCash\">\n                <Form.Label>Jazzcash number</Form.Label>\n                <Form.Control\n                  name=\"jazzCash\"\n                  type=\"text\"\n                  placeholder=\"03XXXXXXXXX\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.jazzCash}\n                  isValid={touched.jazzCash && !errors.jazzCash}\n                  isInvalid={errors.jazzCash}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.jazzCash}\n                </Form.Control.Feedback>\n              </Form.Group>\n              <hr />\n              <Form.Group controlId=\"formType\">\n                <Form.Label>Type of Organisation</Form.Label>\n                <Form.Control\n                  as=\"select\"\n                  name=\"type\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.type}\n                >\n                  <option>Armed Forces</option>\n                  <option>Community</option>\n                  <option>Corporate</option>\n                  <option>Civil Society</option>\n                  <option>Government</option>\n                  <option>Individual</option>\n                  <option>NGO</option>\n                </Form.Control>\n              </Form.Group>\n              <Form.Group>\n                <Form.Label> Category </Form.Label>\n                <CheckboxGroup\n                  id=\"areaOfWork\"\n                  value={values.areaOfWork}\n                  error={errors.areaOfWork}\n                  touched={touched.areaOfWork}\n                  onChange={setFieldValue}\n                  onBlur={setFieldTouched}\n                >\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"animalWelfare\"\n                    label=\"Animal Welfare\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"artsAndCulture\"\n                    label=\"Arts and Culture\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"clothing\"\n                    label=\"Clothing\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"communityDevelopment\"\n                    label=\"Community Development\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"disability\"\n                    label=\"Disability\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"disaster\"\n                    label=\"Disaster\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"education\"\n                    label=\"Education\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"primary\"\n                    label=\" - Primary\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"secondary\"\n                    label=\" - Secondary\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"higher\"\n                    label=\" - Higher\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"energy\"\n                    label=\"Energy\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"environment\"\n                    label=\"Environment\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"forest\"\n                    label=\" - Forest\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"water\"\n                    label=\" - Water\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"equality\"\n                    label=\"Equality\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"food\"\n                    label=\"Food\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"agriculture\"\n                    label=\" - Agriculture\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"areaOfWork\"\n                    id=\"livestock\"\n                    label=\" - Livestock\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"fisheries\"\n                    label=\" - Fisheries\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"gender\"\n                    label=\"Gender\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"health\"\n                    label=\"Health\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"motherAndChildHealth\"\n                    label=\" - Mother and Child Health\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"humanRights\"\n                    label=\"Human Rights\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"infrastructure\"\n                    label=\"Infrastructure\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"it\"\n                    label=\"IT\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"justice\"\n                    label=\"Justice\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"livelihood\"\n                    label=\"Livelihood\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"money\"\n                    label=\"Money\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"peace\"\n                    label=\"Peace\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"ppe\"\n                    label=\"Protection Equipment\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"povertyAlleviation\"\n                    label=\"Poverty Alleviation\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"recycling\"\n                    label=\"Recycling\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"sanitation\"\n                    label=\"Sanitation\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"sports\"\n                    label=\"Sports\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"terrorism\"\n                    label=\"Terrorism\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"virus\"\n                    label=\"Virus\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"waste\"\n                    label=\"Waste\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"youth\"\n                    label=\"Youth\"\n                  />\n                  <Field\n                    component={Checkbox}\n                    name=\"groupType\"\n                    id=\"other\"\n                    label=\"Other\"\n                  />\n                </CheckboxGroup>\n              </Form.Group>\n              <Card.Subtitle\n                className=\"mb-2 text-muted\"\n                style={{ marginTop: \"24px\" }}\n              >\n                {\" \"}\n                Address{\" \"}\n              </Card.Subtitle>\n              <Form.Group controlId=\"formAddressLine1\">\n                <Form.Label>Address Line 1</Form.Label>\n                <Form.Control\n                  name=\"addressLine1\"\n                  type=\"text\"\n                  placeholder=\"Address Line 1\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.addressLine1}\n                  isValid={touched.addressLine1 && !errors.addressLine1}\n                  isInvalid={errors.addressLine1}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.addressLine1}\n                </Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group controlId=\"formCity\">\n                <Form.Label>\n                  City <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  name=\"city\"\n                  type=\"text\"\n                  placeholder=\"City\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.city}\n                  isValid={touched.city && !errors.city}\n                  isInvalid={errors.city}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.city}\n                </Form.Control.Feedback>\n              </Form.Group>\n              <Form.Row>\n                <Form.Group as={Col} controlId=\"formRegion\">\n                  <Form.Label>\n                    Province / Region <span className=\"red\">*</span>\n                  </Form.Label>\n                  <Form.Control\n                    name=\"region\"\n                    type=\"text\"\n                    placeholder=\"Province / Region\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.region}\n                    isValid={touched.region && !errors.region}\n                    isInvalid={errors.region}\n                  />\n                  <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.region}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formPostCode\">\n                  <Form.Label>Post Code / Zip Code</Form.Label>\n                  <Form.Control\n                    name=\"postCode\"\n                    type=\"text\"\n                    placeholder=\"Post Code / Zip Code\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.postCode}\n                    isValid={touched.postCode && !errors.postCode}\n                    isInvalid={errors.postCode}\n                  />\n                  <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.postCode}\n                  </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group as={Col} controlId=\"formCountry\">\n                  <Form.Label>\n                    Country <span className=\"red\">*</span>\n                  </Form.Label>\n                  <Form.Control\n                    name=\"country\"\n                    type=\"text\"\n                    placeholder=\"Country\"\n                    onChange={handleChange}\n                    onBlur={handleBlur}\n                    value={values.country}\n                    isValid={touched.country && !errors.country}\n                    isInvalid={errors.country}\n                  />\n                  <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                  <Form.Control.Feedback type=\"invalid\">\n                    {errors.country}\n                  </Form.Control.Feedback>\n                </Form.Group>\n              </Form.Row>\n              <Form.Group controlId=\"formContactName\">\n                <Form.Label>\n                  {\" \"}\n                  Name of Point of Contact / Representative{\" \"}\n                  <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  name=\"contactName\"\n                  type=\"text\"\n                  placeholder=\"Enter name\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.contactName}\n                  isValid={touched.contactName && !errors.contactName}\n                  isInvalid={errors.contactName}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.contactName}\n                </Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group controlId=\"formContactNumber\">\n                <Form.Label>\n                  Point of Contact Mobile Number <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  name=\"contactNumber\"\n                  type=\"text\"\n                  placeholder=\"Enter mobile number\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.contactNumber}\n                  isValid={touched.contactNumber && !errors.contactNumber}\n                  isInvalid={errors.contactNumber}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.contactNumber}\n                </Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group controlId=\"formContactInfo\">\n                <Form.Label>Other contact info</Form.Label>\n                <Form.Control\n                  name=\"contactInfo\"\n                  as=\"textarea\"\n                  rows=\"2\"\n                  placeholder=\"Enter other contact info\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.contactInfo}\n                  isValid={touched.contactInfo && !errors.contactInfo}\n                  isInvalid={errors.contactInfo}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.contactInfo}\n                </Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group controlId=\"formWebsite\">\n                <Form.Label>Website</Form.Label>\n                <Form.Control\n                  name=\"websiteURL\"\n                  type=\"text\"\n                  placeholder=\"Enter website\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.websiteURL}\n                  isValid={touched.websiteURL && !errors.websiteURL}\n                  isInvalid={errors.websiteURL}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.websiteURL}\n                </Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group controlId=\"formFacebook\">\n                <Form.Label>Facebook</Form.Label>\n                <Form.Control\n                  name=\"facebookURL\"\n                  type=\"text\"\n                  placeholder=\"https://www.facebook.com\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.facebookURL}\n                  isValid={touched.facebookURL && !errors.facebookURL}\n                  isInvalid={errors.facebookURL}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.facebookURL}\n                </Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group controlId=\"formInstagram\">\n                <Form.Label>Instagram</Form.Label>\n                <Form.Control\n                  name=\"instagramURL\"\n                  type=\"text\"\n                  placeholder=\"https://instagram.com\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.instagramURL}\n                  isValid={touched.instagramURL && !errors.instagramURL}\n                  isInvalid={errors.instagramURL}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.instagramURL}\n                </Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group controlId=\"formTwitter\">\n                <Form.Label>Twitter</Form.Label>\n                <Form.Control\n                  name=\"twitterURL\"\n                  type=\"text\"\n                  placeholder=\"https://twitter.com\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.twitterURL}\n                  isValid={touched.twitterURL && !errors.twitterURL}\n                  isInvalid={errors.twitterURL}\n                />\n                <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.twitterURL}\n                </Form.Control.Feedback>\n              </Form.Group>\n              <Form.Group>\n                <Field\n                  component={Checkbox}\n                  name=\"agreedToTerms\"\n                  id=\"agreedToTerms\"\n                  label={\n                    <p className=\"agreedTo\">\n                      {\" \"}\n                      Agreed to{\" \"}\n                      <Link to=\"/termsandconditions\" target=\"_blank\">\n                        {\" \"}\n                        Terms & Conditions{\" \"}\n                      </Link>\n                    </p>\n                  }\n                  isValid={touched.agreedToTerms && !errors.agreedToTerms}\n                  isInvalid={errors.agreedToTerms}\n                />\n              </Form.Group>\n              <button\n                className=\"standardButton signUpButton\"\n                type=\"submit\"\n                disabled={loading}\n              >\n                {loading ? (\n                  <Spinner\n                    animation=\"grow\"\n                    size=\"sm\"\n                    style={{ marginRight: \"8px\" }}\n                  />\n                ) : null}\n                {loading ? \"Updating\" : \"Update\"}\n              </button>\n              <button\n                className=\"standardButton redVersion\"\n                onClick={resetForm}\n                disabled={loading}\n              >\n                Reset\n              </button>\n              {success && <p className=\"successReply\"> Update successfull. </p>}\n              {hasErrors && (\n                <>\n                  <br />\n                  <p className=\"redError\">\n                    {\" \"}\n                    An error has occured please try again later or email\n                    support.\n                  </p>\n                </>\n              )}\n              <Form.Text className=\"text-muted\">\n                Note: Only once we have verified your information will you be\n                able to add charity drives and appear on the page.\n              </Form.Text>\n            </Card.Body>\n          </Form>\n        )}\n      </Formik>\n    </Card>\n  );\n};\n\nconst MapStateToProps = (state, ownProps) => ({\n  loading: state.updateInfo.loading,\n  hasErrors: state.updateInfo.hasErrors,\n  success: state.updateInfo.success,\n  auth: state.auth.auth,\n  signUpError: state.updateInfo.error,\n  orgsDict: state.userInfo.createdOrganisations,\n});\n\nexport default connect(MapStateToProps)(UpdateSupplier);\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/reset/resetPassword.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/update/updateVolunteerProfile.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/inspire/inspireView.component.js",["1042","1043"],"import React, { useState } from 'react';\nimport { Helmet } from 'react-helmet';\n// import { FacebookShareButton, FacebookIcon } from 'react-share'\n\nimport image1 from '../../assets/video/placeholder/1.jpg';\nimport image2 from '../../assets/video/placeholder/2.jpg';\nimport image3 from '../../assets/video/placeholder/3.jpg';\nimport image4 from '../../assets/video/placeholder/4.jpg';\nimport image5 from '../../assets/video/placeholder/5.jpg';\nimport image6 from '../../assets/video/placeholder/6.jpg';\nimport image7 from '../../assets/video/placeholder/7.jpg';\nimport image8 from '../../assets/video/placeholder/8.jpg';\nimport image9 from '../../assets/video/placeholder/9.jpg';\nimport image10 from '../../assets/video/placeholder/10.jpg';\nimport image11 from '../../assets/video/placeholder/11.jpg';\nimport image12 from '../../assets/video/placeholder/12.jpg';\nimport image13 from '../../assets/video/placeholder/13.jpg';\nimport image14 from '../../assets/video/placeholder/14.jpg';\nimport image15 from '../../assets/video/placeholder/15.jpg';\nimport image16 from '../../assets/video/placeholder/16.jpg';\nimport image17 from '../../assets/video/placeholder/17.jpg';\nimport { CLIENT, production, rootURL } from '../../config';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimesCircle } from '@fortawesome/pro-solid-svg-icons';\n\nconst videos = [\n\t{\n\t\tid: 8,\n\t\tname: 'Aquifer Water Wells',\n\t\tplayer: 'https://www.youtube.com/embed/KJbOar2c7Do',\n\t\turl: 'https://youtu.be/KJbOar2c7Do',\n\t\timage: image8,\n\t},\n\t{\n\t\tid: 9,\n\t\tname: 'Are Dams Even Important for Pakistan?',\n\t\tplayer: 'https://www.youtube.com/embed/GajhYkqVA3I',\n\t\turl: 'https://youtu.be/GajhYkqVA3I',\n\t\timage: image9,\n\t},\n\t{\n\t\tid: 10,\n\t\tname: 'Biogas Pellet Stove',\n\t\tplayer: 'https://www.youtube.com/embed/JtIMW4HYX9k',\n\t\turl: 'https://youtu.be/JtIMW4HYX9k',\n\t\timage: image10,\n\t},\n\t{\n\t\tid: 11,\n\t\tname: 'Floods 2010 - Mountains to the Plains',\n\t\tplayer:\n\t\t\t'https://player.vimeo.com/video/135365610?h=3a2f08ceb1&amp;badge=0&amp;autopause=0&amp;player_id=0&amp;app_id=58479',\n\t\turl: 'https://vimeo.com/135365610',\n\t\timage: image11,\n\t},\n\t{\n\t\tid: 12,\n\t\tname: 'Rain Emergency Response Shelter',\n\t\tplayer: 'https://www.youtube.com/embed/suMe54bT8gA',\n\t\turl: 'https://youtu.be/suMe54bT8gA',\n\t\timage: image12,\n\t},\n\t{\n\t\tid: 13,\n\t\tname: 'Lari Octagreen House',\n\t\tplayer: 'https://www.youtube.com/embed/YC5dm2Yl1EE',\n\t\turl: 'https://youtu.be/YC5dm2Yl1EE',\n\t\timage: image13,\n\t},\n\t{\n\t\tid: 14,\n\t\tname: 'Floods 2010 - Mountains to the Plains',\n\t\tplayer: 'https://www.youtube.com/embed/JoXO6-pmsYE',\n\t\turl: 'https://youtu.be/JoXO6-pmsYE',\n\t\timage: image14,\n\t},\n\t{\n\t\tid: 15,\n\t\tname: 'Green Karavan Ghar',\n\t\tplayer: 'https://www.youtube.com/embed/JoXO6-pmsYE',\n\t\turl: 'https://youtu.be/yRx_Q1Gp3gs',\n\t\timage: image15,\n\t},\n\t{\n\t\tid: 16,\n\t\tname: 'The Pakistan Chulah',\n\t\tplayer: 'https://www.youtube.com/embed/YFT0jut6Ki4',\n\t\turl: 'https://youtu.be/YFT0jut6Ki4',\n\t\timage: image16,\n\t},\n\t{\n\t\tid: 17,\n\t\tname: 'Special programme on the floods in Pakistan',\n\t\tplayer: 'https://www.youtube.com/embed/7NWhjlcoNAw',\n\t\turl: 'https://youtu.be/7NWhjlcoNAw',\n\t\timage: image17,\n\t},\n\t{\n\t\tid: 1,\n\t\tname: 'A Day with Edhi and Bilquis 1998',\n\t\tplayer: 'https://player.vimeo.com/video/173005741',\n\t\turl: 'https://vimeo.com/173005741',\n\t\timage: image1,\n\t},\n\t{\n\t\tid: 2,\n\t\tname: 'Haider Ali Un-Disabled',\n\t\tplayer: 'https://player.vimeo.com/video/158591533',\n\t\turl: 'https://vimeo.com/158591533',\n\t\timage: image2,\n\t},\n\t{\n\t\tid: 3,\n\t\tname: \"Sajda's Sewing Dream\",\n\t\tplayer: 'https://player.vimeo.com/video/146986299',\n\t\turl: 'https://vimeo.com/146986299',\n\t\timage: image3,\n\t},\n\t{\n\t\tid: 4,\n\t\tname: 'Zafar Makes Energy',\n\t\tplayer: 'https://player.vimeo.com/video/147007246',\n\t\turl: 'https://vimeo.com/147007246',\n\t\timage: image4,\n\t},\n\t{\n\t\tid: 5,\n\t\tname: 'Fehmida Rises Up',\n\t\tplayer: 'https://player.vimeo.com/video/174172199',\n\t\turl: 'https://vimeo.com/174172199',\n\t\timage: image5,\n\t},\n\t{\n\t\tid: 6,\n\t\tname: 'Mehnaz - Leadership Personified',\n\t\tplayer: 'https://player.vimeo.com/video/167070054',\n\t\turl: 'https://vimeo.com/167070054',\n\t\timage: image6,\n\t},\n\t{\n\t\tid: 7,\n\t\tname: \"Edhi's Story - Nawrang 1991\",\n\t\tplayer: 'https://player.vimeo.com/video/170451406',\n\t\turl: 'https://vimeo.com/170451406',\n\t\timage: image7,\n\t},\n];\n\nconst InspireView = (props) => {\n\tconst [selectedVideo, setSelectedVideo] = useState(null);\n\tconst [searched, setSearched] = useState(null);\n\tconst videoId = parseInt(props.match.params.id);\n\n\tif (videoId && !selectedVideo && !searched) {\n\t\tsetSelectedVideo(findVideo(videoId));\n\t\tsetSearched(true);\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"inspireContainer\">\n\t\t\t\t<div className=\"inspireHeader\">\n\t\t\t\t\t<h1> Inspiration in Motion </h1>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\tSuccessful people who changed their fate and supported others around\n\t\t\t\t\t\tthem{' '}\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"inspireContent\">\n\t\t\t\t\t<div className=\"inspireCardContainer\">\n\t\t\t\t\t\t<InspireVideoCards setSelectedVideo={setSelectedVideo} />\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{selectedVideo && (\n\t\t\t\t<VideoModal\n\t\t\t\t\tselectedVideo={selectedVideo}\n\t\t\t\t\tsetSelectedVideo={setSelectedVideo}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</>\n\t);\n};\n\nconst findVideo = (id) => {\n\tfor (var i = 0; i < videos.length; i++) {\n\t\tconsole.log(id);\n\t\tconsole.log(videos[i].id);\n\t\tif (videos[i].id === id) {\n\t\t\treturn videos[i];\n\t\t}\n\t}\n\treturn null;\n};\n\nconst copyText = (text) => {};\n\nconst VideoModal = ({ selectedVideo, setSelectedVideo }) => {\n\tconst [copiedLink, setCopiedLink] = useState(false);\n\n\treturn (\n\t\t<div\n\t\t\tclassName=\"videoModalBackground\"\n\t\t\tonClick={() => setSelectedVideo(null)}\n\t\t>\n\t\t\t<Helmet>\n\t\t\t\t<meta property=\"og:type\" content=\"website\" />\n\t\t\t\t<meta property=\"og:title\" content={selectedVideo.name} />\n\t\t\t\t<meta property=\"og:description\" content=\"Watch their story\" />\n\t\t\t\t<meta property=\"og:image\" content={selectedVideo.image} />\n\t\t\t\t{/* <meta property=\"og:image:width\" content=\"400\" /> */}\n\t\t\t\t{/* <meta property=\"og:image:height\" content=\"400\" /> */}\n\t\t\t</Helmet>\n\t\t\t<div className=\"videoModal\" onClick={(e) => e.stopPropagation()}>\n\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\ticon={faTimesCircle}\n\t\t\t\t\tsize=\"2x\"\n\t\t\t\t\tclassName=\"modalCloseButton\"\n\t\t\t\t\tonClick={() => setSelectedVideo(null)}\n\t\t\t\t/>\n\n\t\t\t\t<div className=\"videoModalTitle\">\n\t\t\t\t\t<h1> {selectedVideo.name} </h1>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"videoModalVideo\">\n\t\t\t\t\t<iframe\n\t\t\t\t\t\tsrc={selectedVideo.player}\n\t\t\t\t\t\tallowFullScreen\n\t\t\t\t\t\tframeBorder=\"0\"\n\t\t\t\t\t></iframe>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"linkCopyButtonVideoModal\">\n\t\t\t\t\t<button\n\t\t\t\t\t\tclassName=\"standardButton\"\n\t\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\t\tnavigator.clipboard.writeText(\n\t\t\t\t\t\t\t\trootURL(production) + CLIENT + '/inspire/' + selectedVideo.id\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tsetCopiedLink(true);\n\t\t\t\t\t\t}}\n\t\t\t\t\t>\n\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t{copiedLink ? 'Copied link' : 'Copy link'}{' '}\n\t\t\t\t\t</button>\n\t\t\t\t\t{/* <FacebookShareButton\n            url={rootURL(true) + \"ministryofchange.org\" + '/inspire/' + selectedVideo.id}\n            quote={selectedVideo.name}\n            hashtag=\"#inspire #mc #ministryofchange\"\n          >\n            <FacebookIcon size={36} round={true} />\n          </FacebookShareButton> */}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nconst InspireVideoCards = ({ setSelectedVideo }) => {\n\treturn videos.map((video) => {\n\t\treturn (\n\t\t\t<VideoCard\n\t\t\t\tkey={video.name}\n\t\t\t\tvideo={video}\n\t\t\t\tsetSelectedVideo={setSelectedVideo}\n\t\t\t/>\n\t\t);\n\t});\n};\n\nconst VideoCard = ({ video, setSelectedVideo }) => {\n\treturn (\n\t\t<div\n\t\t\tclassName=\"videoCard grow\"\n\t\t\tonClick={(e) => {\n\t\t\t\te.stopPropagation();\n\t\t\t\tsetSelectedVideo(video);\n\t\t\t}}\n\t\t>\n\t\t\t<div className=\"videoCardVideoContainer\">\n\t\t\t\t{/* <iframe src={video.player} allowFullScreen frameBorder=\"0\"></iframe> */}\n\t\t\t\t<img src={video.image} alt=\"Video placeholder\" />\n\t\t\t</div>\n\t\t\t<div className=\"videoCardBottom\">\n\t\t\t\t{/* <a href={video.url}> {video.name} </a> */}\n\t\t\t\t<p> {video.name} </p>\n\t\t\t</div>\n\t\t</div>\n\t);\n};\n\nexport default InspireView;\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/update/updateEvent.component.js",["1044"],"import React, { useState, useMemo } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Card, Form, Spinner } from \"react-bootstrap\";\nimport DatePicker from \"react-datepicker\";\nimport { Link, Redirect, useParams } from \"react-router-dom\";\nimport { Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport { Checkbox } from \"../utilities/Checkboxs.component\";\nimport {\n  updateEvent,\n  updatingEventRedirect,\n} from \"../../Actions/updateActions\";\nimport UpdateMap from \"./updateMap.component\";\nimport {\n  activeStyle,\n  rejectStyle,\n  baseStyle,\n  acceptStyle,\n} from \"../utilities/dropzoneStyles\";\nimport Dropzone, { useDropzone } from \"react-dropzone\";\nimport Thumb from \"../utilities/thumb.component\";\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n    .required(\"*Event name is required\")\n    .min(1, \"*Event name must be longer than 1 charachter\")\n    .max(50, \"*Event name must be less than 50 charachters\")\n    .matches(\n      /^[a-zA-Z0-9_ ]*$/,\n      \"*Event name must only contain letters or numbers\"\n    ),\n  description: Yup.string()\n    .required(\"*Description is required\")\n    .min(1, \"*Description must be longer than 1 charachter\")\n    .max(1000, \"*Description must be less than 1000 charachters\"),\n  numOfItems: Yup.number()\n    .required(\"*Number of items is required\")\n    .integer(\"*Provided number must be an integer\")\n    .min(1, \"*You cannot have less than 1 item...\")\n    .max(\n      10000,\n      \"*You cannot have more than 1000 items... If you do please message danyaalbeg@gmail.com to get this added\"\n    ),\n  descriptionOfItems: Yup.string()\n    .required(\"*Description of items is required\")\n    .min(1, \"*Description must be longer than 1 charachter\")\n    .max(1000, \"*Description  must be less than 1000 charachters\"),\n  // location: Yup.array(Yup.number())\n  // .required(\"*Must add a location\"),\n  // typeOfRation: Yup.string()\n  // .required(\"*Type of rations distributed is required\")\n  // .min(1, \"*Must be longer than 1 charachter\")\n  // .max(100, \"*Must be less than 1000 charachters\"),\n  agreedToTerms: Yup.bool().oneOf([true], \"*Must accept terms and conditions\"),\n  mapClicked: Yup.bool().oneOf([true], \"*Must select a location\"),\n});\n\nconst UpdateEvent = ({\n  dispatch,\n  loading,\n  hasErrors,\n  success,\n  auth,\n  eventsDict,\n  orgID,\n}) => {\n  const [location, setLocation] = useState([]);\n  const [rejectedFilesState, setRejectedFilesState] = useState([]);\n  const [loaded, setLoaded] = useState(false);\n  const [newImage, setNewImage] = useState(false);\n  const [imageNumberError, setImageNumberError] = useState(\"\");\n  const { isDragActive, isDragAccept, isDragReject } = useDropzone({\n    accept: \"image/jpeg, image/png, image/jpg, image/gif\",\n    maxSize: 2000000,\n  });\n  const { id } = useParams();\n  const eventToUpdate = eventsDict[id];\n\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {}),\n    }),\n    [isDragActive, isDragReject]\n  );\n\n  if (!loaded) {\n    if (eventToUpdate === null && !loaded) {\n      return <Redirect to=\"/dashboard\" />;\n    } else {\n      setLocation(eventToUpdate.location.coordinates);\n    }\n    setLoaded(true);\n  }\n\n  if (success) {\n    dispatch(updatingEventRedirect());\n  }\n\n  if (eventToUpdate === null) {\n    return <Redirect push to=\"/dashboard\" />;\n  }\n  if (!auth) {\n    return <Redirect push to=\"/dashboard\" />;\n  }\n  if (success) {\n    return <Redirect push to=\"/dashboard\" />;\n  }\n\n  return (\n    <Card bg=\"light\" text=\"dark\" className=\"signUpCard\">\n      <Card.Header> Update Event </Card.Header>\n\n      <Formik\n        initialValues={{\n          name: eventToUpdate.name,\n          description: eventToUpdate.description,\n          numOfItems: eventToUpdate.totalNumberOfItems,\n          descriptionOfItems: eventToUpdate.itemsDescription,\n          typeOfRation: eventToUpdate.typeOfRation,\n          images: eventToUpdate.images,\n          date: Date.parse(eventToUpdate.date),\n          agreedToTerms: false,\n          mapClicked: true,\n        }}\n        validationSchema={validationSchema}\n        onSubmit={(values) => {\n          const updatedPoint = {\n            type: \"Point\",\n            coordinates: location,\n          };\n          const updatedEvent = {\n            ...eventToUpdate,\n            name: values.name,\n            description: values.description,\n            totalNumberOfItems: values.numOfItems,\n            itemsDescription: values.descriptionOfItems,\n            typeOfRation: values.typeOfRation,\n            images: values.images,\n            location: updatedPoint,\n            date: values.date,\n          };\n          if (newImage) {\n            updatedEvent.newImage = true;\n          }\n          dispatch(updateEvent(updatedEvent, orgID));\n        }}\n      >\n        {({\n          values,\n          errors,\n          touched,\n          handleChange,\n          handleBlur,\n          handleSubmit,\n          isSubmitting,\n          setFieldValue,\n          setFieldTouched,\n        }) => (\n          <Form noValidate onSubmit={handleSubmit}>\n            <Card.Body>\n              {/* <Card.Title>  </Card.Title> */}\n              <Form.Group controlId=\"formBasicName\">\n                <Form.Label>\n                  Name of Event <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Enter name\"\n                  name=\"name\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.name}\n                  isValid={touched.name && !errors.name}\n                  isInvalid={errors.name}\n                />\n                <Form.Control.Feedback type=\"valid\">\n                  Looks good!\n                </Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.name}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              <Form.Group controlId=\"formBasicDescription\">\n                <Form.Label>\n                  Description of Ration Drive <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"3\"\n                  placeholder=\"Enter description\"\n                  name=\"description\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.description}\n                  isValid={touched.description && !errors.description}\n                  isInvalid={errors.description}\n                />\n                <Form.Control.Feedback type=\"valid\">\n                  Looks good!\n                </Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.description}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              <Form.Group controlId=\"formBasicNumberOfItems\">\n                <Form.Label>\n                  Total Quantity of Rations <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  placeholder=\"Enter number of items\"\n                  name=\"numOfItems\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.numOfItems}\n                  isValid={touched.numOfItems && !errors.numOfItems}\n                  isInvalid={errors.numOfItems}\n                />\n                <Form.Control.Feedback type=\"valid\">\n                  Looks good!\n                </Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.numOfItems}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              <Form.Group controlId=\"formBasicDescriptionOfItems\">\n                <Form.Label>\n                  Content of Rations Given <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  as=\"textarea\"\n                  rows=\"3\"\n                  placeholder=\"Enter description of items\"\n                  name=\"descriptionOfItems\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.descriptionOfItems}\n                  isValid={\n                    touched.descriptionOfItems && !errors.descriptionOfItems\n                  }\n                  isInvalid={errors.descriptionOfItems}\n                />\n                <Form.Control.Feedback type=\"valid\">\n                  Looks good!\n                </Form.Control.Feedback>\n                <Form.Control.Feedback type=\"invalid\">\n                  {errors.descriptionOfItems}\n                </Form.Control.Feedback>\n              </Form.Group>\n\n              <Form.Group controlId=\"formTypeOfRation\">\n                <Form.Label>\n                  Type of Rations distributed <span className=\"red\">*</span>\n                </Form.Label>\n                <Form.Control\n                  as=\"select\"\n                  name=\"typeOfRation\"\n                  onChange={handleChange}\n                  onBlur={handleBlur}\n                  value={values.typeOfRation}\n                >\n                  <option value=\"clothes\">Clothes</option>\n                  <option value=\"food\">Food</option>\n                  <option value=\"money\">Money</option>\n                  <option value=\"ppe\">PPE</option>\n                  <option value=\"ramadan\">Ramadan</option>\n                  <option value=\"other\">Other</option>\n                </Form.Control>\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label>\n                  {\" \"}\n                  Images of Event (Under 2mb, only 3 images, files must have\n                  extension of either .jpg, .jpeg or .png){\" \"}\n                </Form.Label>\n                <Dropzone\n                  accept=\"image/jpeg, image/png, image/jpg, image/gif\"\n                  maxSize={20000000}\n                  onDropRejected={(rejectedFiles) => {\n                    console.log(\"rejected\");\n                    setRejectedFilesState(rejectedFiles);\n                  }}\n                  onDrop={(acceptedFiles, rejectedFiles) => {\n                    if (rejectedFiles.length === 0) {\n                      setRejectedFilesState([]);\n                    }\n                    if (acceptedFiles.length > 3) {\n                      setImageNumberError(true);\n                    } else {\n                      setImageNumberError(false);\n                      setNewImage(true);\n                      setFieldValue(\"images\", acceptedFiles);\n                    }\n                  }}\n                >\n                  {({ getRootProps, getInputProps }) => (\n                    <>\n                      <div {...getRootProps({ style })}>\n                        <input {...getInputProps()} />\n                        <p>Drag 'n' images here, or click to select images</p>\n                        <div className=\"rowThumb\">\n                          {\" \"}\n                          {values.images.map((file) => {\n                            return <Thumb file={file} key={file.name} />;\n                          })}{\" \"}\n                        </div>\n                      </div>\n                      {rejectedFilesState.length === 0 ? null : (\n                        <p className=\"redStandardError\">\n                          {\" \"}\n                          Some files were rejected. make sure they are not more\n                          than 2mb.{\" \"}\n                        </p>\n                      )}\n                      {imageNumberError ? (\n                        <p className=\"redStandardError\">\n                          {\" \"}\n                          Only 3 images are allowed{\" \"}\n                        </p>\n                      ) : null}\n                    </>\n                  )}\n                  {/* <div {...getRootProps({style})}>\n            <input {...getInputProps()} />\n            <p>Drag 'n' images here, or click to select images</p>\n            <Row> {thumbFiles} </Row>\n          </div>\n          {rejectedFiles.length === 0 ? null : <p className=\"redError\"> Some files were rejected. make sure they are not more than 2mb. </p>}     */}\n                </Dropzone>\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label>\n                  {\" \"}\n                  Date of the Event <span className=\"red\">*</span>{\" \"}\n                </Form.Label>\n                <br />\n                <DatePicker\n                  selected={values.date}\n                  onChange={(date) => {\n                    setFieldValue(\"date\", date);\n                  }}\n                  name=\"date\"\n                  className=\"datePicker\"\n                  maxDate={new Date()}\n                />\n              </Form.Group>\n\n              <Form.Group>\n                <Form.Label>\n                  {\" \"}\n                  Select Location of the Event Drive{\" \"}\n                  <span className=\"red\">*</span>{\" \"}\n                </Form.Label>\n                <UpdateMap\n                  id=\"mapClicked\"\n                  name=\"mapClicked\"\n                  className=\"selectMap\"\n                  location={eventToUpdate.location}\n                  callBack={(location) => {\n                    setLocation(location);\n                    setFieldValue(\"mapClicked\", true);\n                  }}\n                />\n                {!values.mapClicked && (\n                  <p className=\"input-feedback\">\n                    {\" \"}\n                    *Must select a location on the map{\" \"}\n                  </p>\n                )}\n              </Form.Group>\n\n              <Form.Group>\n                <Field\n                  component={Checkbox}\n                  name=\"agreedToTerms\"\n                  id=\"agreedToTerms\"\n                  label={\n                    <p className=\"agreedTo\">\n                      {\" \"}\n                      Agreed to{\" \"}\n                      <Link to=\"/termsandconditions\" target=\"_blank\">\n                        {\" \"}\n                        Terms & Conditions{\" \"}\n                      </Link>\n                    </p>\n                  }\n                  isValid={touched.agreedToTerms && !errors.agreedToTerms}\n                  isInvalid={errors.agreedToTerms}\n                />\n              </Form.Group>\n\n              <div className=\"formButtons\">\n                <button\n                  className=\"standardButton\"\n                  type=\"submit\"\n                  disabled={loading}\n                >\n                  {loading ? (\n                    <Spinner\n                      animation=\"grow\"\n                      size=\"sm\"\n                      style={{ marginRight: \"8px\" }}\n                    />\n                  ) : null}\n                  {loading ? \"Updating Event\" : \"Update Event\"}\n                </button>\n\n                <Link to=\"/dashboard\" style={{ marginLeft: \"10px\" }}>\n                  <button\n                    className=\"standardButton redVersion\"\n                    type=\"submit\"\n                    disabled={loading}\n                  >\n                    Cancel\n                  </button>\n                </Link>\n              </div>\n\n              {hasErrors && (\n                <>\n                  <br />\n                  <p className=\"redError\">\n                    {\" \"}\n                    An error has occured please try again later or email\n                    support.\n                  </p>\n                </>\n              )}\n            </Card.Body>\n          </Form>\n        )}\n      </Formik>\n    </Card>\n  );\n};\n\nconst MapStateToProps = (state, ownProps) => ({\n  auth: state.auth.auth,\n  loading: state.updateInfo.loading,\n  hasErrors: state.updateInfo.hasErrors,\n  success: state.updateInfo.success,\n  eventsDict: state.userInfo.events,\n});\n\nexport default connect(MapStateToProps)(UpdateEvent);\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/reset/resettingPassword.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/cnicView.component.js",["1045"],"import React, { useRef } from 'react'\nimport { Spinner } from 'react-bootstrap'\nimport { Helmet } from 'react-helmet'\nimport { Tabs, Panel } from '@bumaga/tabs'\nimport { connect } from 'react-redux'\nimport { getUserInfo } from '../../Actions/userInfoActions'\nimport CnicAddNew from './cnicAddNew.component'\nimport { TabCnic } from '../utilities/tabComponent';\nimport CnicSearch from './cnicSearch.component';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faFilePlus, faSearch as faSearchDuotone, faExclamationTriangle} from '@fortawesome/pro-duotone-svg-icons';\n\nimport getRandomColour from '../utilities/randomMCColour.component';\n\nconst MustBeLoggedIn = () => {\n  const randomColour = getRandomColour()\n\n  return (\n    <>\n    <Helmet>\n      <html lang=\"en\" />\n      <meta name=\"description\" content=\"Search or add CNIC numbers to ration distributions\" />\n    </Helmet>\n    <div className=\"cnicMustBeLoggedIn\">\n      <p className=\"cnicLoggedInHeading\" style={{backgroundColor: randomColour}}>\n        <FontAwesomeIcon icon={faExclamationTriangle} className=\"cnicExclamationIcon\" />\n        Must be logged in and verified to view\n      </p>\n    </div>\n    </>\n  )\n}\n\nconst CnicView = ({ dispatch, auth, userDataFetched, authLoading, verified }) => {\n  if (auth && !userDataFetched) {\n    dispatch(getUserInfo())\n  }\n\n  if (auth && authLoading) {\n    return (\n      <div className=\"cnicSpinner\">\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      </div>\n    )\n  }\n\n  if (!auth || !verified) {\n    return <MustBeLoggedIn />\n  }\n\n  return (\n    <div className=\"cnicContainer\">\n    <h1 className=\"cnicHeading\"> Computerized National Identity Card </h1>\n    <div className=\"cnicCard\">\n      <Tabs>\n      <div className=\"cnicHeader\">\n        <TabCnic addClass=\"cnicTab\">\n          <FontAwesomeIcon icon={faSearchDuotone} style={{ marginRight: '8px' }} />\n          Search CNIC\n        </TabCnic>\n        <TabCnic addClass=\"cnicTab\">\n          <FontAwesomeIcon icon={faFilePlus} style={{ marginRight: '8px' }} />\n          Add CNIC\n        </TabCnic>\n      </div>\n      <div className=\"cnicBody\">\n      <Panel>\n        <CnicSearch />\n      </Panel>\n      <Panel>\n        <CnicAddNew />\n      </Panel>  \n      </div>\n      </Tabs>\n    </div>\n    <div className=\"cnicFooter\">\n    <h6> Note </h6>\n      <p> Once Computerised National identity Card / CNIC information has been added it cannot be edited or retrieved, for any changes please email support. </p>\n    </div>\n    </div>\n  )\n}\n\nconst MapStateToProps = (state) => ({\n  auth: state.auth.auth,\n  authLoading: state.userInfo.loading,\n  userDataFetched: state.userInfo.fetched,\n  verified: state.userInfo.user.verified,\n  getLoading: state.cnicInfo.getLoading,\n  getFetched: state.cnicInfo.getFetched,\n  getHasError: state.cnicInfo.getHasError,\n  getHasErrorMessage: state.cnicInfo.getHasErrorMessage,\n  cnicInfo: state.cnicInfo.cnicInfo\n})\n\nexport default connect(MapStateToProps)(CnicView)","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/volunteer/createUserVolunteer.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/volunteer/createVolunteer.component.js",["1046"],"import React from 'react';\n\nimport CreateVolunteerForm from './createVolunteerForm.component';\n\nconst CreateVolunteer = ({  }) => {\n  return (\n    <div className=\"createVolunteerContainer\">\n      <CreateVolunteerForm />\n    </div>\n  )\n}\n\nexport default CreateVolunteer","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/mainSelectedVolunteerView.component.js",["1047","1048","1049"],"import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\n\nimport LoadingSpinner from \"../utilities/loadingSpinner.component\";\nimport VolunteerImage from \"./volunteerImage.component\";\nimport VolunteerPersonalIconInfo from \"./volunteerPersonalIconInfo.component\";\nimport VolunteerIconInfo from \"./volunteerIconInfo.component\";\nimport GenderComponent from \"./volunteerGender.component\";\nimport VolunteerPillsList from \"./volunteerPillsList.component\";\nimport { getVolunteer } from \"../../Actions/volunteerActions\";\nimport { WhatCategories } from \"../iconController/iconCategories.component\";\n\nconst MainSelectedVolunteerView = ({\n  dispatch,\n  selectedVolunteer,\n  props,\n  loading,\n  hasErrors,\n  fetched,\n}) => {\n  const { id } = useParams();\n  const volunteer = selectedVolunteer;\n\n  useEffect(() => {\n    dispatch(getVolunteer(id));\n  }, []);\n\n  if (loading || !volunteer) {\n    return <LoadingSpinner />;\n  }\n\n  function clickProject(id) {\n    props.history.push(`/projects/${id}`);\n  }\n\n  if (hasErrors) return <p> Error Occurred </p>;\n  if (fetched && volunteer !== null) {\n    return (\n      <div className=\"bg-gray-100 h-auto px-16 py-8\">\n        <div className=\"grid grid-cols-3 grid-flow-row gap-4\">\n          <div className=\"flex flex-row col-span-3 px-8 py-12 shadow-solid bg-white rounded-xl select-none\">\n            <div className=\"w-min\">\n              <VolunteerImage size=\"large\" />\n            </div>\n            <div className=\"flex-grow p-4 text-gray-700\">\n              <h1 className=\"font-bold\">\n                {volunteer.firstName} {volunteer.lastName}{\" \"}\n                <GenderComponent gender={volunteer.gender} color=\"black\" />\n              </h1>\n              <VolunteerPersonalIconInfo volunteer={volunteer} />\n            </div>\n          </div>\n\n          <div className=\"col-span-3 px-8 py-4 bg-white rounded-xl shadow-solid\">\n            <h3 className=\"font-bold\"> About </h3>\n            <p className=\"m-0\"> {volunteer.about} </p>\n            <VolunteerIconInfo volunteer={volunteer} />\n          </div>\n\n          <div className=\"col-span-3 px-8 py-4 bg-white rounded-xl shadow-solid select-none\">\n            <h3 className=\"font-bold\"> Skills </h3>\n            <VolunteerPillsList items={volunteer.skills} />\n            <h3 className=\"mt-4 font-bold\"> Interests </h3>\n            <div className=\"flex flex-row\">\n              <WhatCategories types={volunteer.interests} />\n            </div>\n            <h3 className=\"mt-4 font-bold\"> Languages </h3>\n            <VolunteerPillsList items={volunteer.languages} />\n          </div>\n          {volunteer.volunteering && volunteer.volunteering.length !== 0 && (\n            <div className=\"col-span-3 px-8 py-4 bg-white rounded-xl shadow-solid\">\n              <h3 className=\"font-bold\"> Volunteered For </h3>\n              <div className=\"flex flex-row flex-wrap gap-4\">\n                {volunteer.volunteering.map((p) => {\n                  return (\n                    <ProjectMiniCard\n                      key={p._id}\n                      project={p}\n                      onClick={clickProject}\n                    />\n                  );\n                })}\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  }\n\n  return <LoadingSpinner />;\n};\n\nconst ProjectMiniCard = ({ project, onClick }) => {\n  let image = null;\n  if (project.images) {\n    image = project.images[0];\n  } else image = <p> no image... </p>;\n\n  function clicked() {\n    onClick(project._id);\n  }\n\n  return (\n    <div\n      onClick={clicked}\n      className=\"group h-60 w-48 relative overflow-hidden rounded-2xl shadow hover:shadow-lg transition transform duration-500 ease-in-out hover:scale-105 cursor-pointer\"\n    >\n      <h5 className=\"absolute text-white font-bold bottom-4 left-4 z-20 transition transform duration-500 group-hover:-translate-y-1 group-hover:scale-105\">\n        {project.name}\n      </h5>\n      <div className=\"absolute top-0 left-0 h-60 w-48 bg-gradient-to-t from-black via-transparent opacity-50 z-10\"></div>\n      <img\n        className=\"h-60 w-48 object-cover transition transform duration-500 scale-105 group-hover:scale-100 group-hover:-translate-y-2\"\n        src={image}\n      />\n    </div>\n  );\n};\n\nconst MapStateToProps = (state, ownProps) => ({\n  loading: state.volunteerInfo.mainVolunteers.loading,\n  hasErrors: state.volunteerInfo.mainVolunteers.hasErrors,\n  fetched: state.volunteerInfo.mainVolunteers.fetched,\n  selectedVolunteer: state.volunteerInfo.mainVolunteers.selectedVolunteer,\n  props: ownProps,\n});\n\nexport default connect(MapStateToProps)(MainSelectedVolunteerView);\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/mapSelectActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/createEventActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/mapInfoActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/getOrgInfoActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/orgActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/updateActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/signUpActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/filterSearchOrgAction.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/volunteerActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/homeViewActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/groupActions.js",["1050"],"import axios from 'axios'\nimport { rootURL, production, API } from '../config'\nimport { withImageUploadSingle } from './imageUpload'\nimport { getUserInfo } from '../Actions/userInfoActions';\nimport { deleteUserInfoGroup } from './userInfoActions'\nimport { RESET_DELETE } from './deleteEventAction';\n\nexport const GET_GROUP = \"GET_GROUP\"\nexport const GET_GROUP_SUCCESS = \"GET_GROUP_SUCCESS\"\nexport const GET_GROUP_FAILURE = \"GET_GROUP_FAILURE\"\n\nexport const CREATE_GROUP = \"CREATE_GROUP\"\nexport const CREATE_GROUP_SUCCESS = \"CREATE_GROUP_SUCCESS\"\nexport const CREATE_GROUP_FAILURE = \"CREATE_GROUP_FAILURE\"\n\nexport const DELETE_GROUP = \"DELETE_GROUP\"\nexport const DELETE_GROUP_SUCCESS = \"DELETE_GROUP_SUCCESS\"\nexport const DELETE_GROUP_FAILURE = \"DELETE_GROUP_FAILURE\"\n\nexport const RESET_CREATE_GROUP = \"RESET_CREATE_GROUP\"\nexport const RESET_DELETE_GROUP = \"RESET_DELETE_GROUP\"\n\n\nexport const gettingGroup = () => ({\n  type: GET_GROUP\n})\nexport const gettingGroupSuccess = (data) => ({\n  type: GET_GROUP_SUCCESS,\n  payload: data\n})\nexport const gettingGroupFailure = (err) => ({\n  type: GET_GROUP_FAILURE,\n  payload: err\n})\n\nexport const creatingGroup = () => ({\n  type: CREATE_GROUP\n})\nexport const creatingGroupSuccess = (data) => ({\n  type: CREATE_GROUP_SUCCESS,\n  payload: data\n})\nexport const creatingGroupFailure = (err) => ({\n  type: CREATE_GROUP_FAILURE,\n  payload: err\n})\n\nexport const deletingGroup = () => ({\n  type: DELETE_GROUP\n})\nexport const deletingGroupSuccess = (data) => ({\n  type: DELETE_GROUP_SUCCESS,\n  payload: data\n})\nexport const deletingGroupFailure = (err) => ({\n  type: DELETE_GROUP_FAILURE,\n  payload: err\n})\nexport const resettingDeleteGroup = () => ({\n  type: RESET_DELETE_GROUP\n})\n\nexport const resettingCreateGroup = () => ({\n  type: RESET_CREATE_GROUP,\n})\n\nexport const deleteGroup = (id) => {\n  return async dispatch => {\n    dispatch(deletingGroup())\n\n    axios({\n      url: rootURL(production) + API + '/group/delete/' + id,\n      method: 'delete',\n      withCredentials: true,\n      crednetials: 'include'\n    })\n    .then((res) => {\n      dispatch(deletingGroupSuccess())\n      dispatch(deleteUserInfoGroup(id))\n    })\n    .catch((err) => {\n      console.log(err)\n      dispatch(deletingGroupFailure(err.data))\n    })\n  }\n}\n\nexport const getGroups = () => {\n  return async dispatch => {\n    dispatch(gettingGroup())\n\n    axios({\n      method: 'get',\n      url: rootURL(production) + API + '/group'\n    })\n    .then((res) => {\n      dispatch(gettingGroupSuccess(res.data))\n    })\n    .catch((err) => {\n      dispatch(gettingGroupFailure(err))\n    })\n  }\n}\n\nexport const createGroup = (data) => {\n  return async dispatch => {\n    dispatch(creatingGroup())\n\n    if (data.image) {\n      createGroupWithImage(dispatch, data)\n    } else {\n      createGroupCall(dispatch, data)\n    }\n  }\n}\n\nconst createGroupWithImage = (dispatch, data) => {\n  withImageUploadSingle(dispatch, data, createGroupCall, creatingGroupFailure, \"groupImages\")\n}\n\nconst createGroupCall = (dispatch, data) => {\n  axios({\n    url: rootURL(production) + API + '/group/create',\n    method: 'post',\n    data: {\n      ...data,\n      groupImage: data.image\n    },\n    withCredentials: true,\n    credentials: 'include'\n  })\n  .then((res) => {\n    dispatch(creatingGroupSuccess(res.data))\n    dispatch(getUserInfo())\n  })\n  .catch((err) => {\n    dispatch(creatingGroupFailure())\n  })\n}","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/filterSearchMapAction.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/cnicActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/mapActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/deleteEventAction.js",["1051"],"import axios from 'axios';\nimport { API, rootURL, production } from '../config'\nimport { deleteUserInfoEvent } from './userInfoActions'\nimport { faGameConsoleHandheld } from '@fortawesome/pro-duotone-svg-icons';\n\nexport const DELETE_EVENT = \"DELETE_EVENT\"\nexport const DELETE_EVENT_SUCCESS = \"DELETE_EVENT_SUCCESS\"\nexport const DELETE_EVENT_FAILURE = \"DELETE_EVENT_FAILURE\"\nexport const RESET_DELETE = \"RESET_DELETE\"\n\nexport const deletingEvent = () => ({\n  type: DELETE_EVENT\n})\n\nexport const deletingEventSuccess = () => ({\n  type: DELETE_EVENT_SUCCESS\n})\n\nexport const deletingEventFailure = (error) => ({\n  type: DELETE_EVENT_FAILURE,\n  payload: error\n})\n\nexport const resetDelete = () => ({\n  type: RESET_DELETE\n})\n\nexport function deleteEvent(eventID) {\n  return async dispatch => {\n    dispatch(deletingEvent())\n\n    axios({\n      method: \"delete\",\n      url: rootURL(production)+API+'/event/'+eventID,\n      withCredentials: true,\n      credentials: 'include'\n    })\n    .then(() => {\n      dispatch(deletingEventSuccess())\n      dispatch(deleteUserInfoEvent(eventID))\n    })\n    .catch((error) => {\n      console.log(error)\n      dispatch(deletingEventFailure(error))\n      console.log(error.response)\n    });\n  }\n}","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/filterMainProjectActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapLayerTypes.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/userInfoActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/normalise.js",["1052"],"import { normalize, schema } from 'normalizr';\n\n//Schema Defined\nconst events = new schema.Entity('events', {}, { idAttribute: '_id' });\nconst sponsorRequests = new schema.Entity(\n\t'sponsorRequests',\n\t{},\n\t{ idAttribute: '_id' }\n);\n\nconst volunteerRequests = new schema.Entity(\n\t'volunteerRequests',\n\t{},\n\t{ idAttribute: '_id' }\n);\nconst volunteeringInfo = new schema.Entity(\n\t'volunteeringInfo',\n\t{\n\t\tvolunteerRequests: [volunteerRequests],\n\t},\n\t{ idAttribute: '_id' }\n);\n\nconst supplies = new schema.Entity('supplies', {}, { idAttribute: '_id' });\nconst updates = new schema.Entity('updates', {}, { idAttribute: '_id' });\n\nconst projects = new schema.Entity(\n\t'projects',\n\t{\n\t\tsponsorRequests: [sponsorRequests],\n\t\tsupplies: [supplies],\n\t\tupdates: [updates],\n\t\tvolunteeringInfo: volunteeringInfo,\n\t},\n\t{ idAttribute: '_id' }\n);\n\nconst organisations = new schema.Entity(\n\t'createdOrganisations',\n\t{\n\t\tprojects: [projects],\n\t\tsponsorRequests: [sponsorRequests],\n\t\tevents: [events],\n\t},\n\t{ idAttribute: '_id' }\n);\n\nconst groups = new schema.Entity('createdGroups', {}, { idAttribute: '_id' });\n\nconst user = new schema.Entity(\n\t'user',\n\t{\n\t\tcreatedOrganisations: [organisations],\n\t\tcreatedGroups: [groups],\n\t\tsponsorRequests: [sponsorRequests],\n\t},\n\t{ idAttribute: '_id' }\n);\n\nexport const normalizeUserState = (data) => {\n\tconst normalizedData = normalize(data, user);\n\n\tnormalizedData.entities.userID = normalizedData.result;\n\t//Creating allIds array for each entity\n\tnormalizedData.entityIds = {\n\t\tcreatedOrganisations: [],\n\t\tevents: [],\n\t\tprojects: [],\n\t\tcreatedGroups: [],\n\t\tsponsorRequests: [],\n\t\tvolunteeringInfo: [],\n\t\tvolunteerRequests: [],\n\t\tuserVolunteerRequests: [],\n\t\tupdates: [],\n\t\tsupplies: [],\n\t};\n\n\t//HACK to get user.volunteer.volunteering into a seperate volunteer requests dict... yes im lazy.\n\tnormalizedData.userVolunteerRequests = {};\n\tnormalizedData.entities.userVolunteerRequests = {};\n\n\tif (data.volunteer && data.volunteer.volunteering) {\n\t\tdata.volunteer.volunteering.map((v) => {\n\t\t\tnormalizedData.entityIds.userVolunteerRequests.push(v._id);\n\t\t\tnormalizedData.entities.userVolunteerRequests[v._id] = v;\n\t\t});\n\t}\n\n\tif (!normalizedData.entities.projects) {\n\t\tnormalizedData.entities.projects = {};\n\t}\n\tif (!normalizedData.entities.createdOrganisations) {\n\t\tnormalizedData.entities.createdOrganisations = {};\n\t}\n\tif (!normalizedData.entities.createdGroups) {\n\t\tnormalizedData.entities.createdGroups = {};\n\t}\n\tif (!normalizedData.entities.sponsorRequests) {\n\t\tnormalizedData.entities.sponsorRequests = {};\n\t}\n\tif (!normalizedData.entities.volunteeringInfo) {\n\t\tnormalizedData.entities.volunteeringInfo = {};\n\t}\n\tif (!normalizedData.entities.volunteerRequests) {\n\t\tnormalizedData.entities.volunteerRequests = {};\n\t}\n\tif (!normalizedData.entities.updates) {\n\t\tnormalizedData.entities.updates = {};\n\t}\n\tif (!normalizedData.entities.supplies) {\n\t\tnormalizedData.entities.supplies = {};\n\t}\n\tif (!normalizedData.entities.events) {\n\t\tnormalizedData.entities.events = {};\n\t}\n\n\t// console.log(data);\n\t// normalizedData.entities.user =\n\t//   normalizedData.entities.user[Object.keys(normalizedData.entities.user)[0]];\n\n\tfor (const [key] of Object.entries(normalizedData.entities.projects)) {\n\t\tnormalizedData.entityIds.projects.push(key);\n\t}\n\tfor (const [key] of Object.entries(\n\t\tnormalizedData.entities.createdOrganisations\n\t)) {\n\t\tnormalizedData.entityIds.createdOrganisations.push(key);\n\t}\n\tfor (const [key] of Object.entries(normalizedData.entities.createdGroups)) {\n\t\tnormalizedData.entityIds.createdGroups.push(key);\n\t}\n\tfor (const [key] of Object.entries(normalizedData.entities.sponsorRequests)) {\n\t\tnormalizedData.entityIds.sponsorRequests.push(key);\n\t}\n\tfor (const [key] of Object.entries(\n\t\tnormalizedData.entities.volunteeringInfo\n\t)) {\n\t\tnormalizedData.entityIds.volunteeringInfo.push(key);\n\t}\n\tfor (const [key] of Object.entries(\n\t\tnormalizedData.entities.volunteerRequests\n\t)) {\n\t\tnormalizedData.entityIds.volunteerRequests.push(key);\n\t}\n\tfor (const [key] of Object.entries(normalizedData.entities.updates)) {\n\t\tnormalizedData.entityIds.updates.push(key);\n\t}\n\tfor (const [key] of Object.entries(normalizedData.entities.supplies)) {\n\t\tnormalizedData.entityIds.supplies.push(key);\n\t}\n\tfor (const [key] of Object.entries(normalizedData.entities.events)) {\n\t\tnormalizedData.entityIds.events.push(key);\n\t}\n\n\treturn normalizedData;\n};\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/projectActions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/randomMCColour.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/config.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/volunteer/createUserVolunteerForm.component.js",["1053","1054","1055","1056","1057"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { useFormik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport SelectMap from \"../selectMap.component\";\nimport Dropzone, { useDropzone } from \"react-dropzone\";\nimport {\n  baseStyle,\n  acceptStyle,\n  activeStyle,\n  rejectStyle,\n} from \"../../utilities/dropzoneStyles\";\nimport Thumb from \"../../utilities/thumb.component\";\nimport LoadingSpinner from \"../../utilities/loadingSpinner.component\";\nimport SkillsSelection from \"../../sharedComponents/skillsSelection.component\";\nimport {\n  SelectBadgeOptionsForm,\n  CategoryBadgeOptionsForm,\n} from \"../../sharedComponents/selectBadgeOptions.component\";\nimport { listOfLanguages } from \"../../utilities/dataOptions.component\";\n\nimport {\n  createUserVolunteerReset,\n  creatingUserVolunteer,\n} from \"../../../Actions/volunteerActions\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHandsHelping } from \"@fortawesome/pro-solid-svg-icons\";\n\nconst validationSchema = Yup.object().shape({\n  username: Yup.string()\n    .required(\"*Username is required\")\n    .min(5, \"*Username must be longer than 5 charachters\")\n    .max(20, \"*Username must be less than 20 charachters\")\n    .matches(/^[a-zA-Z0-9_ ]*$/, \"*Username must be only letters or numbers\"),\n  password: Yup.string()\n    .required(\"*Password is required\")\n    .min(5, \"*Password must be longer than 5 charachters\")\n    .max(20, \"*password must be less than 20 charachters\")\n    .matches(\"\")\n    // .matches(/^(?=.*[A-Za-z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!%*#?&]{5,20}$/, \"*Password must contain an uppercase, lowercase letter, number and special charachter\"),\n    .matches(\n      /(?=^.{5,20}$)((?!.*\\s)(?=.*[A-Z])(?=.*[a-z])(?=(.*\\d){1,}))((?!.*[\",;&|'])|(?=(.*\\W){1,}))(?!.*[\",;&|'])^.*$/,\n      \"*Password must contain an uppercase, lowercase letter, and number\"\n    ),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref(\"password\"), null], \"*Passwords do not match\")\n    .required(\"*Password is required\"),\n  firstName: Yup.string()\n    .required(\"*First name is required\")\n    .max(100, \"*First name must be less than 100 charachters\"),\n  lastName: Yup.string()\n    .required(\"*Last name is required\")\n    .max(100, \"*Last name must be less than 100 charachters\"),\n  email: Yup.string()\n    .required(\"*Email is required\")\n    .email(\"*Must be a valid email\")\n    .max(100, \"*Email must be less than 100 charachters\"),\n  cnic: Yup.string().matches(\n    /^(\\d{13})?$|[0-9]{12}-[0-9]{1}$|[0-9]{5}-[0-9]{7}-[0-9]{1}$|[0-9]{6}-[0-9]{6}-[0-9]{1}$/,\n    \"*This is not a valid CNIC, make sure it is in this format: 1234567891234 or 12345-1234567-1 or 123456-123456-1\"\n  ),\n  tagLine: Yup.string()\n    .required(\"*Tag line is required\")\n    .max(80, \"*About must be less than 80 charachters\"),\n  dob: Yup.date().required(\"*Date of birth is required\"),\n  gender: Yup.string().required(\"*Please select a gender\"),\n  about: Yup.string()\n    .required(\"*About is required\")\n    .max(1000, \"*About must be less than 1000 charachters\"),\n  contactNumber: Yup.string()\n    .required(\"*Number is required\")\n    .min(7, \"*Number must be longer than 7 charachters\")\n    .max(14, \"*Number must be less than 14 charachters\"),\n  educationLevel: Yup.string().required(\"*Education is required\"),\n  employmentStatus: Yup.string().required(\"*Employment is required\"),\n  city: Yup.string()\n    .required(\"*City is required\")\n    .min(1, \"*City name must be longer than 1 charachter\")\n    .max(50, \"*City name must be less than 50 charachters\"),\n  country: Yup.string()\n    .required(\"*Country is required\")\n    .min(1, \"*Country name must be longer than 1 charachter\")\n    .max(60, \"*Country name must be less than 60 charachters\"),\n  vehicle: Yup.string().required(\"*Please select an option\"),\n  languages: Yup.array().min(1, \"*Please select at least one language\"),\n  skills: Yup.array().min(1, \"*Please select at least one skill\"),\n  interests: Yup.array().min(1, \"*Please select at least one interest\"),\n  agreedToTerms: Yup.bool().oneOf([true], \"*Must accept terms and conditions\"),\n});\n\nconst CreateUserVolunteerForm = ({\n  dispatch,\n  hasErrors,\n  loading,\n  success,\n  auth,\n  signUpError,\n}) => {\n  useEffect(() => {\n    if (auth) {\n      return <Redirect to=\"/dashboard\" />;\n    }\n  }, []);\n\n  const [imageFiles, setImageFiles] = useState([]);\n  const [rejectedFilesState, setRejectedFilesState] = useState([]);\n  const { isDragActive, isDragAccept, isDragReject } = useDropzone({\n    accept: \"image/jpeg, image/png, image/jpg, image/gif\",\n    maxSize: 2000000,\n  });\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {}),\n    }),\n    [isDragActive, isDragReject]\n  );\n\n  const formik = useFormik({\n    initialValues: {\n      username: \"\",\n      firstName: \"\",\n      lastName: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      email: \"\",\n      cnic: \"\",\n      tagLine: \"\",\n      imageURL: null,\n      dob: new Date(),\n      gender: \"\",\n      about: \"\",\n      contactNumber: \"\",\n      educationLevel: \"\",\n      employmentStatus: \"\",\n      hasDisability: false,\n      disability: \"\",\n      languages: [],\n      haveSmartPhone: \"\",\n      vehicle: \"No\",\n      preferredContact: \"\",\n      city: \"\",\n      country: \"\",\n      skills: [],\n      interests: [],\n      isPrivate: false,\n      agreedToTerms: false,\n    },\n    validationSchema: validationSchema,\n    validateOnChange: false,\n    validateOnBlur: false,\n    onSubmit: (values) => {\n      const data = {\n        username: values.username,\n        firstName: values.firstName,\n        lastName: values.lastName,\n        email: values.email,\n        password: values.password,\n        cnic: values.cnic,\n        tagLine: values.tagLine,\n        imageURL: values.imageURL,\n        dob: values.dob,\n        gender: values.gender,\n        about: values.about,\n        contactNumber: values.contactNumber,\n        educationLevel: values.educationLevel,\n        employmentStatus: values.employmentStatus,\n        disability: values.disability,\n        languages: values.languages,\n        haveSmartPhone: values.haveSmartPhone,\n        vehicle: values.vehicle,\n        preferredContact: values.preferredContact,\n        city: values.city,\n        country: values.country,\n        skills: values.skills,\n        interests: values.interests,\n        isPrivate: values.isPrivate,\n      };\n      dispatch(creatingUserVolunteer(data));\n      // alert(JSON.stringify(data))\n    },\n  });\n\n  return (\n    <div className=\"formCardContainer\">\n      <div className=\"standardForm\">\n        <form noValidate onSubmit={formik.handleSubmit}>\n          <div className=\"formMainHeader\">\n            <FontAwesomeIcon icon={faHandsHelping} size=\"2x\" />\n            <h2> Volunteer Sign Up </h2>\n          </div>\n          <div className=\"formMainBody\">\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Username <span className=\"red\">*</span>{\" \"}\n              </p>\n              <input\n                autoComplete=\"given-name\"\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"Enter username\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.username}\n              />\n              {formik.errors.username && (\n                <p className=\"formInputError\"> {formik.errors.username} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Password <span className=\"red\">*</span>{\" \"}\n              </p>\n              <input\n                autoComplete=\"new-password\"\n                type=\"password\"\n                name=\"password\"\n                placeholder=\"Enter password\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.password}\n              />\n              {formik.errors.password && (\n                <p className=\"formInputError\"> {formik.errors.password} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                {\" \"}\n                Confirm Password <span className=\"red\">*</span>{\" \"}\n              </p>\n              <input\n                autoComplete=\"new-password\"\n                type=\"password\"\n                name=\"confirmPassword\"\n                placeholder=\"Re-enter password\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.confirmPassword}\n              />\n              {formik.errors.confirmPassword && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.confirmPassword}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formRow\">\n              <div className=\"formGroup\">\n                <p className=\"formGroupHeader\">\n                  First Name <span className=\"red\">*</span>{\" \"}\n                </p>\n                <input\n                  autoFocus\n                  autoComplete=\"given-name\"\n                  type=\"text\"\n                  name=\"firstName\"\n                  placeholder=\"Enter first name\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.firstName}\n                />\n                {formik.errors.firstName && (\n                  <p className=\"formInputError\"> {formik.errors.firstName} </p>\n                )}\n              </div>\n\n              <div className=\"formGroup\">\n                <p className=\"formGroupHeader\">\n                  Last Name <span className=\"red\">*</span>{\" \"}\n                </p>\n                <input\n                  autoComplete=\"family-name\"\n                  type=\"text\"\n                  name=\"lastName\"\n                  placeholder=\"Enter last name\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.lastName}\n                />\n                {formik.errors.lastName && (\n                  <p className=\"formInputError\"> {formik.errors.lastName} </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Email <span className=\"red\">*</span>{\" \"}\n              </p>\n              <input\n                autoComplete=\"email\"\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter email\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.email}\n              />\n              {formik.errors.email && (\n                <p className=\"formInputError\"> {formik.errors.email} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">CNIC Number</p>\n              <input\n                type=\"text\"\n                name=\"cnic\"\n                placeholder=\"Enter CNIC\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.cnic}\n              />\n              {formik.errors.cnic && (\n                <p className=\"formInputError\"> {formik.errors.cnic} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Profile Picture (Under 1mb, file must have extension of either\n                .jpg, .jpeg or .png)\n              </p>\n              <Dropzone\n                accept=\"image/jpeg, image/png, image/jpg, image/gif\"\n                maxSize={11000000}\n                onDropRejected={(rejectedFiles) => {\n                  console.log(\"rejected\");\n                  setRejectedFilesState(rejectedFiles);\n                }}\n                onDrop={(acceptedFiles, rejectedFiles) => {\n                  if (rejectedFiles.length === 0) {\n                    setRejectedFilesState([]);\n                  }\n                  if (acceptedFiles.length !== 1) {\n                    setRejectedFilesState(acceptedFiles);\n                    return;\n                  }\n                  setImageFiles(acceptedFiles);\n                  formik.setFieldValue(\"images\", acceptedFiles);\n                }}\n              >\n                {({ getRootProps, getInputProps }) => (\n                  <>\n                    <div {...getRootProps({ style })}>\n                      <input {...getInputProps()} />\n                      <p>\n                        Drag 'n' drop images here, or click to select images\n                      </p>\n                      <div className=\"thumbnailRow\">\n                        {imageFiles.map((file) => {\n                          return <Thumb file={file} key={file.name} />;\n                        })}\n                      </div>\n                    </div>\n                    {rejectedFilesState.length === 0 ? null : (\n                      <p className=\"redError\">\n                        {\" \"}\n                        Some files were rejected. make sure they are not more\n                        than 1mb.{\" \"}\n                      </p>\n                    )}\n                  </>\n                )}\n              </Dropzone>\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Date of Birth <span className=\"red\">*</span>\n              </p>\n              <DatePicker\n                selected={formik.values.dob}\n                onChange={(date) => {\n                  formik.setFieldValue(\"dob\", date);\n                }}\n                name=\"dob\"\n                className=\"datePicker\"\n                maxDate={new Date()}\n                showMonthDropdown\n                showYearDropdown\n                dropdownMode=\"select\"\n              />\n              {formik.errors.dob && (\n                <p className=\"formInputError\"> {formik.errors.dob} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Gender <span className=\"red\">*</span>{\" \"}\n              </p>\n              <select\n                name=\"gender\"\n                onChange={(e) => formik.setFieldValue(\"gender\", e.target.value)}\n              >\n                <option value=\"\" defaultValue>\n                  Select your gender\n                </option>\n                <option value=\"male\">Male</option>\n                <option value=\"female\">Female</option>\n                <option value=\"other\">other</option>\n              </select>\n              {formik.errors.gender && (\n                <p className=\"formInputError\"> {formik.errors.gender} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Why do you want to volunteer (1 line){\" \"}\n                <span className=\"red\">*</span>{\" \"}\n              </p>\n              <textarea\n                type=\"text\"\n                name=\"tagLine\"\n                rows=\"2\"\n                placeholder=\"Enter a tagline\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.tagLine}\n              />\n              {formik.errors.tagLine && (\n                <p className=\"formInputError\"> {formik.errors.tagLine} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                About Me <span className=\"red\">*</span>{\" \"}\n              </p>\n              <textarea\n                type=\"text\"\n                name=\"about\"\n                rows=\"3\"\n                placeholder=\"Enter information about yourself\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.about}\n              />\n              {formik.errors.about && (\n                <p className=\"formInputError\"> {formik.errors.about} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Mobile <span className=\"red\">*</span>{\" \"}\n              </p>\n              <input\n                autoComplete=\"tel\"\n                type=\"text\"\n                name=\"contactNumber\"\n                placeholder=\"Enter mobile number\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.contactNumber}\n              />\n              {formik.errors.contactNumber && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.contactNumber}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Highest level of Education <span className=\"red\">*</span>{\" \"}\n              </p>\n              <select\n                name=\"educationLevel\"\n                onChange={(e) =>\n                  formik.setFieldValue(\"educationLevel\", e.target.value)\n                }\n              >\n                <option value=\"\" defaultValue>\n                  Select your level\n                </option>\n                <option value=\"primary\">Primary</option>\n                <option value=\"secondary\">Secondary</option>\n                <option value=\"other\">other</option>\n              </select>\n              {formik.errors.educationLevel && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.educationLevel}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Employment Status <span className=\"red\">*</span>{\" \"}\n              </p>\n              <select\n                name=\"employmentStatus\"\n                onChange={(e) =>\n                  formik.setFieldValue(\"employmentStatus\", e.target.value)\n                }\n              >\n                <option value=\"\" defaultValue>\n                  Select your status\n                </option>\n                <option value=\"STUDENT\">Student</option>\n                <option value=\"HOME-MAKER\">Home Maker</option>\n                <option value=\"PRIVATE-SECTOR\">Private Sector</option>\n                <option value=\"PUBLIC-SECTOR\">Public Sector</option>\n                <option value=\"GOVERNMENT\">Government</option>\n                <option value=\"PART-TIME\">Part Time</option>\n                <option value=\"UNEMPLOYED\">Unemployed</option>\n                <option value=\"SELF-EMPLOYED\">Self Employed</option>\n                <option value=\"RETIRED\">Retired</option>\n                <option value=\"OTHER\">other</option>\n              </select>\n              {formik.errors.employmentStatus && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.employmentStatus}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <div className=\"formGroupCheckBox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"hasDisability\"\n                  id=\"formCheckbox\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.hasDisability}\n                />\n                <p className=\"agreedTo\">Do you have a disability?</p>\n              </div>\n              {formik.values.hasDisability && (\n                <div>\n                  <p className=\"formGroupHeader\">What is your disability? </p>\n                  <input\n                    type=\"text\"\n                    name=\"disability\"\n                    placeholder=\"Enter your disability\"\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                    value={formik.values.disability}\n                  />\n                  {formik.errors.disability && (\n                    <p className=\"formInputError\">\n                      {\" \"}\n                      {formik.errors.disability}{\" \"}\n                    </p>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <div className=\"formGroupCheckBox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"haveSmartPhone\"\n                  id=\"formCheckbox\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.haveSmartPhone}\n                />\n                <p className=\"agreedTo\">Do you have a smart phone?</p>\n              </div>\n              {formik.errors.haveSmartPhone && (\n                <p className=\"formInputError\">{formik.errors.haveSmartPhone}</p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Do you have a vehicle? <span className=\"red\">*</span>{\" \"}\n              </p>\n              <select\n                name=\"vehicle\"\n                onChange={(e) =>\n                  formik.setFieldValue(\"vehicle\", e.target.value)\n                }\n              >\n                <option value=\"\" defaultValue>\n                  Choose an option\n                </option>\n                <option value=\"none\">No</option>\n                <option value=\"car\">Car</option>\n                <option value=\"motorbike\">Motorbike</option>\n                <option value=\"van\">Van</option>\n              </select>\n              {formik.errors.vehicle && (\n                <p className=\"formInputError\"> {formik.errors.vehicle} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">Preferred Contact</p>\n              <textarea\n                type=\"text\"\n                name=\"preferredContact\"\n                rows=\"3\"\n                placeholder=\"Enter preferred contact\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.preferredContact}\n              />\n              {formik.errors.preferredContact && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.preferredContact}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formRow\">\n              <div className=\"formGroup\">\n                <p className=\"formGroupHeader\">\n                  City <span className=\"red\">*</span>{\" \"}\n                </p>\n                <input\n                  autoComplete=\"address-level2\"\n                  type=\"text\"\n                  name=\"city\"\n                  placeholder=\"Enter city\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.city}\n                />\n                {formik.errors.city && (\n                  <p className=\"formInputError\"> {formik.errors.city} </p>\n                )}\n              </div>\n\n              <div className=\"formGroup\">\n                <p className=\"formGroupHeader\">\n                  Country <span className=\"red\">*</span>{\" \"}\n                </p>\n                <input\n                  autoComplete=\"country-name\"\n                  type=\"text\"\n                  name=\"country\"\n                  placeholder=\"Enter Country\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.country}\n                />\n                {formik.errors.country && (\n                  <p className=\"formInputError\"> {formik.errors.country} </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Skills <span className=\"red\">*</span>{\" \"}\n              </p>\n              <SkillsSelection\n                selectedSkills={formik.values.skills}\n                setFieldValue={formik.setFieldValue}\n              />\n              {formik.errors.skills && (\n                <p className=\"formInputError\"> {formik.errors.skills} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Select what Interests you <span className=\"red\">*</span>{\" \"}\n              </p>\n              <CategoryBadgeOptionsForm\n                fieldName=\"interests\"\n                setFieldValue={formik.setFieldValue}\n                options={formik.values.interests}\n              />\n              {formik.errors.interests && (\n                <p className=\"formInputError\"> {formik.errors.interests} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                What languages can you speak? <span className=\"red\">*</span>{\" \"}\n              </p>\n              <SelectBadgeOptionsForm\n                fieldName=\"languages\"\n                setFieldValue={formik.setFieldValue}\n                options={formik.values.languages}\n                baseOptions={listOfLanguages}\n              />\n              {formik.errors.languages && (\n                <p className=\"formInputError\"> {formik.errors.languages} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <div className=\"formGroupCheckBox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"isPrivate\"\n                  id=\"formCheckbox\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.isPrivate}\n                />\n                <p className=\"agreedTo\">\n                  Do you want your profile to be private?\n                </p>\n              </div>\n            </div>\n\n            <div className=\"formGroup\">\n              <div className=\"formGroupCheckBox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"agreedToTerms\"\n                  id=\"formCheckbox\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.agreedToTerms}\n                />\n                <p className=\"agreedTo\">\n                  {\" \"}\n                  Agreed to{\" \"}\n                  <Link to=\"/termsandconditions\" target=\"_blank\">\n                    {\" \"}\n                    Terms & Conditions{\" \"}\n                  </Link>\n                </p>\n              </div>\n              {formik.errors.agreedToTerms && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.agreedToTerms}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formButtons\">\n              <button\n                className=\"standardButtonWithoutColour mcGreenBG\"\n                type=\"submit\"\n                disabled={loading}\n                style={{ marginRight: \"8px\" }}\n              >\n                {loading ? (\n                  <LoadingSpinner\n                    size=\"1x\"\n                    style={{ marginRight: \"8px\", minHeight: \"unset\" }}\n                  />\n                ) : (\n                  \"Create Volunteer\"\n                )}\n              </button>\n              <button\n                type=\"button\"\n                className=\"standardButton redVersion\"\n                onClick={formik.resetForm}\n                disabled={loading}\n              >\n                Reset\n              </button>\n            </div>\n\n            {success && (\n              <p className=\"successReply\"> Volunteer sign up successfull. </p>\n            )}\n\n            {hasErrors && <ErrorComponent signUpError={signUpError} />}\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst ErrorComponent = (props) => {\n  if (props.signUpError === 200) {\n    return (\n      <>\n        <br />\n        <p className=\"redError\">\n          {\" \"}\n          This email is already in use. Please use a different one\n        </p>\n      </>\n    );\n  } else {\n    return (\n      <>\n        <br />\n        <p className=\"redError\">\n          {\" \"}\n          An error has occured please try again later or email support.\n        </p>\n      </>\n    );\n  }\n};\n\nconst MapStateToProps = (state) => ({\n  loading: state.signUp.loading,\n  success: state.signUp.success,\n  signUpError: state.signUp.error,\n  hasErrors: state.signUp.hasErrors,\n  auth: state.auth.auth,\n});\n\nexport default connect(MapStateToProps)(CreateUserVolunteerForm);\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/volunteer/createVolunteerForm.component.js",["1058","1059","1060"],"import React, { useState, useMemo } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { useFormik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport SelectMap from \"../selectMap.component\";\nimport Dropzone, { useDropzone } from \"react-dropzone\";\nimport {\n  baseStyle,\n  acceptStyle,\n  activeStyle,\n  rejectStyle,\n} from \"../../utilities/dropzoneStyles\";\nimport Thumb from \"../../utilities/thumb.component\";\nimport LoadingSpinner from \"../../utilities/loadingSpinner.component\";\nimport SkillsSelection from \"../../sharedComponents/skillsSelection.component\";\nimport {\n  SelectBadgeOptionsForm,\n  CategoryBadgeOptionsForm,\n} from \"../../sharedComponents/selectBadgeOptions.component\";\nimport { listOfLanguages } from \"../../utilities/dataOptions.component\";\n\nimport {\n  creatingVolunteer,\n  createVolunteerReset,\n} from \"../../../Actions/volunteerActions\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHandsHelping } from \"@fortawesome/pro-solid-svg-icons\";\n\nconst validationSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .required(\"*First name is required\")\n    .max(100, \"*First name must be less than 100 charachters\"),\n  lastName: Yup.string()\n    .required(\"*Last name is required\")\n    .max(100, \"*Last name must be less than 100 charachters\"),\n  email: Yup.string()\n    .required(\"*Email is required\")\n    .email(\"*Must be a valid email\")\n    .max(100, \"*Email must be less than 100 charachters\"),\n  cnic: Yup.string().matches(\n    /^(\\d{13})?$|[0-9]{12}-[0-9]{1}$|[0-9]{5}-[0-9]{7}-[0-9]{1}$|[0-9]{6}-[0-9]{6}-[0-9]{1}$/,\n    \"*This is not a valid CNIC, make sure it is in this format: 1234567891234 or 12345-1234567-1 or 123456-123456-1\"\n  ),\n  dob: Yup.date().required(\"*Date of birth is required\"),\n  gender: Yup.string().required(\"*Please select a gender\"),\n  about: Yup.string()\n    .required(\"*About is required\")\n    .max(1000, \"*About must be less than 1000 charachters\"),\n  contactNumber: Yup.string()\n    .required(\"*Number is required\")\n    .min(7, \"*Number must be longer than 7 charachters\")\n    .max(14, \"*Number must be less than 14 charachters\"),\n  educationLevel: Yup.string().required(\"*Education is required\"),\n  employmentStatus: Yup.string().required(\"*Employment is required\"),\n  city: Yup.string()\n    .required(\"*City is required\")\n    .min(1, \"*City name must be longer than 1 charachter\")\n    .max(50, \"*City name must be less than 50 charachters\"),\n  country: Yup.string()\n    .required(\"*Country is required\")\n    .min(1, \"*Country name must be longer than 1 charachter\")\n    .max(60, \"*Country name must be less than 60 charachters\"),\n  languages: Yup.array().min(1, \"*Please select at least one language\"),\n  skills: Yup.array().min(1, \"*Please select at least one skill\"),\n  interests: Yup.array().min(1, \"*Please select at least one interest\"),\n  agreedToTerms: Yup.bool().oneOf([true], \"*Must accept terms and conditions\"),\n});\n\nconst CreateVolunteerForm = ({\n  dispatch,\n  hasErrors,\n  loading,\n  success,\n  auth,\n  user,\n}) => {\n  const [imageFiles, setImageFiles] = useState([]);\n  const [rejectedFilesState, setRejectedFilesState] = useState([]);\n  const { isDragActive, isDragAccept, isDragReject } = useDropzone({\n    accept: \"image/jpeg, image/png, image/jpg, image/gif\",\n    maxSize: 2000000,\n  });\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {}),\n    }),\n    [isDragActive, isDragReject]\n  );\n\n  const formik = useFormik({\n    initialValues: {\n      firstName: user.firstname,\n      lastName: user.lastname,\n      email: user.email,\n      cnic: user.cnic,\n      image: null,\n      dob: new Date(),\n      gender: \"\",\n      about: \"\",\n      contactNumber: user.mobile,\n      educationLevel: \"primary\",\n      employmentStatus: \"STUDENT\",\n      disability: \"\",\n      languages: [],\n      haveSmartPhone: false,\n      vehicle: \"none\",\n      preferredContact: \"\",\n      country: user.address ? user.address.country : \"\",\n      city: user.address ? user.address.city : \"\",\n      skills: [],\n      interests: [],\n      isPrivate: false,\n      agreedToTerms: false,\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values) => {\n      const data = {\n        firstName: values.firstName,\n        lastName: values.lastName,\n        email: values.email,\n        cnic: values.cnic,\n        image: values.image,\n        dob: values.dob,\n        gender: values.gender,\n        about: values.about,\n        contactNumber: values.contactNumber,\n        educationLevel: values.educationLevel,\n        employmentStatus: values.employmentStatus,\n        disability: values.disability,\n        languages: values.languages,\n        haveSmartPhone: values.haveSmartPhone,\n        vehicle: values.vehicle,\n        preferredContact: values.preferredContact,\n        city: values.city,\n        country: values.country,\n        skills: values.skills,\n        interests: values.interests,\n        isPrivate: values.isPrivate,\n      };\n      dispatch(creatingVolunteer(data));\n      // alert(JSON.stringify(data))\n    },\n  });\n\n  if (!auth) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n  if (success) {\n    dispatch(createVolunteerReset());\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <div className=\"formCardContainer\">\n      <div className=\"standardForm\">\n        <form noValidate onSubmit={formik.handleSubmit}>\n          <div className=\"formMainHeader\">\n            <FontAwesomeIcon icon={faHandsHelping} size=\"2x\" />\n            <h2> Volunteer Sign Up </h2>\n          </div>\n          <div className=\"formMainBody\">\n            <div className=\"formRow\">\n              <div className=\"formGroup\">\n                <p className=\"formGroupHeader\">\n                  First Name <span className=\"red\">*</span>{\" \"}\n                </p>\n                <input\n                  autoFocus\n                  autoComplete=\"given-name\"\n                  type=\"text\"\n                  name=\"firstName\"\n                  placeholder=\"Enter first name\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.firstName}\n                />\n                {formik.errors.firstName && (\n                  <p className=\"formInputError\"> {formik.errors.firstName} </p>\n                )}\n              </div>\n\n              <div className=\"formGroup\">\n                <p className=\"formGroupHeader\">\n                  Last Name <span className=\"red\">*</span>{\" \"}\n                </p>\n                <input\n                  autoComplete=\"family-name\"\n                  type=\"text\"\n                  name=\"lastName\"\n                  placeholder=\"Enter last name\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.lastName}\n                />\n                {formik.errors.lastName && (\n                  <p className=\"formInputError\"> {formik.errors.lastName} </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Email <span className=\"red\">*</span>{\" \"}\n              </p>\n              <input\n                autoComplete=\"email\"\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter email\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.email}\n              />\n              {formik.errors.email && (\n                <p className=\"formInputError\"> {formik.errors.email} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">CNIC Number</p>\n              <input\n                type=\"text\"\n                name=\"cnic\"\n                placeholder=\"Enter CNIC\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.cnic}\n              />\n              {formik.errors.cnic && (\n                <p className=\"formInputError\"> {formik.errors.cnic} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Profile Picture (Under 1mb, file must have extension of either\n                .jpg, .jpeg or .png)\n              </p>\n              <Dropzone\n                accept=\"image/jpeg, image/png, image/jpg, image/gif\"\n                maxSize={11000000}\n                onDropRejected={(rejectedFiles) => {\n                  console.log(\"rejected\");\n                  setRejectedFilesState(rejectedFiles);\n                }}\n                onDrop={(acceptedFiles, rejectedFiles) => {\n                  if (rejectedFiles.length === 0) {\n                    setRejectedFilesState([]);\n                  }\n                  if (acceptedFiles.length !== 1) {\n                    setRejectedFilesState(acceptedFiles);\n                    return;\n                  }\n                  setImageFiles(acceptedFiles);\n                  formik.setFieldValue(\"image\", acceptedFiles[0]);\n                }}\n              >\n                {({ getRootProps, getInputProps }) => (\n                  <>\n                    <div {...getRootProps({ style })}>\n                      <input {...getInputProps()} />\n                      <p>\n                        Drag 'n' drop your image here, or click to select image\n                      </p>\n                      <div className=\"thumbnailRow\">\n                        {imageFiles.map((file) => {\n                          return <Thumb file={file} key={file.name} />;\n                        })}\n                      </div>\n                    </div>\n                    {rejectedFilesState.length === 0 ? null : (\n                      <p className=\"redError\">\n                        {\" \"}\n                        Some files were rejected. Make sure there is only 1\n                        image less than 1mb.{\" \"}\n                      </p>\n                    )}\n                  </>\n                )}\n              </Dropzone>\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Date of Birth <span className=\"red\">*</span>\n              </p>\n              <DatePicker\n                selected={formik.values.dob}\n                onChange={(date) => {\n                  formik.setFieldValue(\"dob\", date);\n                }}\n                name=\"dob\"\n                className=\"datePicker\"\n                maxDate={new Date()}\n                showMonthDropdown\n                showYearDropdown\n                dropdownMode=\"select\"\n              />\n              {formik.errors.dob && (\n                <p className=\"formInputError\"> {formik.errors.dob} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Gender <span className=\"red\">*</span>{\" \"}\n              </p>\n              <select\n                name=\"gender\"\n                onChange={(e) => formik.setFieldValue(\"gender\", e.target.value)}\n              >\n                <option value=\"\" disabled defaultValue>\n                  Select your gender\n                </option>\n                <option value=\"male\">Male</option>\n                <option value=\"female\">Female</option>\n                <option value=\"other\">Other</option>\n              </select>\n              {formik.errors.gender && (\n                <p className=\"formInputError\"> {formik.errors.gender} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                About Me <span className=\"red\">*</span>{\" \"}\n              </p>\n              <textarea\n                type=\"text\"\n                name=\"about\"\n                rows=\"3\"\n                placeholder=\"Enter information about yourself\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.about}\n              />\n              {formik.errors.about && (\n                <p className=\"formInputError\"> {formik.errors.about} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Mobile <span className=\"red\">*</span>{\" \"}\n              </p>\n              <input\n                autoComplete=\"tel\"\n                type=\"text\"\n                name=\"contactNumber\"\n                placeholder=\"Enter mobile number\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.contactNumber}\n              />\n              {formik.errors.contactNumber && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.contactNumber}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Highest level of Education <span className=\"red\">*</span>{\" \"}\n              </p>\n              <select\n                name=\"educationLevel\"\n                onChange={(e) =>\n                  formik.setFieldValue(\"educationLevel\", e.target.value)\n                }\n              >\n                <option value=\"\" disabled defaultValue>\n                  Select your level\n                </option>\n                <option value=\"primary\">Primary</option>\n                <option value=\"secondary\">Secondary</option>\n                <option value=\"other\">Other</option>\n              </select>\n              {formik.errors.educationLevel && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.educationLevel}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Employment Status <span className=\"red\">*</span>{\" \"}\n              </p>\n              <select\n                name=\"employmentStatus\"\n                onChange={(e) =>\n                  formik.setFieldValue(\"employmentStatus\", e.target.value)\n                }\n              >\n                <option value=\"\" disabled defaultValue>\n                  Select your status\n                </option>\n                <option value=\"STUDENT\">Student</option>\n                <option value=\"HOME-MAKER\">Home Maker</option>\n                <option value=\"PRIVATE-SECTOR\">Private Sector</option>\n                <option value=\"PUBLIC-SECTOR\">Public Sector</option>\n                <option value=\"GOVERNMENT\">Government</option>\n                <option value=\"PART-TIME\">Part Time</option>\n                <option value=\"UNEMPLOYED\">Unemployed</option>\n                <option value=\"SELF-EMPLOYED\">Self Employed</option>\n                <option value=\"RETIRED\">Retired</option>\n                <option value=\"OTHER\">other</option>\n              </select>\n              {formik.errors.employmentStatus && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.employmentStatus}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <div className=\"formGroupCheckBox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"hasDisability\"\n                  id=\"formCheckbox\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.hasDisability}\n                />\n                <p className=\"agreedTo\">Do you have a disability?</p>\n              </div>\n              {formik.values.hasDisability && (\n                <div>\n                  <p className=\"formGroupHeader\">What is your disability? </p>\n                  <input\n                    type=\"text\"\n                    name=\"disability\"\n                    placeholder=\"Enter you disability\"\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                    value={formik.values.disability}\n                  />\n                  {formik.errors.disability && (\n                    <p className=\"formInputError\">\n                      {\" \"}\n                      {formik.errors.disability}{\" \"}\n                    </p>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <div className=\"formGroupCheckBox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"haveSmartPhone\"\n                  id=\"formCheckbox\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.haveSmartPhone}\n                />\n                <p className=\"agreedTo\">Do you have a smart phone?</p>\n              </div>\n              {formik.errors.haveSmartPhone && (\n                <p className=\"formInputError\">{formik.errors.haveSmartPhone}</p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Do you have a vehicle? <span className=\"red\">*</span>{\" \"}\n              </p>\n              <select\n                name=\"vehicle\"\n                onChange={(e) =>\n                  formik.setFieldValue(\"vehicle\", e.target.value)\n                }\n              >\n                <option value=\"blank\" disabled defaultValue>\n                  Choose an option\n                </option>\n                <option value=\"none\">No</option>\n                <option value=\"car\">Car</option>\n                <option value=\"motorbike\">Motorbike</option>\n                <option value=\"van\">Van</option>\n              </select>\n              {formik.errors.vehicle && (\n                <p className=\"formInputError\"> {formik.errors.vehicle} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">Preferred Contact</p>\n              <textarea\n                type=\"text\"\n                name=\"preferredContact\"\n                rows=\"3\"\n                placeholder=\"Enter preferred contact\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.preferredContact}\n              />\n              {formik.errors.preferredContact && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.preferredContact}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formRow\">\n              <div className=\"formGroup\">\n                <p className=\"formGroupHeader\">\n                  City <span className=\"red\">*</span>{\" \"}\n                </p>\n                <input\n                  autoComplete=\"address-level2\"\n                  type=\"text\"\n                  name=\"city\"\n                  placeholder=\"Enter city\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.city}\n                />\n                {formik.errors.city && (\n                  <p className=\"formInputError\"> {formik.errors.city} </p>\n                )}\n              </div>\n\n              <div className=\"formGroup\">\n                <p className=\"formGroupHeader\">\n                  Country <span className=\"red\">*</span>{\" \"}\n                </p>\n                <input\n                  autoComplete=\"country-name\"\n                  type=\"text\"\n                  name=\"country\"\n                  placeholder=\"Enter Country\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.country}\n                />\n                {formik.errors.country && (\n                  <p className=\"formInputError\"> {formik.errors.country} </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Skills <span className=\"red\">*</span>{\" \"}\n              </p>\n              <SkillsSelection\n                selectedSkills={formik.values.skills}\n                setFieldValue={formik.setFieldValue}\n              />\n              {formik.errors.skills && (\n                <p className=\"formInputError\"> {formik.errors.skills} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Select what Interests you <span className=\"red\">*</span>{\" \"}\n              </p>\n              <CategoryBadgeOptionsForm\n                fieldName=\"interests\"\n                setFieldValue={formik.setFieldValue}\n                options={formik.values.interests}\n              />\n              {formik.errors.interests && (\n                <p className=\"formInputError\"> {formik.errors.interests} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                What languages can you speak? <span className=\"red\">*</span>{\" \"}\n              </p>\n              <SelectBadgeOptionsForm\n                fieldName=\"languages\"\n                setFieldValue={formik.setFieldValue}\n                options={formik.values.languages}\n                baseOptions={listOfLanguages}\n              />\n              {formik.errors.languages && (\n                <p className=\"formInputError\"> {formik.errors.languages} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <div className=\"formGroupCheckBox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"isPrivate\"\n                  id=\"formCheckbox\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.isPrivate}\n                />\n                <p className=\"agreedTo\">\n                  Do you want your profile to be private?\n                </p>\n              </div>\n            </div>\n\n            <div className=\"formGroup\">\n              <div className=\"formGroupCheckBox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"agreedToTerms\"\n                  id=\"formCheckbox\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.agreedToTerms}\n                />\n                <p className=\"agreedTo\">\n                  {\" \"}\n                  Agreed to{\" \"}\n                  <Link to=\"/termsandconditions\" target=\"_blank\">\n                    {\" \"}\n                    Terms & Conditions{\" \"}\n                  </Link>\n                </p>\n              </div>\n              {formik.errors.agreedToTerms && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.agreedToTerms}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formButtons\">\n              <button\n                className=\"standardButtonWithoutColour mcGreenBG\"\n                type=\"submit\"\n                disabled={loading}\n                style={{ marginRight: \"8px\" }}\n              >\n                {loading ? (\n                  <LoadingSpinner\n                    size=\"1x\"\n                    style={{ marginRight: \"8px\", minHeight: \"unset\" }}\n                  />\n                ) : (\n                  \"Create Volunteer\"\n                )}\n              </button>\n              <button\n                type=\"button\"\n                className=\"standardButton redVersion\"\n                onClick={formik.resetForm}\n                disabled={loading}\n              >\n                Reset\n              </button>\n            </div>\n\n            {success && (\n              <p className=\"successReply\"> Volunteer sign up successful. </p>\n            )}\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nconst MapStateToProps = (state) => ({\n  loading: state.signUp.loading,\n  success: state.signUp.success,\n  hasErrors: state.signUp.hasErrors,\n  auth: state.auth.auth,\n  user: state.userInfo.user,\n});\n\nexport default connect(MapStateToProps)(CreateVolunteerForm);\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/cnicSearch.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/tabComponent.js",["1061"],"import React, { useEffect, createRef, useRef } from 'react'\nimport { useTabState } from '@bumaga/tabs'\n\n\nexport const Tab = ({ children, tabType, addClass, passedOnClick }) => {\n  const { isActive, onClick } = useTabState()\n  const cn = (...args) => args.filter(Boolean).join(' ')\n  const ref = createRef()\n  const isMounted = useRef(false)\n\n  useEffect(() => {\n    if (isMounted.current) {\n      window.scrollTo(0, ref.current.offsetTop - 10)\n    } else {\n      isMounted.current = true;\n    }\n  }, [isActive])\n\n  return (\n    <button ref={ref} className={cn(tabType, isActive && 'active') + ' icon ' + cn(addClass, isActive && 'active')} onClick={() => {\n      onClick()\n      if (passedOnClick) passedOnClick()\n     }}>\n      {children}\n    </button>\n  )\n}\n\nexport const TabCnic = ({ children }) => {\n  const { isActive, onClick } = useTabState()\n  const cn = (...args) => args.filter(Boolean).join(' ')\n\n  return (\n    <button className={cn('cnicTab', isActive && 'active') + ' icon '} onClick={onClick}>\n      {children}\n    </button>\n  )\n}","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/signedUpMessage.component.js",["1062"],"import React, { useEffect } from 'react';\nimport { signupReset } from '../../Actions/signUpActions';\n\n\nconst SignedUpMessage = ({ props, dispatch, success }) => {\n  useEffect(() => {\n    return function cleanup() {\n      dispatch(signupReset())\n    }\n  }, [success])\n\n  return (\n    <div className=\"userSignupWelcomeMessageContainer\">\n      <div className=\"userSignupWelcomeMessage\">\n        <h1> Congratulations! </h1>\n        <p>\n          You are now a member of Ministry of Change. We welcome you to our family of changemakers. You can now create an organisation, create a project, map your impact or create a group.\n        </p>\n        <p>\n          You can now go to the dashboard to manage your account and create your organisation or group. They will show up for everyone else once you have been approved by our admins.\n        </p>\n        <p>\n          Please also verify your email as you will not be able to perform any actions until it has been verified.\n        </p>\n        <button className=\"standardButton\" onClick={() => {\n          props.history.push('/dashboard')\n        }} > Go to Dashboard </button>\n      </div>\n    </div>\n  )\n}\n\nexport default SignedUpMessage","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/cnicAddNew.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/thumb.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/update/updateMap.component.js",["1063"],"import React, { Component, Fragment } from \"react\";\nimport { MAPBOX_API_KEY } from '../../config';\nimport mapboxgl from 'react-mapbox-gl';\nimport ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport * as markers from '../../assets/svg.js';\n// import Geocoder from './Geocoder.component';\nimport '../../css/map.css';\n\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport * as MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\n\nmapboxgl.accessToken = MAPBOX_API_KEY\n\nconst Map = ReactMapboxGl({\n  accessToken: MAPBOX_API_KEY\n});\n\n\nconst layoutLayer = {\n  'icon-image': 'marker'\n}\n\nconst flyToOptions = {\n  speed: 1\n}\n\nconst image = new Image();\nimage.src = 'data:image/svg+xml;charset=utf-8;base64,'+btoa(markers.markerDuotone);\nconst images = ['marker', image]\n\nconst startingBounds = [[78.7393, 37.2946], [59.9632, 23.5181]];\n\nclass UpdateMap extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      center: [69.3451, 30.3753],\n      zoom: [4.7],\n      selectedPoint: props.location.coordinates,\n      geocoderAdded: false\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n      {/* <input className=\"dontShow\" name=\"location\" id=\"location\"/> */}\n      <Map\n        style='mapbox://styles/daniyaalbeg/ck8xf05we46ts1ipm9zqkoyya'\n        containerStyle={{\n          height: '300px',\n          width: '100%',\n          borderRadius: '5px',\n        }}\n        onClick={ (stuff, e) => {\n          this.setState({\n           location: e.lngLat,\n           center: e.lngLat,\n           selectedPoint: [e.lngLat.lng, e.lngLat.lat]\n          })\n          this.props.callBack([this.state.location.lng, this.state.location.lat])\n        }}\n        fitBounds={startingBounds}\n        center={this.state.center}\n        zoom={this.state.zoom}\n        onDrag={this.onDrag}\n        flyToOptions={flyToOptions}\n        onStyleLoad={(map) => {\n          map.addControl(\n            new MapboxGeocoder({\n              accessToken: MAPBOX_API_KEY,\n              mapboxgl: map,\n              countries: 'pk'\n            })\n          )\n        }}\n      >\n        <Layer type=\"symbol\" id=\"marker\" layout={layoutLayer} images={images} >\n          {this.state.selectedPoint.length !== 0 &&\n            <Feature\n              key={'clickedMarker'}\n              coordinates={this.state.selectedPoint}\n            />\n          }\n        </Layer>\n        {/* <Geocoder /> */}\n      </Map>\n      </Fragment>\n    )\n  }\n}\n\nexport default UpdateMap","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/Checkboxs.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/dropzoneStyles.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/update/updateVolunteerProfileForm.component.js",["1064","1065","1066"],"import React, { useState, useMemo } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Link, Redirect } from \"react-router-dom\";\nimport { useFormik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport DatePicker from \"react-datepicker\";\nimport Dropzone, { useDropzone } from \"react-dropzone\";\nimport {\n  baseStyle,\n  acceptStyle,\n  activeStyle,\n  rejectStyle,\n} from \"../utilities/dropzoneStyles\";\nimport Thumb from \"../utilities/thumb.component\";\nimport LoadingSpinner from \"../utilities/loadingSpinner.component\";\nimport SkillsSelection from \"../sharedComponents/skillsSelection.component\";\nimport {\n  SelectBadgeOptionsForm,\n  CategoryBadgeOptionsForm,\n} from \"../sharedComponents/selectBadgeOptions.component\";\nimport { listOfLanguages } from \"../utilities/dataOptions.component\";\n\nimport {\n  updatingVolunteer,\n  updateVolunteerReset,\n} from \"../../Actions/volunteerActions\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faHandsHelping } from \"@fortawesome/pro-solid-svg-icons\";\n\nconst validationSchema = Yup.object().shape({\n  firstName: Yup.string()\n    .required(\"*First name is required\")\n    .max(100, \"*First name must be less than 100 charachters\"),\n  lastName: Yup.string()\n    .required(\"*Last name is required\")\n    .max(100, \"*Last name must be less than 100 charachters\"),\n  email: Yup.string()\n    .required(\"*Email is required\")\n    .email(\"*Must be a valid email\")\n    .max(100, \"*Email must be less than 100 charachters\"),\n  cnic: Yup.string().matches(\n    /^(\\d{13})?$|[0-9]{12}-[0-9]{1}$|[0-9]{5}-[0-9]{7}-[0-9]{1}$|[0-9]{6}-[0-9]{6}-[0-9]{1}$/,\n    \"*This is not a valid CNIC, make sure it is in this format: 1234567891234 or 12345-1234567-1 or 123456-123456-1\"\n  ),\n  dob: Yup.date().required(\"*Date of birth is required\"),\n  gender: Yup.string().required(\"*Please select a gender\"),\n  about: Yup.string()\n    .required(\"*About is required\")\n    .max(1000, \"*About must be less than 1000 charachters\"),\n  contactNumber: Yup.string()\n    .required(\"*Number is required\")\n    .min(7, \"*Number must be longer than 7 charachters\")\n    .max(14, \"*Number must be less than 14 charachters\"),\n  educationLevel: Yup.string().required(\"*Education is required\"),\n  employmentStatus: Yup.string().required(\"*Employment is required\"),\n  city: Yup.string()\n    .required(\"*City is required\")\n    .min(1, \"*City name must be longer than 1 charachter\")\n    .max(50, \"*City name must be less than 50 charachters\"),\n  country: Yup.string()\n    .required(\"*Country is required\")\n    .min(1, \"*Country name must be longer than 1 charachter\")\n    .max(60, \"*Country name must be less than 60 charachters\"),\n  languages: Yup.array().min(1, \"*Please select at least one language\"),\n  skills: Yup.array().min(1, \"*Please select at least one skill\"),\n  interests: Yup.array().min(1, \"*Please select at least one interest\"),\n  agreedToTerms: Yup.bool().oneOf([true], \"*Must accept terms and conditions\"),\n});\n\nconst UpdateVolunteerProfileForm = ({\n  dispatch,\n  hasErrors,\n  loading,\n  success,\n  auth,\n  userDict,\n  userID,\n}) => {\n  const [imageFiles, setImageFiles] = useState([]);\n  const [didUploadNewImage, setDidUploadNewImage] = useState(false);\n  const [rejectedFilesState, setRejectedFilesState] = useState([]);\n  const { isDragActive, isDragAccept, isDragReject } = useDropzone({\n    accept: \"image/jpeg, image/png, image/jpg, image/gif\",\n    maxSize: 2000000,\n  });\n  const style = useMemo(\n    () => ({\n      ...baseStyle,\n      ...(isDragActive ? activeStyle : {}),\n      ...(isDragAccept ? acceptStyle : {}),\n      ...(isDragReject ? rejectStyle : {}),\n    }),\n    [isDragActive, isDragReject]\n  );\n\n  const user = userDict[userID];\n\n  const formik = useFormik({\n    initialValues: {\n      firstName: user.volunteer.firstName,\n      lastName: user.volunteer.lastName,\n      email: user.volunteer.email,\n      cnic: user.volunteer.cnic,\n      image: user.volunteer.image,\n      dob: new Date(user.volunteer.dob),\n      gender: user.volunteer.gender,\n      about: user.volunteer.about,\n      contactNumber: user.volunteer.contactNumber,\n      educationLevel: user.volunteer.educationLevel,\n      employmentStatus: user.volunteer.employmentStatus,\n      disability: user.volunteer.disability,\n      languages: user.volunteer.languages,\n      haveSmartPhone: user.volunteer.haveSmartPhone,\n      vehicle: user.volunteer.vehicle,\n      preferredContact: user.volunteer.preferredContact,\n      country: user.volunteer.country,\n      city: user.volunteer.city,\n      skills: user.volunteer.skills,\n      interests: user.volunteer.interests,\n      isPrivate: user.volunteer.isPrivate,\n      agreedToTerms: false,\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values) => {\n      const data = {\n        firstName: values.firstName,\n        lastName: values.lastName,\n        email: values.email,\n        cnic: values.cnic,\n        image: values.image,\n        dob: values.dob,\n        gender: values.gender,\n        about: values.about,\n        contactNumber: values.contactNumber,\n        educationLevel: values.educationLevel,\n        employmentStatus: values.employmentStatus,\n        disability: values.disability,\n        languages: values.languages,\n        haveSmartPhone: values.haveSmartPhone,\n        vehicle: values.vehicle,\n        preferredContact: values.preferredContact,\n        city: values.city,\n        country: values.country,\n        skills: values.skills,\n        interests: values.interests,\n        isPrivate: values.isPrivate,\n      };\n      dispatch(updatingVolunteer(data, didUploadNewImage));\n      // alert(JSON.stringify(data))\n    },\n  });\n\n  if (!auth || !user || !user.volunteer) {\n    return <Redirect to=\"/dashboard\" />;\n  }\n  if (success) {\n    dispatch(updateVolunteerReset());\n    return <Redirect to=\"/dashboard\" />;\n  }\n\n  return (\n    <div className=\"formCardContainer\">\n      <div className=\"standardForm\">\n        <form noValidate onSubmit={formik.handleSubmit}>\n          <div className=\"formMainHeader\">\n            <FontAwesomeIcon icon={faHandsHelping} size=\"2x\" />\n            <h2> Volunteer Update </h2>\n          </div>\n          <div className=\"formMainBody\">\n            <div className=\"formRow\">\n              <div className=\"formGroup\">\n                <p className=\"formGroupHeader\">\n                  First Name <span className=\"red\">*</span>{\" \"}\n                </p>\n                <input\n                  autoFocus\n                  autoComplete=\"given-name\"\n                  type=\"text\"\n                  name=\"firstName\"\n                  placeholder=\"Enter first name\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.firstName}\n                />\n                {formik.errors.firstName && (\n                  <p className=\"formInputError\"> {formik.errors.firstName} </p>\n                )}\n              </div>\n\n              <div className=\"formGroup\">\n                <p className=\"formGroupHeader\">\n                  Last Name <span className=\"red\">*</span>{\" \"}\n                </p>\n                <input\n                  autoComplete=\"family-name\"\n                  type=\"text\"\n                  name=\"lastName\"\n                  placeholder=\"Enter last name\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.lastName}\n                />\n                {formik.errors.lastName && (\n                  <p className=\"formInputError\"> {formik.errors.lastName} </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Email <span className=\"red\">*</span>{\" \"}\n              </p>\n              <input\n                autoComplete=\"email\"\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter email\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.email}\n              />\n              {formik.errors.email && (\n                <p className=\"formInputError\"> {formik.errors.email} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">CNIC Number</p>\n              <input\n                type=\"text\"\n                name=\"cnic\"\n                placeholder=\"Enter CNIC\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.cnic}\n              />\n              {formik.errors.cnic && (\n                <p className=\"formInputError\"> {formik.errors.cnic} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Profile Picture (Under 1mb, file must have extension of either\n                .jpg, .jpeg or .png)\n              </p>\n              <Dropzone\n                accept=\"image/jpeg, image/png, image/jpg, image/gif\"\n                maxSize={11000000}\n                onDropRejected={(rejectedFiles) => {\n                  console.log(\"rejected\");\n                  setRejectedFilesState(rejectedFiles);\n                }}\n                onDrop={(acceptedFiles, rejectedFiles) => {\n                  if (rejectedFiles.length === 0) {\n                    setRejectedFilesState([]);\n                  }\n                  if (acceptedFiles.length !== 1) {\n                    setRejectedFilesState(acceptedFiles);\n                    return;\n                  }\n                  setDidUploadNewImage(true);\n                  setImageFiles(acceptedFiles);\n                  formik.setFieldValue(\"image\", acceptedFiles[0]);\n                }}\n              >\n                {({ getRootProps, getInputProps }) => (\n                  <>\n                    <div {...getRootProps({ style })}>\n                      <input {...getInputProps()} />\n                      <p>\n                        Drag 'n' drop your image here, or click to select image\n                      </p>\n                      <div className=\"thumbnailRow\">\n                        {imageFiles.map((file) => {\n                          return <Thumb file={file} key={file.name} />;\n                        })}\n                      </div>\n                    </div>\n                    {rejectedFilesState.length === 0 ? null : (\n                      <p className=\"redError\">\n                        {\" \"}\n                        Some files were rejected. Make sure there is only 1\n                        image less than 1mb.{\" \"}\n                      </p>\n                    )}\n                  </>\n                )}\n              </Dropzone>\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Date of Birth <span className=\"red\">*</span>\n              </p>\n              <DatePicker\n                selected={formik.values.dob}\n                onChange={(date) => {\n                  formik.setFieldValue(\"dob\", date);\n                }}\n                name=\"dob\"\n                className=\"datePicker\"\n                // maxDate={new Date()}\n                showMonthDropdown\n                showYearDropdown\n                dropdownMode=\"select\"\n              />\n              {formik.errors.dob && (\n                <p className=\"formInputError\"> {formik.errors.dob} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Gender <span className=\"red\">*</span>{\" \"}\n              </p>\n              <select\n                name=\"gender\"\n                onChange={(e) => formik.setFieldValue(\"gender\", e.target.value)}\n              >\n                <option value=\"\" disabled defaultValue>\n                  Select your gender\n                </option>\n                <option value=\"male\">Male</option>\n                <option value=\"female\">Female</option>\n                <option value=\"other\">Other</option>\n              </select>\n              {formik.errors.gender && (\n                <p className=\"formInputError\"> {formik.errors.gender} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                About Me <span className=\"red\">*</span>{\" \"}\n              </p>\n              <textarea\n                type=\"text\"\n                name=\"about\"\n                rows=\"3\"\n                placeholder=\"Enter information about yourself\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.about}\n              />\n              {formik.errors.about && (\n                <p className=\"formInputError\"> {formik.errors.about} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Mobile <span className=\"red\">*</span>{\" \"}\n              </p>\n              <input\n                autoComplete=\"tel\"\n                type=\"text\"\n                name=\"contactNumber\"\n                placeholder=\"Enter mobile number\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.contactNumber}\n              />\n              {formik.errors.contactNumber && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.contactNumber}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Highest level of Education <span className=\"red\">*</span>{\" \"}\n              </p>\n              <select\n                name=\"educationLevel\"\n                onChange={(e) =>\n                  formik.setFieldValue(\"educationLevel\", e.target.value)\n                }\n              >\n                <option value=\"\" disabled defaultValue>\n                  Select your level\n                </option>\n                <option value=\"primary\">Primary</option>\n                <option value=\"secondary\">Secondary</option>\n                <option value=\"other\">Other</option>\n              </select>\n              {formik.errors.educationLevel && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.educationLevel}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Employment Status <span className=\"red\">*</span>{\" \"}\n              </p>\n              <select\n                name=\"employmentStatus\"\n                onChange={(e) =>\n                  formik.setFieldValue(\"employmentStatus\", e.target.value)\n                }\n              >\n                <option value=\"\" disabled defaultValue>\n                  Select your status\n                </option>\n                <option value=\"STUDENT\">Student</option>\n                <option value=\"HOME-MAKER\">Home Maker</option>\n                <option value=\"PRIVATE-SECTOR\">Private Sector</option>\n                <option value=\"PUBLIC-SECTOR\">Public Sector</option>\n                <option value=\"GOVERNMENT\">Government</option>\n                <option value=\"PART-TIME\">Part Time</option>\n                <option value=\"UNEMPLOYED\">Unemployed</option>\n                <option value=\"SELF-EMPLOYED\">Self Employed</option>\n                <option value=\"RETIRED\">Retired</option>\n                <option value=\"OTHER\">other</option>\n              </select>\n              {formik.errors.employmentStatus && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.employmentStatus}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <div className=\"formGroupCheckBox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"hasDisability\"\n                  id=\"formCheckbox\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.hasDisability}\n                />\n                <p className=\"agreedTo\">Do you have a disability?</p>\n              </div>\n              {formik.values.hasDisability && (\n                <div>\n                  <p className=\"formGroupHeader\">What is your disability? </p>\n                  <input\n                    type=\"text\"\n                    name=\"disability\"\n                    placeholder=\"Enter you disability\"\n                    onChange={formik.handleChange}\n                    onBlur={formik.handleBlur}\n                    value={formik.values.disability}\n                  />\n                  {formik.errors.disability && (\n                    <p className=\"formInputError\">\n                      {\" \"}\n                      {formik.errors.disability}{\" \"}\n                    </p>\n                  )}\n                </div>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <div className=\"formGroupCheckBox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"haveSmartPhone\"\n                  id=\"formCheckbox\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.haveSmartPhone}\n                />\n                <p className=\"agreedTo\">Do you have a smart phone?</p>\n              </div>\n              {formik.errors.haveSmartPhone && (\n                <p className=\"formInputError\">{formik.errors.haveSmartPhone}</p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Do you have a vehicle? <span className=\"red\">*</span>{\" \"}\n              </p>\n              <select\n                name=\"vehicle\"\n                onChange={(e) =>\n                  formik.setFieldValue(\"vehicle\", e.target.value)\n                }\n              >\n                <option value=\"blank\" disabled defaultValue>\n                  Choose an option\n                </option>\n                <option value=\"none\">No</option>\n                <option value=\"car\">Car</option>\n                <option value=\"motorbike\">Motorbike</option>\n                <option value=\"van\">Van</option>\n              </select>\n              {formik.errors.vehicle && (\n                <p className=\"formInputError\"> {formik.errors.vehicle} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">Preferred Contact</p>\n              <textarea\n                type=\"text\"\n                name=\"preferredContact\"\n                rows=\"3\"\n                placeholder=\"Enter preferred contact\"\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                value={formik.values.preferredContact}\n              />\n              {formik.errors.preferredContact && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.preferredContact}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formRow\">\n              <div className=\"formGroup\">\n                <p className=\"formGroupHeader\">\n                  City <span className=\"red\">*</span>{\" \"}\n                </p>\n                <input\n                  autoComplete=\"address-level2\"\n                  type=\"text\"\n                  name=\"city\"\n                  placeholder=\"Enter city\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.city}\n                />\n                {formik.errors.city && (\n                  <p className=\"formInputError\"> {formik.errors.city} </p>\n                )}\n              </div>\n\n              <div className=\"formGroup\">\n                <p className=\"formGroupHeader\">\n                  Country <span className=\"red\">*</span>{\" \"}\n                </p>\n                <input\n                  autoComplete=\"country-name\"\n                  type=\"text\"\n                  name=\"country\"\n                  placeholder=\"Enter Country\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.country}\n                />\n                {formik.errors.country && (\n                  <p className=\"formInputError\"> {formik.errors.country} </p>\n                )}\n              </div>\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Skills <span className=\"red\">*</span>{\" \"}\n              </p>\n              <SkillsSelection\n                selectedSkills={formik.values.skills}\n                setFieldValue={formik.setFieldValue}\n              />\n              {formik.errors.skills && (\n                <p className=\"formInputError\"> {formik.errors.skills} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                Select what Interests you <span className=\"red\">*</span>{\" \"}\n              </p>\n              <CategoryBadgeOptionsForm\n                fieldName=\"interests\"\n                setFieldValue={formik.setFieldValue}\n                options={formik.values.interests}\n              />\n              {formik.errors.interests && (\n                <p className=\"formInputError\"> {formik.errors.interests} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <p className=\"formGroupHeader\">\n                What languages can you speak? <span className=\"red\">*</span>{\" \"}\n              </p>\n              <SelectBadgeOptionsForm\n                fieldName=\"languages\"\n                setFieldValue={formik.setFieldValue}\n                options={formik.values.languages}\n                baseOptions={listOfLanguages}\n              />\n              {formik.errors.languages && (\n                <p className=\"formInputError\"> {formik.errors.languages} </p>\n              )}\n            </div>\n\n            <div className=\"formGroup\">\n              <div className=\"formGroupCheckBox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"isPrivate\"\n                  id=\"formCheckbox\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.isPrivate}\n                />\n                <p className=\"agreedTo\">\n                  Do you want your profile to be private?\n                </p>\n              </div>\n            </div>\n\n            <div className=\"formGroup\">\n              <div className=\"formGroupCheckBox\">\n                <input\n                  type=\"checkbox\"\n                  name=\"agreedToTerms\"\n                  id=\"formCheckbox\"\n                  onChange={formik.handleChange}\n                  onBlur={formik.handleBlur}\n                  value={formik.values.agreedToTerms}\n                />\n                <p className=\"agreedTo\">\n                  {\" \"}\n                  Agreed to{\" \"}\n                  <Link to=\"/termsandconditions\" target=\"_blank\">\n                    {\" \"}\n                    Terms & Conditions{\" \"}\n                  </Link>\n                </p>\n              </div>\n              {formik.errors.agreedToTerms && (\n                <p className=\"formInputError\">\n                  {\" \"}\n                  {formik.errors.agreedToTerms}{\" \"}\n                </p>\n              )}\n            </div>\n\n            <div className=\"formButtons\">\n              <button\n                className=\"standardButtonWithoutColour mcGreenBG\"\n                type=\"submit\"\n                disabled={loading}\n                style={{ marginRight: \"8px\" }}\n              >\n                {loading ? (\n                  <LoadingSpinner\n                    size=\"1x\"\n                    style={{ marginRight: \"8px\", minHeight: \"unset\" }}\n                  />\n                ) : (\n                  \"Update Volunteer\"\n                )}\n              </button>\n              <button\n                type=\"button\"\n                className=\"standardButton redVersion\"\n                onClick={formik.resetForm}\n                disabled={loading}\n              >\n                Reset\n              </button>\n            </div>\n\n            {success && (\n              <p className=\"successReply\"> Volunteer update successful. </p>\n            )}\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default UpdateVolunteerProfileForm;\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/iconController/iconCategories.component.js",["1067"],"import React from 'react';\n\nimport Money from '../../assets/svg/coin.svg';\nimport PPE from '../../assets/svg/mask.svg';\nimport Clothes from '../../assets/svg/shirt.svg';\nimport Food from '../../assets/svg/sack.svg'\nimport Agriculture from '../../assets/icons/Agriculture.svg'\nimport AnimalWelfare from '../../assets/icons/AnimalWelfare.svg'\nimport ArtandCulture from '../../assets/icons/ArtandCulture.svg'\nimport Community from '../../assets/icons/Community.svg'\nimport Disability from '../../assets/icons/Disability.svg'\nimport Disaster from '../../assets/icons/Disaster.svg'\nimport Education from '../../assets/icons/Education.svg'\nimport Energy from '../../assets/icons/Energy.svg'\nimport Enviroment from '../../assets/icons/Enviroment.svg'\nimport Equality from '../../assets/icons/Equality.svg'\nimport Fisheries from '../../assets/icons/Fisheries.svg'\nimport Forest from '../../assets/icons/Forest.svg'\nimport Gender from '../../assets/icons/Gender.svg'\nimport Health from '../../assets/icons/Health.svg'\nimport HigherEdu from '../../assets/icons/HigherEdu.svg'\nimport HumanRights from '../../assets/icons/HumanRights.svg'\nimport Infrastructure from '../../assets/icons/Infrastructure.svg'\nimport IT from '../../assets/icons/IT.svg'\nimport Justice from '../../assets/icons/Justice.svg'\nimport Livelihood from '../../assets/icons/Livelihood.svg'\nimport Livestock from '../../assets/icons/Livestock.svg'\nimport Motherhood from '../../assets/icons/Motherhood.svg'\nimport Peace from '../../assets/icons/Peace.svg'\nimport PovertyAlleviation from '../../assets/icons/PovertyAlleviation.svg'\nimport PrimaryEdu from '../../assets/icons/PrimaryEdu.svg'\nimport Recycling from '../../assets/icons/Recycling.svg'\nimport Religion from '../../assets/icons/Candle.svg'\nimport Sanitation from '../../assets/icons/Sanitation.svg'\nimport SecondaryEdu from '../../assets/icons/SecondaryEdu.svg'\nimport Sports from '../../assets/icons/Sports.svg'\nimport Terrorism from '../../assets/icons/Terrorism.svg'\nimport Covid from '../../assets/icons/Virus.svg'\nimport Waste from '../../assets/icons/Waste.svg'\nimport Water from '../../assets/icons/Water.svg'\nimport Youth from '../../assets/icons/Youth.svg'\nimport { faHouseReturn } from '@fortawesome/pro-solid-svg-icons';\n\nexport const listOfIcons = [\n  \"animalWelfare\",\n  \"artsAndCulture\",\n  \"clothing\",\n  \"communityDevelopment\",\n  \"disability\",\n  \"disaster\",\n  \"education\",\n  \"primary\",\n  \"secondary\",\n  \"higher\",\n  \"energy\",\n  \"environment\",\n  \"forest\",\n  \"water\",\n  \"equality\",\n  \"food\",\n  \"agriculture\",\n  \"livestock\",\n  \"fisheries\",\n  \"gender\",\n  \"health\",\n  \"motherAndChildHealth\",\n  \"humanRights\",\n  \"infrastructure\",\n  \"it\",\n  \"justice\",\n  \"livelihood\",\n  \"money\",\n  \"peace\",\n  \"ppe\",\n  \"povertyAlleviation\",\n  \"recycling\",\n  \"religion\",\n  \"sanitation\",\n  \"sports\",\n  \"terrorism\",\n  \"covid\",\n  \"waste\",\n  \"youth\"\n]\n\nexport const getSpecificIcon = () => {\n\n}\n\nexport const WhatCategoriesHomeView = () => {\n  return (\n    <>\n    {listOfIcons.map((icon) => {\n      return (\n        <div key={icon} className=\"iconContainer iconLarge\">\n          {getIcon(icon, \"iconImage growIcon\")}\n          <p className=\"hoverOn\"> {iconForText(icon)} </p>\n        </div>\n      )\n    })}\n    </>\n  )\n}\n\nexport const PrimaryCategory = ({ category }) => {\n  return (\n    <div className=\"iconContainer\">\n      {getIcon(category, \"iconImage growIcon\")}\n      <p className=\"hoverOn\"> {iconForText(category)} </p>\n    </div>\n  )\n}\n\nexport const WhatCategories = ({ types }) => {\n  return (\n    <>\n    {types.map((type) => {\n      return (\n        <div key={type} className=\"iconContainer\">\n          {getIcon(type, \"iconImage growIcon\")}\n          <p className=\"hoverOn\"> {iconForText(type)} </p>\n        </div>\n      )\n    })}\n    </>\n  )\n}\n\nexport const iconForText = (type) => {\n  switch(type) {\n    case \"animalWelfare\":\n      return \"Animal Welfare\"\n    case \"artsAndCulture\":\n      return \"Arts and Culture\"\n    case \"clothing\":\n      return \"Clothing\"\n    case \"communityDevelopment\":\n      return \"Community Development\"\n    case \"disability\":\n      return \"Disability\"\n    case \"disaster\":\n      return \"Disaster\"\n    case \"education\":\n      return \"Education\"\n    case \"primary\":\n      return \"Primary Education\"\n    case \"secondary\":\n      return \"Secondary Education\"\n    case \"higher\":\n      return \"Higher Education\"\n    case \"energy\":\n      return \"Energy\"\n    case \"environment\":\n      return \"Environment\"\n    case \"forest\":\n      return \"Forest\"\n    case \"water\":\n      return \"Water\"\n    case \"equality\":\n      return \"Equality\"\n    case \"food\":\n      return \"Food\"\n    case \"agriculture\":\n      return \"Agriculture\"\n    case \"livestock\":\n      return \"Livestock\"\n    case \"fisheries\":\n      return \"Fisheries\"\n    case \"gender\":\n      return \"Gender\"\n    case \"health\":\n      return \"Health\"\n    case \"motherAndChildHealth\":\n      return \"Mother and Child Health\"\n    case \"humanRights\":\n      return \"Human Rights\"\n    case \"infrastructure\":\n      return \"Infrastructure\"\n    case \"it\":\n      return \"IT\"\n    case \"justice\":\n      return \"Justice\"\n    case \"livelihood\":\n      return \"Livelihood\"\n    case \"money\":\n      return \"Money\"\n    case \"peace\":\n      return \"Peace\"\n    case \"ppe\":\n      return \"Protection Equipment\"\n    case \"povertyAlleviation\":\n      return \"Poverty Alleviation\"\n    case \"recycling\": \n      return \"Recycling\"\n    case \"religion\": \n      return \"Religion\"\n    case \"sanitation\":\n      return \"Sanitation\"\n    case \"sports\":\n      return \"Sports\"\n    case \"terrorism\":\n      return \"Terrorism\"\n    case \"covid\":\n      return \"Covid\"\n    case \"waste\":\n      return \"Waste\"\n    case \"youth\":\n      return \"Youth\"\n    default:\n      return \"\"\n  }\n}\n\nexport const getIcon = (type, classNames) => {\n  return <img className={classNames} src={getIconSource(type)} alt={`${iconForText(type)} Icon`} />\n}\n\nexport const getIconSource = (type) => {\n  switch(type) {\n    case \"animalWelfare\":\n      return AnimalWelfare\n    case \"artsAndCulture\":\n      return ArtandCulture\n    case \"clothing\":\n      return Clothes\n    case \"communityDevelopment\":\n      return Community\n    case \"disability\":\n      return Disability\n    case \"disaster\":\n      return Disaster\n    case \"education\":\n      return Education\n    case \"primary\":\n      return PrimaryEdu\n    case \"secondary\":\n      return SecondaryEdu\n    case \"higher\":\n      return HigherEdu\n    case \"energy\":\n      return Energy\n    case \"environment\":\n      return Enviroment\n    case \"forest\":\n      return Forest\n    case \"water\":\n      return Water\n    case \"equality\":\n      return Equality\n    case \"food\":\n      return Food\n    case \"agriculture\":\n      return Agriculture\n    case \"livestock\":\n      return Livestock\n    case \"fisheries\":\n      return Fisheries\n    case \"gender\":\n      return Gender\n    case \"health\":\n      return Health\n    case \"motherAndChildHealth\":\n      return Motherhood\n    case \"humanRights\":\n      return HumanRights\n    case \"infrastructure\":\n      return Infrastructure\n    case \"it\":\n      return IT\n    case \"justice\":\n      return Justice\n    case \"livelihood\":\n      return Livelihood\n    case \"money\":\n      return Money\n    case \"peace\":\n      return Peace\n    case \"ppe\":\n      return PPE\n    case \"povertyAlleviation\":\n      return PovertyAlleviation\n    case \"recycling\": \n      return Recycling\n    case \"religion\":\n      return Religion\n    case \"sanitation\":\n      return Sanitation\n    case \"sports\":\n      return Sports\n    case \"terrorism\":\n      return Terrorism\n    case \"covid\":\n      return Covid\n    case \"waste\":\n      return Waste\n    case \"youth\":\n      return Youth\n    // case \"other\":\n    //   return <img src={Oth} alt=\"Other Icon\" />\n    default:\n      return null\n  }\n}\n\nexport default WhatCategories","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/volunteerPillsList.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/volunteerGender.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/Actions/imageUpload.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/volunteerPersonalIconInfo.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/volunteerImage.component.js",["1068"],"import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserAlt } from '@fortawesome/pro-solid-svg-icons';\n\nconst ImageComponent = ({ image, size }) => {\n\tlet imageComponent = null;\n\tlet scale = null;\n\tif (size === 'large') {\n\t\tscale = 'h-32 w-32 sm:h-48 sm:w-48 ';\n\t} else {\n\t\tscale = 'h-24 w-24 sm:h-32 sm:w-32 ';\n\t}\n\tif (image) {\n\t\timageComponent = (\n\t\t\t<img\n\t\t\t\tclassName={\n\t\t\t\t\tscale +\n\t\t\t\t\t' rounded-full object-cover shadow-sm border-4 border-white border-solid'\n\t\t\t\t}\n\t\t\t\tsrc={image}\n\t\t\t/>\n\t\t);\n\t} else {\n\t\timageComponent = (\n\t\t\t<div\n\t\t\t\tclassName={\n\t\t\t\t\tscale +\n\t\t\t\t\t' rounded-full flex-grow overflow-hidden flex items-center justify-center border-4 border-white border-solid bg-gray-700'\n\t\t\t\t}\n\t\t\t>\n\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\ticon={faUserAlt}\n\t\t\t\t\tsize={size === 'large' ? '4x' : '2x'}\n\t\t\t\t\tcolor=\"white\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t);\n\t}\n\n\treturn imageComponent;\n};\n\nexport default ImageComponent;\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/volunteerIconInfo.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/assets/svg.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/MainVolunteerViewContent.component.js",["1069","1070"],"import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\n\nimport VolunteerCard from './mainVolunteerCard.component';\nimport LoadingSpinner from '../utilities/loadingSpinner.component';\n\nimport { getVolunteers } from '../../Actions/volunteerActions';\nimport { filterAndSearchProject } from '../utilities/filterAndSearch';\n\nconst MainVolunteerViewContent = ({\n\tprops,\n\tdispatch,\n\tvolunteers,\n\tloading,\n\thasErrors,\n\tfetched,\n}) => {\n\tconsole.log(volunteers);\n\tuseEffect(() => {\n\t\tdispatch(getVolunteers());\n\t}, []);\n\n\tfunction clickVolunteer(id) {\n\t\tprops.history.push(`/volunteers/${id}`);\n\t}\n\n\tif (fetched && !loading && volunteers.length === 0) {\n\t\treturn (\n\t\t\t<p\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: '100%',\n\t\t\t\t\theight: '400px',\n\t\t\t\t\tmargin: 'auto',\n\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t}}\n\t\t\t>\n\t\t\t\t{' '}\n\t\t\t\tNo Volunteers Yet{' '}\n\t\t\t</p>\n\t\t);\n\t}\n\n\tif (fetched && !loading) {\n\t\treturn (\n\t\t\t<div className=\"grid lg:grid-cols-3 md:grid-cols-2 sm:grid-cols-1 gap-4 pb-8 px-4 sm:px-2\">\n\t\t\t\t{volunteers.map((volunteer, index) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<VolunteerCard\n\t\t\t\t\t\t\tkey={index}\n\t\t\t\t\t\t\tvolunteer={volunteer}\n\t\t\t\t\t\t\tonClick={clickVolunteer}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t);\n\t}\n\n\tif (hasErrors) {\n\t\treturn <p> An error occurred</p>;\n\t}\n\n\treturn <LoadingSpinner />;\n};\n\nconst MapStateToProps = (state, ownProps) => ({\n\tloading: state.volunteerInfo.mainVolunteers.loading,\n\thasErrors: state.volunteerInfo.mainVolunteers.hasErrors,\n\tfetched: state.volunteerInfo.mainVolunteers.fetched,\n\tvolunteers: state.volunteerInfo.mainVolunteers.volunteers, //filterAndSearchProject(state.projectInfo.mainProject.projects, state.projectInfo.mainProject.filterTerms, state.projectInfo.mainProject.searchTerm),\n\tprops: ownProps.props,\n});\n\nexport default connect(MapStateToProps)(MainVolunteerViewContent);\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/organisationCnicCard.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/selectEventToAddCnic.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/cnicSearchResult.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/addingCnicInfo.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/dataOptions.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/selectMap.component.js",["1071"],"import React, { Component, Fragment } from \"react\";\nimport { MAPBOX_API_KEY } from '../../config';\nimport mapboxgl from 'react-mapbox-gl';\nimport ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport * as markers from '../../assets/svg.js';\nimport '../../css/map.css';\n\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport * as MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\n\nmapboxgl.accessToken = MAPBOX_API_KEY\n\nconst Map = ReactMapboxGl({\n  accessToken: MAPBOX_API_KEY\n});\n\n\nconst layoutLayer = {\n  'icon-image': 'marker'\n}\n\nconst flyToOptions = {\n  speed: 1\n}\n\nconst image = new Image();\nimage.src = 'data:image/svg+xml;charset=utf-8;base64,'+btoa(markers.markerDuotone);\nconst images = ['marker', image]\n\nconst startingBounds = [[78.7393, 37.2946], [59.9632, 23.5181]];\n\nclass SelectMap extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      center: [69.3451, 30.3753],\n      zoom: [4.7],\n      selectedPoint: [],\n      geocoderAdded: false\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n      {/* <input className=\"dontShow\" name=\"location\" id=\"location\"/> */}\n      <Map\n        style={'mapbox://styles/daniyaalbeg/ck8xf05we46ts1ipm9zqkoyya'}\n        containerStyle={{\n          height: '300px',\n          width: '100%',\n          borderRadius: '5px',\n        }}\n        onClick={ (stuff, e) => {\n          this.setState({\n           location: e.lngLat,\n           center: e.lngLat,\n           selectedPoint: [e.lngLat.lng, e.lngLat.lat]\n          })\n          this.props.callBack([this.state.location.lng, this.state.location.lat])\n        }}\n        fitBounds={startingBounds}\n        center={this.state.center}\n        zoom={this.state.zoom}\n        onDrag={this.onDrag}\n        flyToOptions={flyToOptions}\n        onStyleLoad={(map) => {\n          map.addControl(\n            new MapboxGeocoder({\n              accessToken: MAPBOX_API_KEY,\n              mapboxgl: map,\n              countries: 'pk'\n            })\n          )\n        }}\n      >\n        <Layer type=\"symbol\" id=\"marker\" layout={layoutLayer} images={images} >\n          {this.state.selectedPoint.length !== 0 &&\n            <Feature\n              key={'clickedMarker'}\n              coordinates={this.state.selectedPoint}\n            />\n          }\n        </Layer>\n        {/* <Geocoder /> */}\n      </Map>\n      </Fragment>\n    )\n  }\n}\n\nexport default SelectMap","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/selectBadgeOptions.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/skillsSelection.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/selectedProjectCategories.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/signup/signupUserForm.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/selectedProjectSponsor.component.js",["1072","1073"],"import React from \"react\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport imagePlaceholder from \"../../assets/Images/temp.jpg\";\n\nconst SelectedProjectSponsors = ({ project }) => {\n  const history = useHistory();\n  if (!project.sponsors || project.sponsors.length === 0) return null;\n\n  return (\n    <div className=\"mainSelectedProjectsViewSponsors mainSelectedProjectCards\">\n      <h3> Sponsors </h3>\n      <div className=\"selectedProjectSponsorCardContainer\">\n        {project.sponsors.map((sponsor) => {\n          return (\n            <div\n              key={sponsor._id}\n              className=\"selectedProjectSponsorCard grow\"\n              onClick={() =>\n                history.push(`/organisations/${sponsor.sponsorID}`)\n              }\n            >\n              <img\n                src={sponsor.imageURL ? sponsor.imageURL : imagePlaceholder}\n              />\n              <h5> {sponsor.name} </h5>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default SelectedProjectSponsors;\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/selectedProjectImageView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/selectedProjectInfoTabs.component.js",["1074"],"import React from 'react'\nimport { Tab } from '../utilities/tabComponent';\nimport { Tabs, Panel } from '@bumaga/tabs'\n\nimport ProjectInfoPanel from './projectTabPanels/infoPanel.component';\nimport ProjectFundingPanel from './projectTabPanels/fundingPanel.component';\nimport ProjectSuppliesPanel from './projectTabPanels/suppliesPanel.component';\nimport ProjectCommentsPanel from './projectTabPanels/commentsPanel/commentsPanel.component';\nimport ProjectUpdatesPanel from './projectTabPanels/updatesPanel.component';\nimport ProjectFaqPanel from './projectTabPanels/faqPanel.component';\n\nconst SelectedProjectInfoTabs = ({ project, activeTab, setActiveTab }) => {\n  return (\n    <div className=\"mainSelectedProjectsTabContainer\">\n      <Tabs state={[ activeTab, setActiveTab ]}>\n        <div className=\"mainSelectedProjectsTabHeader \">\n          <div className=\"mainProjectTabs\">\n            <Tab tabType=\"mainProjectTab\">\n              Info\n            </Tab>\n            {/* <Tab tabType=\"mainProjectTab\">\n              Funding\n            </Tab> */}\n            <Tab tabType=\"mainProjectTab\">\n              Supplies\n            </Tab>\n            <Tab tabType=\"mainProjectTab\">\n              Comments\n            </Tab>\n            <Tab tabType=\"mainProjectTab\">\n              Updates\n            </Tab>\n            <Tab tabType=\"mainProjectTab\">\n              FAQ\n            </Tab>\n          </div>\n        </div>\n        <div className=\"mainSelectedProjectsTabBody\">\n          <Panel>\n            <ProjectInfoPanel project={project} />\n          </Panel>\n          {/* <Panel>\n            <ProjectFundingPanel project={project} />\n          </Panel> */}\n          <Panel>\n            <ProjectSuppliesPanel project={project} />\n          </Panel>\n          <Panel>\n            <ProjectCommentsPanel project={project} />\n          </Panel>\n          <Panel>\n            <ProjectUpdatesPanel project={project} />\n          </Panel>\n          <Panel>\n            <ProjectFaqPanel project={project} />\n          </Panel>\n        </div>\n      </Tabs>\n    </div>\n  )\n}\n\nexport default SelectedProjectInfoTabs","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/mainProjectViewContent.component.js",["1075"],"import React, { useEffect } from 'react'\nimport { connect } from 'react-redux';\n\nimport ProjectCard from './projectCard/mainProjectCard.component';\nimport LoadingSpinner from '../utilities/loadingSpinner.component';\n\nimport { getProjects } from '../../Actions/projectActions'\nimport { filterAndSearchProject } from '../utilities/filterAndSearch'\n\nconst MainProjectViewContent = ({ props, dispatch, projects, loading, hasErrors, fetched }) => {\n  useEffect(() => {\n    dispatch(getProjects())\n  }, [])\n\n  if (fetched && !loading && projects.length === 0) {\n    return <p style={{\n      width: \"100%\",\n      height: \"400px\",\n      margin: \"auto\",\n      textAlign: \"center\"\n    }}> No Projects Yet </p>\n  }\n\n  if (fetched && !loading) {\n    return (\n      <div className=\"mainProjectCardsViewContainer\">\n        {\n          projects.map((project, index) => {\n            return <ProjectCard key={index} project={project} onClick={() => {\n              props.history.push(`/projects/${project._id}`)\n            }} />\n          })\n        }\n      </div>\n    )\n  }\n\n  return <LoadingSpinner  />\n}\n\nconst MapStateToProps = (state, ownProps) => ({\n  loading: state.projectInfo.mainProject.loading,\n  hasErrors: state.projectInfo.mainProject.hasErrors,\n  fetched: state.projectInfo.mainProject.fetched,\n  projects: filterAndSearchProject(state.projectInfo.mainProject.projects, state.projectInfo.mainProject.filterTerms, state.projectInfo.mainProject.searchTerm),\n  props: ownProps.props\n})\n\nexport default connect(MapStateToProps)(MainProjectViewContent)","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/categoryOptions.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/categoryOptionValues.js",["1076"],"export const categoryOptionValues = [\n  {\n    value: \"animalWelfare\",\n    name: \"Animal Welfare\"\n  },\n  {\n    value: \"artsAndCulture\",\n    name: \"Arts and Culture\"\n  },\n  {\n    value: \"clothing\",\n    name: \"Clothing\"\n  },\n  {\n    value: \"communityDevelopment\",\n    name: \"Community Development\"\n  },\n  {\n    value: \"disability\",\n    name: \"Disability\"\n  },\n  {\n    value: \"disaster\",\n    name: \"Disaster\"\n  },\n  {\n    value: \"education\",\n    name: \"Education\"\n  },\n  {\n    value: \"primary\",\n    name: \"Primary Education\"\n  },\n  {\n    value: \"secondary\",\n    name: \"Secondary Education\"\n  },\n  {\n    value: \"higher\",\n    name: \"Higher Education\"\n  },\n  {\n    value: \"energy\",\n    name: \"Energy\"\n  },\n  {\n    value: \"environment\",\n    name: \"Environment\"\n  },\n  {\n    value: \"forest\",\n    name: \"Forest\"\n  },\n  {\n    value: \"water\",\n    name: \"Water\"\n  },\n  {\n    value: \"equality\",\n    name: \"Equality\"\n  },\n  {\n    value: \"food\",\n    name: \"Food\"\n  },\n  {\n    value: \"agriculture\",\n    name: \"Agriculture\"\n  },\n  {\n    value: \"fisheries\",\n    name: \"Fisheries\"\n  },\n  {\n    value: \"gender\",\n    name: \"Gender\"\n  },\n  // {\n  //   value: \"womenEmpowerment\",\n  //   name: \"Women Empowerment\"\n  // },\n  {\n    value: \"health\",\n    name: \"Health\"\n  },\n  {\n    value: \"motherAndChildHealth\",\n    name: \"Mother and Child Health\"\n  },\n  // {\n  //   value: \"elderlyHealth\",\n  //   name: \"Elderly Health\"\n  // },\n  {\n    value: \"humanRights\",\n    name: \"Human Rights\"\n  },\n  {\n    value: \"infrastructure\",\n    name: \"Infrastructure\"\n  },\n  {\n    value: \"it\",\n    name: \"IT\"\n  },\n  {\n    value: \"justice\",\n    name: \"Justice\"\n  },\n  {\n    value: \"livelihood\",\n    name: \"Livelihood\"\n  },\n  {\n    value: \"money\",\n    name: \"Money\"\n  },\n  {\n    value: \"peace\",\n    name: \"Peace\"\n  },\n  {\n    value: \"ppe\",\n    name: \"Protection Equipment\"\n  },\n  {\n    value: \"povertyAlleviation\",\n    name: \"Poverty Alleviation\"\n  },\n  {\n    value: \"recycling\",\n    name: \"Recycling\"\n  },\n  {\n    value: \"religion\",\n    name: \"Religion\"\n  },\n  {\n    value: \"sanitation\",\n    name: \"Sanitation\"\n  },\n  {\n    value: \"sports\",\n    name: \"Sports\"\n  },\n  {\n    value: \"terrorism\",\n    name: \"Terrorism\"\n  },\n  {\n    value: \"covid\",\n    name: \"Covid\"\n  },\n  {\n    value: \"waste\",\n    name: \"Waste\"\n  },\n  {\n    value: \"youth\",\n    name: \"Youth\"\n  },\n]\n\nexport default {\n  categoryOptionValues,\n}","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/selectedProjectCallToAction.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/filterSearchBar/projectFilterSearchBar.component.js",["1077"],"import React, { useState } from 'react';\n\nimport GenericModal from '../../sharedComponents/genericModal.component';\nimport FilterModalProjectView from './filterModalProjectView.component';\nimport ProjectSearchBar from './searchBarProjectView.component';\n\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n// import { faFilter } from '@fortawesome/pro-solid-svg-icons'\n\nconst ProjectFilterSearchBar = ({  }) => {\n  const [openedFilterModal, setOpenFilterModal] = useState(false)\n\n  return (\n    <div className=\"filterSearchBarStandard\">\n      <ProjectSearchBar />\n      <button className=\"standardButtonWithoutColour mcLighterBG\" onClick={() => setOpenFilterModal(true)} style={{marginLeft: '8px'}} >\n        {/* <FontAwesomeIcon icon={faFilter} size=\"1x\" style={{marginRight: '8px'}} /> */}\n        Filter\n      </button>\n      {openedFilterModal &&\n        <GenericModal showModal={setOpenFilterModal}>\n          <FilterModalProjectView showModal={setOpenFilterModal} />\n        </GenericModal>\n      }\n    </div>\n  )\n}\n\n\nexport default ProjectFilterSearchBar","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/volunteerUtilities.js",["1078","1079"],"export const convertEducationLevel = (e) => {\n  switch (e) {\n    case \"primary\":\n      return \"Primary\";\n    case \"secondary\":\n      return \"Secondary\";\n    case \"other\":\n      return \"Other\";\n  }\n};\n\nexport const convertEmploymentStatus = (e) => {\n  switch (e) {\n    case \"HOME-MAKER\":\n      return \"Home Maker\";\n    case \"PRIVATE-SECTOR\":\n      return \"Private Sector\";\n    case \"PUBLIC-SECTOR\":\n      return \"Public Sector\";\n    case \"GOVERNMENT\":\n      return \"Government\";\n    case \"PART-TIME\":\n      return \"Part time work\";\n    case \"STUDENT\":\n      return \"Student\";\n    case \"UNEMPLOYED\":\n      return \"Unemployed\";\n    case \"RETIRED\":\n      return \"Retired\";\n    case \"SELF-EMPLOYED\":\n      return \"Self Employed\";\n    case \"OTHER\":\n      return \"Other\";\n  }\n};\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/filterAndSearch.js",["1080","1081","1082","1083","1084"],"const filterAndSearch = (objects, mapMode, filterCategory, filter, search) => {\n  return objects\n  search = search.toLowerCase();\n  const approved = objects.filter((object) => {\n    return object.approved\n  })\n  const filteredEventsType = approved.filter((object) => {\n    if (filterCategory === \"all\") {\n      return true\n    } else {\n      if (filterCategory === object.typeOfRation) {\n        return true\n      } else {\n        return false\n      }\n    }\n  })\n  const filteredEvents = filteredEventsType.filter((event) => {\n    if (filter === \"all\") {\n      return true\n    } else {\n      if (filter === event.createdBy.type) {\n        return true\n      } else {\n        return false;\n      }\n    }\n  });\n  const searchedAndFilteredEvents = filteredEvents.filter((event) => {\n    try {\n      return (event.name.toLowerCase().includes(search) || event.createdBy.supplierName.toLowerCase().includes(search) || event.createdBy.description.toLowerCase().includes(search) || event.itemsDescription.toLowerCase().includes(search) || event.typeOfRation.toLowerCase().includes(search))\n    } catch {\n      return false\n    }\n  });\n  return searchedAndFilteredEvents\n}\n\nexport const filterAndSearchOrg = (orgs, filterCategory, filterProject, search) => {\n  search = search.toLowerCase();\n  const filteredOrgType = orgs.filter((org) => {\n    if (filterCategory === \"all\") {\n      return true\n    }\n    if (filterCategory === org.type) {\n      return true\n    } else {\n      return false;\n    }\n  });\n\n  const filteredOrgProject = filteredOrgType.filter((org) => {\n    if (filterProject === \"all\") {\n      return true\n    }\n    for (const work of org.areaOfWork) {\n      if (work === filterProject) {\n        return true\n      }\n    }\n    return false\n  })\n\n  const searchedAndFilteredEvents = filteredOrgProject.filter((org) => {\n    return (org.name.toLowerCase().includes(search) || org.description.toLowerCase().includes(search))\n  });\n\n\n\n  //filter by project type here\n\n  return searchedAndFilteredEvents\n}\n\nexport const filterAndSearchProject = (projects, filterCategories, search) => {\n  search = search.toLowerCase();\n  const filteredProjectType = projects.filter((project) => {\n    if (filterCategories.length === 0) {\n      return true\n    }\n\n    if (!project.secondaryCategories) return false\n\n    if (filterCategories.includes(project.primaryCategory)) {\n      return true\n    } else {\n      const arrayDiff = diff(filterCategories, project.secondaryCategories)\n      if (arrayDiff.length !== 0) return true\n    }\n  \n    return false\n  });\n\n  const searchedAndFilteredProjects = filteredProjectType.filter((project) => {\n    return (project.name.toLowerCase().includes(search) || project.description.toLowerCase().includes(search))\n  });\n\n  return searchedAndFilteredProjects\n}\n\nconst diff = (arr1, arr2) => {\n  var ret = [];\n  arr1.sort();\n  arr2.sort();\n  for(var i = 0; i < arr1.length; i += 1) {\n      if(arr2.indexOf(arr1[i]) > -1){\n          ret.push(arr1[i]);\n      }\n  }\n  return ret;\n};\n\nexport default filterAndSearch","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/volunteers/mainVolunteerCard.component.js",["1085","1086"],"import React, { useState, useEffect } from 'react';\n\nimport VolunteerImage from './volunteerImage.component';\nimport GenderComponent from './volunteerGender.component';\nimport {\n\tconvertEducationLevel,\n\tconvertEmploymentStatus,\n} from '../utilities/volunteerUtilities';\nimport {\n\tfaMapMarkerAlt,\n\tfaBriefcase,\n\tfaGraduationCap,\n} from '@fortawesome/pro-solid-svg-icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nconst VolunteerCard = ({ volunteer, onClick }) => {\n\tconst clickVolunteer = () => {\n\t\tonClick(volunteer.parentId);\n\t};\n\n\treturn (\n\t\t<div\n\t\t\tonClick={clickVolunteer}\n\t\t\tclassName=\"w-auto max-h-72 rounded-xl bg-gray-600 overflow-hidden shadow-sm hover:shadow-xl border border-gray-200 border-solid transition transform duration-500 ease-in-out hover:scale-105 cursor-pointer select-none\"\n\t\t>\n\t\t\t<div className=\"w-full h-48 p-4 flex flex-row\">\n\t\t\t\t<div className=\"w-auto h-full\">\n\t\t\t\t\t<VolunteerImage image={volunteer.image} />\n\t\t\t\t</div>\n\t\t\t\t<div className=\" h-full whitespace-nowrap\">\n\t\t\t\t\t<div className=\"w-full h-full pl-2 pt-3\">\n\t\t\t\t\t\t<p className=\"text-xl font-bold m-0 text-white\">\n\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t{volunteer.firstName} {volunteer.lastName}{' '}\n\t\t\t\t\t\t\t<GenderComponent gender={volunteer.gender} colour=\"white\" />\n\t\t\t\t\t\t</p>{' '}\n\t\t\t\t\t\t<div className=\"flex flex-row items-center gap-2 text-gray-100\">\n\t\t\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\t\t\tstyle={{ width: '16px', height: '16px' }}\n\t\t\t\t\t\t\t\ticon={faMapMarkerAlt}\n\t\t\t\t\t\t\t/>{' '}\n\t\t\t\t\t\t\t{volunteer.city}\n\t\t\t\t\t\t\t<p className=\"m-0 text-gray-100\"></p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"flex flex-row items-center gap-2 text-gray-100\">\n\t\t\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\t\t\tstyle={{ width: '16px', height: '16px' }}\n\t\t\t\t\t\t\t\ticon={faBriefcase}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<p className=\"m-0 text-gray-100\">\n\t\t\t\t\t\t\t\t{convertEmploymentStatus(volunteer.employmentStatus)}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div className=\"flex flex-row items-center gap-2 text-gray-100\">\n\t\t\t\t\t\t\t<FontAwesomeIcon\n\t\t\t\t\t\t\t\tstyle={{ width: '16px', height: '16px' }}\n\t\t\t\t\t\t\t\ticon={faGraduationCap}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t<p className=\"m-0 text-gray-100\">\n\t\t\t\t\t\t\t\t{convertEducationLevel(volunteer.educationLevel)}\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t{/* {volunteer.about ? (\n\t\t\t\t<div className=\"w-full h-24 bg-gray-50 p-3 overflow-y-scroll\">\n\t\t\t\t\t<p> {volunteer.about} </p>\n\t\t\t\t</div>\n\t\t\t) : null} */}\n\t\t</div>\n\t);\n};\n\nexport default VolunteerCard;\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/standardCard.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/cnic/cnicUploadOptions.component.js",["1087"],"import React, { useState } from 'react';\nimport xlsx from 'xlsx';\n\nimport { Table, Spinner } from 'react-bootstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { faFileUpload, faDownload, faUpload, faPlusCircle} from '@fortawesome/pro-duotone-svg-icons';\n\nimport sampleXlsx from '../../assets/cnic_sample.xlsx';\nimport { uploadCnic, uploadFileCnic } from '../../Actions/cnicActions';\n\nconst CnicUploadOptions = ({ dispatch, selectedEvent, uploadLoading, uploadSuccess, uploadHasErrors, uploadErrorIDs }) => {\n  const [fileSampleLoaded, setFileSampleLoaded] = useState(false);\n  const [fileDataUploaded, setFileDataUploaded] = useState(false);\n  const [fileData, setFileData] = useState(null)\n  const [file, setFile] = useState(null)\n\n  if (fileSampleLoaded) {\n    return (\n      <div className=\"cnicSampleUploadedCnicContainer\">\n        {fileData &&\n          <Table striped bordered hover size=\"sm\">\n            <CNICTableHeader data={fileData[0]} />\n            <CNICTableBody data={fileData} />\n         </Table>\n        }\n        <button className=\"standardButton\" disabled={uploadLoading} onClick={() => {\n          dispatch(uploadCnic(selectedEvent._id, fileData))\n        }}>\n          {\n            uploadLoading ? \n            <Spinner animation=\"grow\" size=\"sm\" style={{ marginRight: '8px' }} /> \n            :\n            <FontAwesomeIcon icon={faFileUpload} style={{ marginRight: '8px' }} />\n          }\n           {uploadLoading ? \"Uploading\" : \"Upload\" }\n         </button>\n\n         <UploadedSuccessOrError uploadErrorIDs={uploadErrorIDs} uploadHasErrors={uploadHasErrors} uploadSuccess={uploadSuccess} />\n\n         <p className=\"text-muted cnicNote\"> Note: Please make sure all the columns in the file are filled, if any are empty type type null or empty intead of leaving them blank. </p>\n      </div>\n    )\n  } else if (fileDataUploaded) {\n    return (\n      <div className=\"cnicUploadedContainer\">\n        <p> {file.name} </p>\n        <button className=\"standardButton\" disabled={uploadLoading} onClick={() => {\n          dispatch(uploadFileCnic(selectedEvent._id, file))\n        }}>\n          {\n            uploadLoading ? \n            <Spinner animation=\"grow\" size=\"sm\" style={{ marginRight: '8px' }} /> \n            :\n            <FontAwesomeIcon icon={faFileUpload} style={{ marginRight: '8px' }} />\n          }\n           {uploadLoading ? \"Uploading\" : \"Upload\" }\n         </button>\n         {\n           uploadHasErrors &&\n           <p className=\"error\"> An error occurred with the upload </p>\n         }\n         {\n           uploadSuccess &&\n           <p className=\"cnicSuccess cnicNote\"> File was uploaded successfully and awaits review </p>\n         }\n      </div>\n    )\n  } else {\n    return (\n      <div className=\"cnicAddOptionsContainer\">\n        <div>\n          <p> Download this sample file and copy your CNIC info according to the given columns and then upload it. </p>\n          <label htmlFor=\"file-download\" className=\"sampleDownload\">\n          <a id=\"file-download\" href={sampleXlsx}> \n            <FontAwesomeIcon icon={faDownload} style={{marginRight: '8px'}} />\n            Download Template\n          </a>\n          </label>\n          <label htmlFor=\"file-sample-upload\" className=\"cnicFileInput\">\n            <input onChange={(e) => {\n              setFileSampleLoaded(true)\n              parseExcelFile(e, setFileData)\n            }} id=\"file-sample-upload\" type=\"file\" accept=\".xlsx\" />\n            <FontAwesomeIcon icon={faUpload} style={{marginRight: '8px'}} />\n            Upload File\n          </label>\n        </div>\n        <div>\n          <h4> OR </h4>\n        </div>\n        <div>\n          <p> Upload your file directly here and we shall add the information </p>\n          <label htmlFor=\"file-Data-upload\" className=\"cnicFileInput\">\n            <input onChange={(e) => {\n              setFileDataUploaded(true)\n              setFile(e.currentTarget.files[0])\n            }} id=\"file-Data-upload\" type=\"file\" accept=\".xlsx\" />\n            <FontAwesomeIcon icon={faUpload} style={{marginRight: '8px'}} />\n            Upload File\n          </label>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst parseExcelFile = (e, setFile) => {\n  const reader = new FileReader()\n  reader.onload = (e) => {\n    var data = e.target.result\n    let readData = xlsx.read(data, {type: 'binary'});\n    const workSheetName = readData.SheetNames[0];\n    const workSheet = readData.Sheets[workSheetName];\n\n    const dataParse = xlsx.utils.sheet_to_json(workSheet, {header: 1})\n    setFile(dataParse)\n  }\n  reader.readAsBinaryString(e.target.files[0])\n}\n\nconst CNICTableHeader = (props) => {\n  return (\n    <thead>\n      <tr>\n        {\n          props.data.map((element) => {\n            return <td key={element}> {element} </td>\n          })\n        }\n      </tr>\n    </thead>\n  )\n}\n\nconst CNICTableBody = (props) => {\n  const copyData = [...props.data]\n  copyData.splice(0, 1)\n  return (\n    <tbody>\n      {\n        copyData.map((row) => {\n          return (\n            <tr key={row}>\n              {\n                row.map((element) => {\n                  return <td key={element}> {element} </td>\n                })\n              }\n            </tr>\n          )\n        })\n      }\n    </tbody>\n  )\n}\n\nconst UploadedSuccessOrError = ({ uploadErrorIDs, uploadHasErrors, uploadSuccess }) => {\n  if (uploadErrorIDs.length !== 0 ) {\n    return (\n      <p className=\"error\" style ={{marginTop: \"16px\"}}> There was an issue uploading row number: {uploadErrorIDs.toString()} </p>    \n    )\n  } else if (uploadHasErrors) {\n    return (\n      <p className=\"error\"> An error occurred with the upload </p>\n    )\n  } else if (uploadSuccess) {\n    return (\n      <p className=\"cnicSuccess cnicNote\"> File was uploaded successfully and awaits review </p>\n    )\n  }\n\n  return (\n    null\n  )\n}\n\nexport default CnicUploadOptions","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/events/eventItemCard.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/skillOptions.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/imageCarousel.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/faqPanel.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/updatesPanel.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectCard/mainProjectCard.component.js",["1088"],"import React from \"react\";\n\nimport ProjectCardSheet from \"./mainProjectCardSheet.component\";\nimport imagePlaceholder from \"../../../assets/Images/temp.jpg\";\n\nconst ProjectCard = ({ project, onClick }) => {\n  let image = null;\n  if (project.images && project.images.length !== 0) {\n    image = project.images[0];\n  } else {\n    image = imagePlaceholder;\n  }\n\n  return (\n    <div className=\"mainProjectCardContainer\">\n      {/* <div className=\"mainProjectCardSheet\">\n        <ProjectCardSheet project={project} />\n      </div> */}\n      <div className=\"mainProjectCard\" onClick={onClick}>\n        <div className=\"mainProjectCardTop\">\n          <img src={image} />\n        </div>\n        <div className=\"mainProjectCardBottom\">\n          <p className=\"projectCardTitle\"> {project.name} </p>\n          <p className=\"projectCardSubtitle\">\n            {\" \"}\n            {checkTaglineLength(project.tagline)}{\" \"}\n          </p>\n          <hr className=\"projectCardSeperator\" />\n          <div className=\"projectSheet\">\n            <ProjectCardSheet project={project} />\n          </div>\n          <p className=\"projectCardBy\">\n            {\" \"}\n            By {project.createdByOrganisation.name}{\" \"}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst checkTaglineLength = (tagline) => {\n  if (!tagline) return null;\n  if (tagline.length > 55) {\n    return tagline.substring(0, Math.min(tagline.length, 55)) + \"...\";\n  }\n  return tagline;\n};\n\nexport default ProjectCard;\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/commentsPanel/commentsPanel.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/filterSearchBar/searchBarProjectView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/filterSearchBar/filterModalProjectView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/genericModal.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/callToActionProgressViews.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/callToActionButtonView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectCard/mainProjectCardSheet.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/commentsPanel/createComment.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/dateUtilities.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/mainProjectAuthor.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/projectUtils.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/progressCircle.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/callToActionModal.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/events/eventItemInfo.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/contributedMessage.component.js",["1089"],"import React, { useEffect } from 'react'\n\nconst ContributedMessage = ({ type, closeModal }) => {\n  if (type === \"SUPPLY\") {\n    return (\n      <div className=\"contributedMessageContainer\">\n        <h4> Thanks for your contribution! </h4>\n        <p> You will be sent an email confirming your request was made. Once the project owner accepts your request you will be notified. </p>\n        <button className=\"standardButtonWithoutColour mcGreenBG\" onClick={closeModal}> Dismiss </button>\n      </div>\n    )\n  } else if (type === \"VOLUNTEER\") {\n    return (\n      <div className=\"contributedMessageContainer\">\n        <h4> Thanks for volunteering! </h4>\n        <p> You will be sent an email confirming your request was made. The project owner will now look over your request. Once a decision is made you will be notified. </p>\n        <button className=\"standardButtonWithoutColour mcGreenBG\" onClick={closeModal}> Dismiss </button>\n      </div>\n    )\n  }\n}\n\nexport default ContributedMessage","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/submitSupply.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/forms/applyVolunteerForm.component.js",["1090","1091"],"import React, { useEffect } from \"react\";\nimport { Spinner } from \"react-bootstrap\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { connect } from \"react-redux\";\n\nimport {\n  creatingPublicProjectVolunteerRequest,\n  createPublicProjectItemReset,\n} from \"../../../../Actions/projectActions\";\n\nconst validationSchema = Yup.object().shape({\n  description: Yup.string()\n    .required(\"*Description of supplies is required\")\n    .max(300, \"*Must be less than 300 charachters\"),\n  motivation: Yup.string()\n    .required(\"*Motivation is required\")\n    .max(300, \"*Motivation must be less than 300 characters\"),\n  previousExperience: Yup.string().max(\n    300,\n    \"*Previous Experience must be less than 300 characters\"\n  ),\n  availability: Yup.string()\n    .required(\"*Availability is required\")\n    .max(300, \"*Availability must be less than 300 characters\"),\n  additionalInformation: Yup.string().max(\n    300,\n    \"*Must be less than 300 characters\"\n  ),\n});\n\nconst ApplyVolunteerForm = ({\n  dispatch,\n  loading,\n  hasErrors,\n  success,\n  project,\n  setSubmitted,\n}) => {\n  useEffect(() => {\n    if (success) {\n      dispatch(createPublicProjectItemReset());\n      setSubmitted(\"VOLUNTEER\");\n    }\n  }, [success]);\n\n  useEffect(() => {\n    dispatch(createPublicProjectItemReset());\n  }, []);\n\n  const formik = useFormik({\n    initialValues: {\n      description: \"\",\n      motivation: \"\",\n      previousExperience: \"\",\n      availability: \"\",\n      additionalInformation: \"\",\n    },\n    validationSchema: validationSchema,\n    validateOnChange: false,\n    validateOnBlur: false,\n    onSubmit: (values) => {\n      const data = {\n        description: values.description,\n        motivation: values.motivation,\n        previousExperience: values.previousExperience,\n        availability: values.availability,\n        additionalInformation: values.additionalInformation,\n      };\n      dispatch(creatingPublicProjectVolunteerRequest(data, project._id));\n    },\n  });\n\n  return (\n    <div className=\"callToActionSubmitSupplyContainer\">\n      <form onSubmit={formik.handleSubmit} className=\"createSupplyAmountForm\">\n        <h2 className=\"formHeader\"> Volunteer Request </h2>\n\n        <div className=\"formGroup\">\n          <p className=\"formGroupHeader\">\n            What would you like to do as a volunteer?\n          </p>\n          <textarea\n            autoFocus\n            type=\"text\"\n            name=\"description\"\n            rows=\"3\"\n            placeholder=\"E.g. I will help with financing!\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.description}\n          />\n          {formik.errors.description && (\n            <p className=\"formInputError\"> {formik.errors.description} </p>\n          )}\n        </div>\n\n        <div className=\"formGroup\">\n          <p className=\"formGroupHeader\">\n            What is your motivation for volunteering with us?\n          </p>\n          <textarea\n            autoFocus\n            type=\"text\"\n            name=\"motivation\"\n            rows=\"3\"\n            placeholder=\"E.g. I love what your organisation is doing!\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.motivation}\n          />\n          {formik.errors.motivation && (\n            <p className=\"formInputError\"> {formik.errors.motivation} </p>\n          )}\n        </div>\n\n        <div className=\"formGroup\">\n          <p className=\"formGroupHeader\">\n            Do you have any previous experience?\n          </p>\n          <textarea\n            autoFocus\n            type=\"text\"\n            name=\"previousExperience\"\n            rows=\"3\"\n            placeholder=\"E.g. I have volunteered before!\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.previousExperience}\n          />\n          {formik.errors.previousExperience && (\n            <p className=\"formInputError\">\n              {\" \"}\n              {formik.errors.previousExperience}{\" \"}\n            </p>\n          )}\n        </div>\n\n        <div className=\"formGroup\">\n          <p className=\"formGroupHeader\">What is your availability</p>\n          <textarea\n            autoFocus\n            type=\"text\"\n            name=\"availability\"\n            rows=\"3\"\n            placeholder=\"E.g. Every tuesday from 4-6pm!\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.availability}\n          />\n          {formik.errors.availability && (\n            <p className=\"formInputError\"> {formik.errors.availability} </p>\n          )}\n        </div>\n\n        <div className=\"formGroup\">\n          <p className=\"formGroupHeader\">Any additional information?</p>\n          <textarea\n            autoFocus\n            type=\"text\"\n            name=\"additionalInformation\"\n            rows=\"3\"\n            placeholder=\"E.g. I love what your organisation is doing!\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.additionalInformation}\n          />\n          {formik.errors.additionalInformation && (\n            <p className=\"formInputError\">\n              {\" \"}\n              {formik.errors.additionalInformation}{\" \"}\n            </p>\n          )}\n        </div>\n\n        <div className=\"formGroup\">\n          <button\n            className=\"standardButtonWithoutColour mcGreenBG\"\n            type=\"submit\"\n            disabled={loading}\n          >\n            {loading ? <Spinner animation=\"border\" size=\"sm\" /> : null}\n            {loading ? null : \"Send\"}\n          </button>\n        </div>\n        {hasErrors && (\n          <p className=\"error\" style={{ marginTop: \"8px\" }}>\n            {\" \"}\n            An error occurred please try again or contact support at\n            info@ministryofchange.org{\" \"}\n          </p>\n        )}\n      </form>\n    </div>\n  );\n};\n\nconst MapStateToProps = (state) => ({\n  loading: state.projectInfo.mainProjectCreate.loading,\n  hasErrors: state.projectInfo.mainProjectCreate.hasErrors,\n  success: state.projectInfo.mainProjectCreate.success,\n});\n\nexport default connect(MapStateToProps)(ApplyVolunteerForm);\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/login/loginForm.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/suppliesPanel.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/fundingPanel.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/infoPanel.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/callToAction/contributeSelectedSupply.component.js",["1092","1093","1094"],"import React, { useEffect, useState } from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport { useFormik, Field } from 'formik';\nimport * as Yup from 'yup';\nimport { connect } from 'react-redux';\n\nimport { creatingPublicProjectSupply, createPublicProjectItemReset } from '../../../Actions/projectActions';\nimport SelectMap from '../../signup/selectMap.component';\n\nconst validationSchema = Yup.object().shape({\n  description: Yup.string()\n  .required(\"*Description of supplies is required\")\n  .max(150, \"*Must be less than 150 charachters\"),\n  username: Yup.string()\n  .required(\"*Name is required\")\n  .max(30, \"*Name must be less than 30 characters\"),\n  mobile: Yup.number()\n  .required(\"*Must be a mobile number.\")\n  .typeError(\"*Must be a number\"),\n  contactDetails: Yup.string()\n  .max(150, \"*Must be less than 150 charachters\"),\n  amount: Yup.number()\n  .typeError(\"*Must be a number\")\n  .min(0, \"*Number must be positive\")\n  .min(1, \"*1 is the minimum number of items\"),\n  canDeliver: Yup.bool()\n  .typeError('*Must be a bool'),\n  mapClicked: Yup.bool()\n  .test(\n    'checkIfDeliver',\n    '*Please select a location for pickup',\n    function(v) {\n      const ref = Yup.ref('canDeliver')\n      const currentVal = this.resolve(ref)\n      if (!currentVal) {\n        return true\n      }\n      if (!currentVal && !v) {\n        return false\n      }\n      return false\n    }\n  )\n});\n\nconst ContributeSelectedSupply = ({ dispatch, user, loading, hasErrors, success, project, supply, setSelectedSupply, setSubmitted }) => {\n  const [location, setLocation] = useState(null)\n\n  useEffect(() => {\n    if (success) {\n      dispatch(createPublicProjectItemReset())\n      setSelectedSupply(null)\n      setSubmitted('SUPPLY')\n    }\n  }, [setSelectedSupply, success])\n\n  useEffect(() => {\n    dispatch(createPublicProjectItemReset())\n  }, [])\n\n  const formik = useFormik({\n    initialValues: {\n      description: \"\",\n      username: user.username ? user.username : \"\",\n      mobile: user.mobile ? user.mobile : \"\",\n      contactDetails: \"\",\n      amount: 1,\n      canDeliver: false,\n      mapClicked: false,\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values) => {\n      console.log(values)\n      if (!formik.values.canDeliver && !formik.values.mapClicked) return\n      console.log(\"object\")\n      let newPoint = null\n      if (values.mapClicked) {\n        newPoint = {\n          type: 'Point',\n          coordinates: location\n        }\n      } \n      const supplyAmount = {\n        description: values.description,\n        username: values.username,\n        mobile: values.mobile,\n        contactDetails: values.contactDetails,\n        amount: values.amount,\n        canDeliver: values.canDeliver,\n        location: newPoint,\n      }\n      dispatch(creatingPublicProjectSupply(supplyAmount, project._id, supply._id))\n    }\n  })\n  \n  return (\n    <div className=\"callToActionSubmitSupplyContainer\">\n      <form onSubmit={formik.handleSubmit} className=\"createSupplyAmountForm\">\n      \n        <h2 className=\"formHeader\"> Contributing {supply.name} </h2>\n\n        <div className=\"formGroup\">\n          <p className=\"formGroupHeader\">Description</p>\n          <textarea\n            autoFocus\n            type=\"text\"\n            name=\"description\"\n            rows=\"3\"\n            placeholder=\"E.g. 5 sewing machines, 2 of which are old but workable\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.description}\n          />\n          {formik.errors.description &&\n            <p className=\"formInputError\"> {formik.errors.description} </p>\n          }\n        </div>\n\n        <div className=\"formGroup\">\n          <p className=\"formGroupHeader\">Name</p>\n          <input\n            type=\"text\"\n            name=\"username\"\n            placeholder=\"\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.username}\n          />\n          {formik.errors.username &&\n            <p className=\"formInputError\"> {formik.errors.username} </p>\n          }\n        </div>\n\n        <div className=\"formGroup\">\n          <p className=\"formGroupHeader\">Mobile</p>\n          <input\n            type=\"text\"\n            name=\"mobile\"\n            placeholder=\"\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.mobile}\n          />\n          {formik.errors.mobile &&\n            <p className=\"formInputError\"> {formik.errors.mobile} </p>\n          }\n        </div>\n\n        <div className=\"formGroup\">\n          <p className=\"formGroupHeader\">Other contact Info e.g. (Whatsapp)</p>\n          <textarea\n            type=\"text\"\n            name=\"contactDetails\"\n            rows=\"2\"\n            placeholder=\"E.g. You can reach me on whatsapp at ... \"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.contactDetails}\n          />\n          {formik.errors.contactDetails &&\n            <p className=\"formInputError\"> {formik.errors.contactDetails} </p>\n          }\n        </div>\n\n        <div className=\"formGroup\">\n          <p className=\"formGroupHeader\">Amount</p>\n          <input\n            type=\"text\"\n            name=\"amount\"\n            placeholder=\"\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.amount}\n          />\n          {formik.errors.amount &&\n            <p className=\"formInputError\"> {formik.errors.amount} </p>\n          }\n        </div>\n\n        <div className=\"formGroup\">\n          <p className=\"formGroupHeader\">Can you deliver?</p>\n          <input\n            type=\"checkbox\"\n            name=\"canDeliver\"\n            id=\"formCheckbox\"\n            onChange={formik.handleChange}\n            onBlur={formik.handleBlur}\n            value={formik.values.canDeliver}\n          />\n          {formik.errors.canDeliver &&\n            <p className=\"formInputError\"> {formik.errors.canDeliver} </p>\n          }\n        </div>\n\n        {!formik.values.canDeliver && \n          <div className=\"formGroup\">\n            <p className=\"formGroupHeader\">Location for pickup</p>\n            <SelectMap\n              className=\"selectMap\"\n              callBack={(location) => {\n                setLocation(location)\n                formik.setFieldValue(\"mapClicked\", true)\n              }}\n            />\n          {formik.errors.mapClicked &&\n            <p className=\"formInputError\"> {formik.errors.mapClicked} </p>\n          }\n          </div>\n        }\n\n        <div className=\"formGroup\">\n        <button className=\"standardButtonWithoutColour mcGreenBG\" type=\"submit\" disabled={loading}>\n        {\n          loading ? \n          <Spinner animation=\"border\" size=\"sm\" /> \n          :\n          null\n        }\n        {loading ? null : 'Submit'}\n        </button>\n        <button onClick={() => setSelectedSupply(null)} style={{marginTop: '8px'}} className=\"standardButtonWithoutColour mcGreenBG\" > Back </button>\n      </div>\n      {hasErrors &&\n        <p className=\"error\" style={{marginTop: '8px'}}> An error occurred please try again or contact support at info@ministryofchange.org </p>\n      }\n\n      </form>\n    </div>\n  )\n}\n\nconst MapStateToProps = (state) => ({\n  user: state.userInfo.user,\n  loading: state.projectInfo.mainProjectCreate.loading,\n  hasErrors: state.projectInfo.mainProjectCreate.hasErrors,\n  success: state.projectInfo.mainProjectCreate.success\n})\n\nexport default connect(MapStateToProps)(ContributeSelectedSupply)","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/projects/projectTabPanels/projectSupplyItem.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/mapForDisplay.component.js",["1095"],"import React, { Component, Fragment } from \"react\";\nimport { MAPBOX_API_KEY } from '../../config';\nimport mapboxgl from 'react-mapbox-gl';\nimport ReactMapboxGl, { Layer, Feature } from 'react-mapbox-gl';\nimport * as markers from '../../assets/svg.js';\nimport '../../css/map.css';\n\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css';\nimport * as MapboxGeocoder from '@mapbox/mapbox-gl-geocoder';\n\n\nmapboxgl.accessToken = MAPBOX_API_KEY\n\nconst Map = ReactMapboxGl({\n  accessToken: MAPBOX_API_KEY\n});\n\n\nconst layoutLayer = {\n  'icon-image': 'marker'\n}\n\nconst flyToOptions = {\n  speed: 1\n}\n\nconst image = new Image();\nimage.src = 'data:image/svg+xml;charset=utf-8;base64,'+btoa(markers.mapPin);\nconst images = ['marker', image]\n\n\nclass MapForDisplay extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      center: [props.location.coordinates[0], props.location.coordinates[1]],\n      zoom: [4],\n      selectedPoint: [],\n      geocoderAdded: false\n    }\n  }\n\n  render() {\n    return (\n      <Fragment>\n      {/* <input className=\"dontShow\" name=\"location\" id=\"location\"/> */}\n      <Map\n        style={'mapbox://styles/daniyaalbeg/ck8xf05we46ts1ipm9zqkoyya'}\n        containerStyle={{\n          height: '300px',\n          width: '100%',\n          borderRadius: '5px',\n        }}\n        center={this.state.center}\n        zoom={this.state.zoom}\n        onDrag={this.onDrag}\n        flyToOptions={flyToOptions}\n        onStyleLoad={(map) => {\n          map.addControl(\n            new MapboxGeocoder({\n              accessToken: MAPBOX_API_KEY,\n              mapboxgl: map,\n              countries: 'pk'\n            })\n          )\n        }}\n      >\n        <Layer type=\"symbol\" id=\"marker\" layout={layoutLayer} images={images} >\n          <Feature\n            key={'clickedMarker'}\n            coordinates={this.state.center}\n          />\n        </Layer>\n      </Map>\n      </Fragment>\n    )\n  }\n}\n\nexport default MapForDisplay","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/address.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/bankingDetails.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/socialMediaIcons.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/whichLogo.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/numberMoneyDetails.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/groups/groupModal.component.js",["1096","1097","1098","1099","1100"],"import React, { useState } from 'react';\nimport { connect } from 'react-redux';\n\nimport { WhatCategories } from '../iconController/iconCategories.component';\nimport getRandomColour from '../utilities/randomMCColour.component';\nimport { LightenDarkenColor } from '../utilities/colourUtils';\nimport { deleteGroup, resettingDeleteGroup } from '../../Actions/groupActions';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimesCircle, faExternalLinkSquare } from '@fortawesome/pro-solid-svg-icons';\nimport { faEdit, faTrashAlt } from '@fortawesome/pro-duotone-svg-icons'\nimport imagePlaceholder from '../../assets/Images/temp.jpg';\nimport { Link } from 'react-router-dom';\nimport { Spinner } from 'react-bootstrap';\n\n\nconst GroupModalDashboard = ({ dispatch, group, setSelectedGroup, deleting, deleted, hasErrors }) => {\n  const [randomColour] = useState(getRandomColour())\n  const [confirmDelete, setConfirmDelete] = useState(false)\n\n  if (deleted) {\n    dispatch(resettingDeleteGroup())\n    setSelectedGroup(null)\n  }\n\n  return (\n    <div className=\"groupModalPage\" onClick={(e) => {\n      setSelectedGroup(null)\n    }}>\n      <div className=\"groupModal\" onClick={(e) => e.stopPropagation()} style={{background: \"linear-gradient(to bottom right, \"+LightenDarkenColor(randomColour, 20) +'b3'+\", \"+LightenDarkenColor(randomColour, -20)+'b3'+\")\"}}>\n        <FontAwesomeIcon icon={faTimesCircle} size=\"2x\" className=\"modalCloseButton\" onClick={() => setSelectedGroup(null)} />\n        <div className=\"modalTop\">\n          <div className=\"modalTopTop\">\n            <img src={group.groupImage ? group.groupImage : imagePlaceholder} alt=\"Whatsapp group logo\" />\n            <h1> {group.groupName} </h1>\n            <button className=\"standardButton squareButton redVersion\" disabled={deleting} onClick={() =>{\n              confirmDelete ? dispatch(deleteGroup(group._id)) : setConfirmDelete(true)\n            }}> {confirmDelete ? (deleting ? <Spinner animation=\"border\" size=\"sm\" />  : \"Are you sure?\") : <FontAwesomeIcon icon={faTrashAlt} /> } </button>\n          </div>\n          <div className=\"modalTopBottom\">\n            <p className=\"modalHeader\"> Description </p>\n            <p> {group.groupDescription} </p>\n            <p className=\"modalHeader\"> Admin </p>\n            <p> {group.groupAdmin} </p>\n            <p className=\"modalHeader\"> Admin Contact </p>\n            <p> {group.groupAdminContact} </p>\n          </div>\n        </div>\n        <div className=\"modalMiddle\">\n          <WhatCategories types={group.groupType} />\n        </div>\n        <div className=\"modalBottom\">\n          <p className=\"modalHeader\"> Affiliated Organisation </p>\n          <p> {group.affiliatedOrg ? \"This group is affiliated with your organisation\" : \"This group is not affiliated with your organisation\"} </p>\n        </div>\n        <GroupJoinLink group={group} randomColour={randomColour} />\n      </div>\n    </div>\n  )\n}\n\nconst GroupModal = ({ group, setSelectedGroup }) => {\n  const randomColour = getRandomColour()\n  return (\n    <div className=\"groupModalPage\" onClick={(e) => {\n      setSelectedGroup(null)\n    }}>\n      <div className=\"groupModal\" onClick={(e) => e.stopPropagation()} style={{background: \"linear-gradient(to bottom right, \"+LightenDarkenColor(randomColour, 20) +'b3'+\", \"+LightenDarkenColor(randomColour, -20)+'b3'+\")\"}}>\n        <FontAwesomeIcon icon={faTimesCircle} size=\"2x\" className=\"modalCloseButton\" onClick={() => setSelectedGroup(null)} />\n        <div className=\"modalTop\">\n          <div className=\"modalTopTop\">\n            <img src={group.groupImage ? group.groupImage : imagePlaceholder} alt=\"Whatsapp group logo\" />\n            <h1> {group.groupName} </h1>\n          </div>\n          <div className=\"modalTopBottom\">\n            <p className=\"modalHeader\"> Description </p>\n            <p> {group.groupDescription} </p>\n            <p className=\"modalHeader\"> Admin </p>\n            <p> {group.groupAdmin} </p>\n            <p className=\"modalHeader\"> Admin Contact </p>\n            <p> {group.groupAdminContact} </p>\n          </div>\n        </div>\n        <div className=\"modalMiddle\">\n          <WhatCategories types={group.groupType} />\n        </div>\n        {group.affiliatedOrg &&\n          <div className=\"modalBottom\">\n            <p className=\"modalHeader\"> Affiliated Organisation </p>\n            <Link to={\"/organisations/\" + group.affiliatedOrg._id}>\n              <div className=\"modalAffiliatedOrg\" style={{}}>\n                <img src={group.affiliatedOrg.imageURL ? group.affiliatedOrg.imageURL: imagePlaceholder} alt=\"Organisation Logo\" />\n                <p> <FontAwesomeIcon icon={faExternalLinkSquare} /> {group.affiliatedOrg.name} </p>\n              </div>\n            </Link>\n          </div>\n        }\n        <GroupJoinLink group={group} randomColour={randomColour} />\n      </div>\n    </div>\n  )\n}\n\nconst GroupJoinLink = ({ group, randomColour }) => {\n  if (group.privateGroup) {\n    return (\n      <p> This is a private group. Contact the admin to join. </p>\n    )\n  } else {\n    return (\n      <a href={group.groupWhatsappLink} style={{color: randomColour}} target=\"_blank\" rel=\"noopener noreferrer\"> <span> Join Group </span> </a>\n    )\n  }\n}\n\nconst MapsStateToProps = (state, ownProps) => ({\n  deleted: state.deleteInfo.deleteGroup.deleted,\n  deleting: state.deleteInfo.deleteGroup.deleting,\n  hasErrors: state.deleteInfo.deleteGroup.hasErrors,\n  group: ownProps.group,\n  setSelectedGroup: ownProps.setSelectedGroup\n})\n\nconst ConnectedGroupModalDashboard = connect(MapsStateToProps)(GroupModalDashboard)\n\nexport {\n  ConnectedGroupModalDashboard,\n  GroupModal\n}","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/colourUtils.js",["1101"],"function LightenDarkenColor(col, amt) {\n  \n  let usePound = false;\n\n  if (col[0] == \"#\") {\n      col = col.slice(1);\n      usePound = true;\n  }\n\n  let num = parseInt(col,16);\n\n  let r = (num >> 16) + amt;\n\n  if (r > 255) r = 255;\n  else if  (r < 0) r = 0;\n\n  let b = ((num >> 8) & 0x00FF) + amt;\n\n  if (b > 255) b = 255;\n  else if  (b < 0) b = 0;\n\n  let g = (num & 0x0000FF) + amt;\n\n  if (g > 255) g = 255;\n  else if (g < 0) g = 0;\n\n  return (usePound?\"#\":\"\") + (g | (b << 8) | (r << 16)).toString(16);\n\n}\n\nexport {\n  LightenDarkenColor\n}","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/dashboardView.component.js",["1102","1103","1104","1105","1106"],"import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Tabs, Panel } from \"@bumaga/tabs\";\nimport { Spinner } from \"react-bootstrap\";\n\nimport ProfileInfoView from \"./profile/profileInfoView.component\";\nimport OrganisationInfoViewDash from \"./organisations/organisationInfoViewDash.component\";\nimport EventView from \"./events/eventView.component\";\nimport GroupInfoView from \"./groups/groupInfoView.component\";\nimport ProjectView from \"./projects/projectView.component\";\nimport VolunteerView from \"./volunteer/volunteerView.component\";\n\nimport { getUserInfo } from \"../../Actions/userInfoActions\";\nimport getWindowDimensions from \"../utilities/windowDimension.component\";\nimport { Tab } from \"../utilities/tabComponent\";\nimport imagePlaceholder from \"../../assets/Images/temp.jpg\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faSignOutAlt,\n  faHomeLg,\n  faUserCircle,\n  faProjectDiagram,\n  faUsers,\n  faBox,\n  faBoxOpen,\n  faBoxFull,\n  faSitemap,\n  faPersonSign,\n  faHandsHelping,\n  faClock,\n  faExclamationTriangle,\n} from \"@fortawesome/pro-solid-svg-icons\";\n\nimport { logout } from \"../../Actions/authActions\";\n\nconst DashboardView = ({\n  dispatch,\n  fetched,\n  loading,\n  user,\n  userID,\n  orgsIdList,\n  hasErrors,\n  error,\n  props,\n}) => {\n  useEffect(() => {\n    if (!fetched) {\n      dispatch(getUserInfo());\n    }\n  }, [fetched, dispatch]);\n\n  const { width } = getWindowDimensions();\n\n  if (hasErrors) {\n    return (\n      <div className=\"erroruserInfoContainer\">\n        <p className=\"errorUserInfo\">\n          {\" \"}\n          <FontAwesomeIcon\n            className=\"errorIconUserInfo\"\n            icon={faExclamationTriangle}\n          />{\" \"}\n          Cannot get user info{\" \"}\n        </p>\n        <button className=\"standardButton\" onClick={() => dispatch(logout())}>\n          {\" \"}\n          <FontAwesomeIcon icon={faSignOutAlt} /> Logout{\" \"}\n        </button>\n      </div>\n    );\n  }\n\n  const renderSideBarText = width > 1150 ? true : false;\n\n  if (!loading && fetched) {\n    return (\n      <div className=\"dbLayout\">\n        <Tabs>\n          <div className=\"dbTopLeft\">\n            <img src={imagePlaceholder} alt=\"\" className=\"dbUserImage\" />\n            {renderSideBarText && <p> {user.username} </p>}\n          </div>\n          <div className=\"dbLeftBar\">\n            <Tab tabType=\"dashboardTab\" addClass=\"mcTabB\">\n              <FontAwesomeIcon icon={faUserCircle} />\n              {renderSideBarText && <p> Profile </p>}\n            </Tab>\n            <Tab tabType=\"dashboardTab\" addClass=\"mcTabC\">\n              <FontAwesomeIcon icon={faSitemap} />\n              {renderSideBarText && <p> Organisation </p>}\n            </Tab>\n            <Tab tabType=\"dashboardTab\" addClass=\"mcTabD\">\n              <FontAwesomeIcon icon={faProjectDiagram} />\n              {renderSideBarText && <p> Projects </p>}\n            </Tab>\n            <Tab tabType=\"dashboardTab\" addClass=\"mcTabE\">\n              <FontAwesomeIcon icon={faUsers} />\n              {renderSideBarText && <p> Groups </p>}\n            </Tab>\n            <Tab tabType=\"dashboardTab\" addClass=\"mcTabF\">\n              <FontAwesomeIcon icon={faBoxOpen} />\n              {renderSideBarText && <p> Distributions </p>}\n            </Tab>\n            <Tab tabType=\"dashboardTab\" addClass=\"mcTabA\">\n              <FontAwesomeIcon icon={faHandsHelping} />\n              {renderSideBarText && <p> Volunteer </p>}\n            </Tab>\n            {/* <button className=\"standardButton logoutButton\" onClick={() => { dispatch(logout()) }}> logout </button> */}\n          </div>\n          <div className=\"dbBody\">\n            {/* <Panel>\n            <div className=\"comingSoonContainer\">\n              <p className=\"mcRedBG\"> <FontAwesomeIcon icon={faClock} style={{marginRight: \"8px\"}} /> Coming Soon </p>\n            </div>\n          </Panel> */}\n            <Panel>\n              <ProfileInfoView user={user[userID]} />\n            </Panel>\n            <Panel>\n              <OrganisationInfoViewDash orgsIdList={orgsIdList} />\n            </Panel>\n            <Panel>\n              <ProjectView />\n            </Panel>\n            <Panel>\n              <GroupInfoView />\n            </Panel>\n            <Panel>\n              <EventView />\n            </Panel>\n            <Panel>\n              <VolunteerView volunteer={user[userID].volunteer} />\n            </Panel>\n          </div>\n        </Tabs>\n      </div>\n    );\n  } else {\n    return (\n      <div className=\"loadingSpinner\">\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      </div>\n    );\n  }\n};\n\nconst MapStateToProps = (state, ownProps) => ({\n  fetched: state.userInfo.fetched,\n  loading: state.userInfo.loading,\n  user: state.userInfo.user,\n  userID: state.userInfo.userID,\n  orgsIdList: state.userInfo.entityIds.createdOrganisations,\n  hasErrors: state.userInfo.hasErrors,\n  error: state.userInfo.error,\n  props: ownProps,\n});\n\nexport default connect(MapStateToProps)(DashboardView);\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/login/loginContainer.component.js",["1107"],"import React, { useState } from 'react';\nimport { Helmet } from 'react-helmet'\n\nimport LoginForm from './loginForm.component';\nimport SignUpSheet from './SignUpSheet.component';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserCircle } from '@fortawesome/pro-solid-svg-icons';\n\nconst LoginContainer = ({  }) => {\n  const [signUp, setSignUp] = useState(false)\n\n  return (\n    <>\n      <Helmet>\n        <html lang=\"en\" />\n        <meta name=\"description\" content=\"Dashboard for your MC account where you can add, edit or delete all your information\" />\n      </Helmet>\n      <div className=\"loginFormContainer\">\n        <div className=\"loginForm\">\n          <div className=\"loginFormHeader\">\n            <FontAwesomeIcon icon={faUserCircle} />\n            <p> {signUp ? \"Sign Up\" : \"Log In\"} </p>\n          </div>\n          <div className=\"loginFormContent\">\n            {\n              signUp\n              ?\n              <SignUpSheet setSignUp={setSignUp} />\n              :\n              <LoginForm setSignUp={setSignUp} />\n            }\n          </div>\n        </div>\n      </div>\n    </>\n  )\n\n}\n\nexport default LoginContainer","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/homeView/mainFooter.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/starRing.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/filterOptions.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapListView.component.js",["1108","1109","1110"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useHistory } from 'react-router-dom'\n\nimport { selectingObject, toggleShowList, toggleMapModal, selectedProjectMarker } from '../../Actions/mapSelectActions';\nimport filterAndSearch from '../utilities/filterAndSearch';\nimport { searchEvents, filterEvents } from '../../Actions/filterSearchMapAction';\nimport { GenericModalPortal, GenericModalNew } from '../sharedComponents/genericModal.component';\nimport LoadingSpinner from '../utilities/loadingSpinner.component';\n\nimport MapModalOptions from './mapModalOptions.component';\nimport EventInfoView from './eventInfoView.component';\nimport EventListItem from './eventListItem.component';\nimport ProjectListItem from './projectListItem.component';\nimport MapListControl from './mapListControl.component';\n\nconst MapListView = ({dispatch, filteredObjects, mapMode, showModal, selectedObject, selectedProject, searchValue, showList, loading}) => {\n\n  if (showList) {\n    return (\n      <div className=\"eventListContainer\">\n        {showModal &&\n          <GenericModalPortal>\n            <GenericModalNew scheme=\"dark\" showModal={() => dispatch(toggleMapModal())}>\n              <MapModalOptions showModal={() => dispatch(toggleMapModal())} />\n            </GenericModalNew>\n          </GenericModalPortal>\n        }\n        <MapListControl dispatch={dispatch} />\n        <hr className=\"searchBarSpace\"/>\n        <div className=\"eventItemList\" id=\"objectList\">\n          <ListOfObjects dispatch={dispatch} loading={loading} mapMode={mapMode} selectedProject={selectedProject} objects={filteredObjects} />\n        </div>\n      </div>\n    )\n  } else {\n    return (\n      <EventInfoView event={selectedObject} onClick={() => {\n        dispatch(selectingObject(null))\n        dispatch(toggleShowList())\n      }} />\n    )\n  }\n}\n\nconst resetSearchAndFilter = (dispatch) => {\n  dispatch(searchEvents(\"\"))\n  dispatch(filterEvents(\"all\"))\n}\n\nconst ListOfObjects = ({ dispatch, mapMode, objects, selectedProject, loading }) => {\n  const history = useHistory();\n  const refs = objects.reduce((acc, value) => {\n    acc[value._id] = React.createRef();\n    return acc;\n  }, {})\n\n  useEffect(() => {\n    if (selectedProject) {\n      refs[selectedProject].current.scrollIntoView({\n        behavior: 'smooth',\n        block: 'start',\n      });\n    }\n  }, [selectedProject])\n\n  if (loading) return <LoadingSpinner style={{ height: \"200px\" }} />\n\n  switch(mapMode) {\n    case \"PROJECTS\":\n      {return objects.map((object) => {\n        return (\n          <div ref={refs[object._id]} className={\"eventItem\" + (selectedProject === object._id ? \" active\" : \"\")} key={object._id} onClick={() => {\n            dispatch(selectedProjectMarker(object._id))\n          }}>\n            <ProjectListItem project={object} />\n          </div>\n        )\n      })}\n    case \"EVENTS\":\n      {return objects.map((object) => {\n        return (\n          <div className=\"eventItem\" key={object._id} onClick={() => {\n            dispatch(selectingObject(object))\n            dispatch(toggleShowList())\n            resetSearchAndFilter(dispatch)\n          }}>\n            <EventListItem event={object} />\n          </div>\n        )\n      })}\n    default:\n      return null\n  }\n}\n\nconst MapStateToProps = (state) => ({\n  filteredObjects: filterAndSearch(state.mapInfo.mapActions.objects, state.mapInfo.mapActions.mapMode, state.mapInfo.mapActions.filterCategory, state.mapInfo.mapActions.filter, state.mapInfo.mapActions.search),\n  loading: state.mapInfo.mapActions.loading,\n  mapMode: state.mapInfo.mapActions.mapMode,\n  showList: state.mapInfo.mapActions.showList,\n  selectedObject: state.mapInfo.mapActions.selectedObject,\n  selectedProject: state.mapInfo.mapActions.selectedProject,\n  searchValue: state.mapInfo.mapActions.search,\n  showModal: state.mapInfo.mapActions.showModal\n});\n\nexport default connect(MapStateToProps)(MapListView);","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapViewGoogle.component.js",["1111","1112","1113","1114","1115","1116","1117"],"import React, { useState, useEffect, memo, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport { GoogleMap, useLoadScript } from '@react-google-maps/api';\n\nimport * as MapLayerType from './mapLayerTypes';\nimport MapMarkers from './mapMarkers.component';\nimport MapLayer from './mapLayer.component';\nimport MapSelectModal from './mapSelectModal.component';\nimport MapLayerNational from './mapLayerNational.component';\nimport MapLegend from './mapLegend.component';\n\nimport filterAndSearch from '../utilities/filterAndSearch';\nimport { selectingObject, toggleShowList, justSelectedObject, toggleMapModal, selectedProjectMarker } from '../../Actions/mapSelectActions';\nimport { getMapEventInfo, getMapProjectInfo, getMapResetFetch } from '../../Actions/mapInfoActions';\nimport { loadingLayer } from '../../Actions/mapActions';\nimport { GOOGLE_API_KEY } from '../../config';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTh } from '@fortawesome/pro-duotone-svg-icons';\n\n/* global google */\n\n// import { fal } from '@fortawesome/pro-light-svg-icons';\n\n// import circle from '../../assets/circle.png';\n\nconst libraries = []\nlet objectKeys = []\n\nconst MapView = ({ justSelected, dispatch, mapMode, search, filter, filterCategory, mapLayerData, mapLayerToDisplay, selectedObject, selectedProject, showList, fetched, filteredObjects, mapLayer }) => {\n  const [map, setMap] = useState(null)\n  const [mapBounds, setMapBounds] =useState(null)\n  const [zoomLevel, setZoomLevel] = useState(null)\n  const [computeDict, setComputeDict] = useState(false)\n  const [showInfo, setShowInfo] = useState(false)\n  const [layerSelectedOnce, setLayerSelectedOnce] = useState(false)\n\n  useEffect(() => {\n    switch(mapMode) {\n      case \"PROJECTS\":\n        dispatch(getMapProjectInfo())\n        return\n      case \"EVENTS\":\n        dispatch(getMapEventInfo())\n        return\n      default:\n        dispatch(getMapProjectInfo())\n        return\n    }\n  }, [mapMode, filter, filterCategory, search])\n\n  useEffect(() => {\n    if (fetched && !computeDict) {\n      setComputeDict(true)\n      filteredObjects.forEach((object) => {\n        objectKeys[object._id] = {...object}\n      });\n    }\n\n    dispatch(loadingLayer(MapLayerType.NONE))\n  }, [fetched, computeDict])\n  \n  const { isLoaded, loadError } = useLoadScript({\n    googleMapsApiKey: GOOGLE_API_KEY,\n    libraries\n  })\n\n  const containerStyle = {\n    width: '100%',\n    height: '100%'\n  }\n  \n  const center = {\n    lat: 31.04318239643529,\n    lng:  70.04074184374998\n  }\n\n  const options = {\n    disableDefaultUI: true,\n    zoomControl: true,\n    mapTypeControl: true,\n    rotateControl: true,\n  }\n\n  const onLoad = useCallback(function callback(map) {\n    // const bounds = new window.google.maps.LatLngBounds();\n    // map.fitBounds(bounds);\n    setMap(map)\n    setZoomLevel(6)\n    map.setZoom(6)\n    map.setCenter(center)\n    let bounds = map.getBounds()\n    setMapBounds(bounds)\n    map.setOptions({\n      zoomControlOptions: {\n        position: google.maps.ControlPosition.TOP_LEFT\n      }\n    })\n  }, [])\n\n  const onUnmount = useCallback(function callback(map) {\n    setMap(null)\n    setMapBounds(null)\n    setZoomLevel(null)\n  }, [])\n\n  const onMarkerClick = (objectId) => {\n    map.setCenter({ lat: objectKeys[objectId].location.coordinates[1], lng: objectKeys[objectId].location.coordinates[0] }) //0.008 guess value. In future need a concrete way to convert pixels to lat and long for centering\n    map.setZoom(15)\n    switch(mapMode) {\n      case \"PROJECTS\":\n        dispatch(selectedProjectMarker(objectId))\n        return\n      case \"EVENTS\":\n        dispatch(selectingObject(objectKeys[objectId]))\n        if (showList) {\n          dispatch(toggleShowList())\n        }\n        return\n      default:\n        //nothing\n    }\n  }\n\n  const onZoomChanged = () => {\n    if (map) {\n      setZoomLevel(map.zoom)\n      setMapBounds(createExtendedBounds(map))\n    }\n  }\n\n  const onDrag = () => {\n    if (selectedObject) {\n      dispatch(selectingObject(null))\n      dispatch(toggleShowList())\n    }\n    if (selectedProject) {\n      dispatch(selectedProjectMarker(null))\n    }\n    setShowInfo(false)\n  }\n\n  const onDragEnd = () => {\n    setMapBounds(createExtendedBounds(map))\n  }\n\n  const onClick = () => {\n    setShowInfo(false)\n  }\n\n  if (loadError) return <div> error </div>\n  if (!isLoaded) return <div>  </div>\n\n  if (selectedObject && justSelected) {\n    dispatch(justSelectedObject())\n    //Hard code the moving map to centralise it. These values are pretty yolo only working for zoom level 15\n    // map.setCenter({ lat: selectedObject.location.coordinates[1] + 0.0002628164259, lng: selectedObject.location.coordinates[0] + 0.009922714459})\n    map.setCenter({ lat: selectedObject.location.coordinates[1], lng: selectedObject.location.coordinates[0]})\n    // map.zoom = 15\n    setTimeout(() => {\n      map.setZoom(15)\n    }, 100);\n  }\n\n  if (mapLayerToDisplay !== MapLayerType.NONE && !layerSelectedOnce) {\n    setLayerSelectedOnce(true)\n    if (map) {\n      setMapBounds(createExtendedBounds(map))\n    }\n  }\n  \n  return (\n    <>\n    <GoogleMap\n      onClick={() => onClick()}\n      onDragEnd={() => onDragEnd()}\n      onZoomChanged={() => onZoomChanged()}\n      onDrag={() => onDrag()}\n      mapContainerStyle={containerStyle}\n      onLoad={onLoad}\n      onUnmount={onUnmount}\n      options={options}\n    >\n      <MapLegend mapLayerToDisplay={mapLayerToDisplay} />\n      <MapMarkers objects={filteredObjects} onMarkerClick={onMarkerClick} />\n      <MapSelectModal dispatch={dispatch} selectedProject={objectKeys[selectedProject]} />\n      <MapLayer mapBounds={mapBounds} zoomLevel={zoomLevel} showInfo={showInfo} setShowInfo={setShowInfo} />\n      <MapLayerNational mapLayerToDisplay={mapLayerToDisplay} zoomLevel={zoomLevel}  />\n    </GoogleMap >\n    </>\n  );\n}\n\n\nconst createExtendedBounds = (map) => {\n  //0.5 degress in lng roughly translates to 55,555m VERY ROUGH\n  //111,111 * cos(lat) is 11 degree of lat\n  //https://gis.stackexchange.com/questions/2951/algorithm-for-offsetting-a-latitude-longitude-by-some-amount-of-meters\n    let bounds = map.getBounds()\n    let NE = bounds.getNorthEast()\n    let SW = bounds.getSouthWest()\n    let newNE = { lat: NE.lat() + 0.2, lng: NE.lng() + 0.2}\n    let newSW = { lat: SW.lat() - 0.2, lng: SW.lng() - 0.2}\n    bounds.extend(newNE)\n    bounds.extend(newSW)\n    return bounds\n  }\n\n\nconst MapStateToProps = (state) => ({\n  selectedObject: state.mapInfo.mapActions.selectedObject,\n  justSelected: state.mapInfo.mapActions.justSelected,\n  selectedProject: state.mapInfo.mapActions.selectedProject,\n  mapMode: state.mapInfo.mapActions.mapMode,\n  showList: state.mapInfo.mapActions.showList,\n  fetched: state.mapInfo.mapActions.fetched,\n  mapLayer: state.mapInfo.mapData.mapLayer,\n  mapLayerToDisplay: state.mapInfo.mapData.mapLayerToDisplay,\n  mapLayerData: state.mapInfo.mapData.mapStoredData,\n  filterCategory: state.mapInfo.mapActions.filterCategory,\n  filter: state.mapInfo.mapActions.filter,\n  search: state.mapInfo.mapActions.search,\n  filteredObjects: filterAndSearch(state.mapInfo.mapActions.objects, state.mapInfo.mapActions.mapMode, state.mapInfo.mapActions.filterCategory, state.mapInfo.mapActions.filter, state.mapInfo.mapActions.search)\n});\n\nexport default memo(connect(MapStateToProps)(MapView))","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/utilities/windowDimension.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/events/eventView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/login/SignUpSheet.component.js",["1118"],"import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserPlus, faHandsHelping } from '@fortawesome/pro-solid-svg-icons';\n// import { faFacebook, faGoogle } from '@fortawesome/free-brands-svg-icons';\n\nconst SignUpSheet = ({ setSignUp }) => {\n  const history = useHistory();\n\n  const navigateToUserSignup = () => history.push('/signup')\n  const navigateToUserVolunteerSignup = () => history.push('/createUserVolunteer')\n\n  return (\n    <div style={{ width: \"100%\" }}>\n      <button onClick={navigateToUserSignup} className=\"standardButtonWithoutColour mcLightBG\" style={{marginBottom: '8px', height: '2.2em', fontWeight: \"bold\", width: \"100%\" }}>\n        <FontAwesomeIcon icon={faUserPlus} style={{ marginRight: '8px' }} />\n        Sign Up\n      </button>\n      <button onClick={navigateToUserVolunteerSignup} className=\"standardButtonWithoutColour mcLightBG\" style={{marginBottom: '8px', height: '2.2em', fontWeight: \"bold\", width: \"100%\" }}>\n        <FontAwesomeIcon icon={faHandsHelping} style={{ marginRight: '8px' }} />\n        Sign Up as a Volunteer\n      </button>\n      {/* <button className=\"standardButtonWithoutColour mcLightBG\" style={{marginBottom: '8px', height: '2.2em', fontWeight: \"bold\", width: \"100%\" }}>\n        <FontAwesomeIcon icon={faFacebook} style={{ marginRight: '8px' }} />\n        Sign Up with Facebook\n      </button> */}\n      {/* <button className=\"standardButtonWithoutColour mcLightBG\" style={{height: '2.2em', fontWeight: \"bold\", width: \"100%\" }}>\n        <FontAwesomeIcon icon={faGoogle} style={{ marginRight: '8px' }} />\n        Sign Up with Google\n      </button> */}\n    </div>\n  )\n}\n\nexport default SignUpSheet\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/profile/profileInfoView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/organisationInfoViewDash.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/groups/groupInfoView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/projectView.component.js",["1119","1120","1121"],"import React from 'react'\n\nimport HeaderIcons from '../HeaderIcons.component';\nimport ProjectContentView from './projectContentView.component';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faProjectDiagram } from '@fortawesome/pro-solid-svg-icons'\n\nconst ProjectView = ({ orgsIdList }) => {\n  return (\n    <div className=\"projectViewContainer\">\n      {/* <div className=\"projectViewHeader\">\n        <div className=\"projectViewTextIcon\">\n          <FontAwesomeIcon icon={faProjectDiagram} />\n          <p> Projects </p>\n        </div>\n        <HeaderIcons />\n      </div> */}\n      <div className=\"projectViewContent\">\n        <ProjectContentView />\n      </div>\n    </div>\n  )\n}\n\nexport default ProjectView","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/volunteer/volunteerView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/projectListItem.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/eventInfoView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapModalOptions.component.js",["1122","1123"],"import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { FilterRationType, FilterOrgType } from '../utilities/filterOptions'\nimport { filterEvents, filterCategoryType } from '../../Actions/filterSearchMapAction';\n\nimport { FilterProjectCategory } from '../utilities/filterOptions';\nimport MapSettingLayerList from './MapSettingLayerList.component';\n\nconst MapModalOptions = ({ dispatch, showModal, mapMode, filter, filterCategory }) => {\n  return (\n    <>\n      <MapSettingLayerList showModal={showModal} />\n      <br />\n      <MapModalOptionalSettings dispatch={dispatch} showModal={showModal} mapMode={mapMode} filter={filter} filterCategory={filterCategory} />\n    </>\n  )\n}\n\nconst MapModalOptionalSettings = ({ dispatch, mapMode, filter, filterCategory, showModal }) => {\n  switch(mapMode) {\n    case \"PROJECTS\":\n      return <MapModalProjectOptions dispatch={dispatch} filterCategory={filterCategory} showModal={showModal} />\n    case \"EVENTS\":\n      return <MapModalEventOptions dispatch={dispatch} filter={filter} filterCategory={filterCategory} />\n    default:\n      return null\n  }\n}\n\nconst MapModalProjectOptions = ({ dispatch, filterCategory, showModal }) => {\n  return (\n    <>\n      <h6 className=\"filterProjectCategoryTitle\"> Filter projects by category </h6>\n      <FilterProjectCategory dispatch={dispatch} filterCategory={filterCategory} showModal={showModal} />\n    </>\n  )\n}\n\nconst MapModalEventOptions = ({ dispatch, filter, filterCategory }) => {\n  const onFilterChangeType = (event) => {\n    dispatch(filterCategoryType(event.target.value))\n  }\n  \n  // const onFilterChange = (event) => {\n  //   dispatch(filterEvents(event.target.value))\n  // }\n\n  return (\n    <div className=\"filters\">\n      <p className=\"mapModalLayerTitle\"> Filter By Category </p>\n      <div className=\"filterSelect\">\n        <FilterRationType onChange={onFilterChangeType} value={filterCategory} />\n      </div>\n      {/* <p className=\"mapModalLayerTitle\"> Filter By Organisation Type </p>\n      <div className=\"filterSelect\">\n        <FilterOrgType onChange={onFilterChange} value={filter} />\n      </div> */}\n    </div>\n  )\n}\n\nconst MapStateToProps = (state) => ({\n  mapMode: state.mapInfo.mapActions.mapMode,\n  filter: state.mapInfo.mapActions.filter,\n  filterCategory: state.mapInfo.mapActions.filterCategory\n})\n\nexport default connect(MapStateToProps)(MapModalOptions)","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/eventListItem.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapListControl.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapLayer.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapSelectModal.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapMarkers.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapLegend.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/mapLayerNational.component.js",["1124"],"import React, { useEffect, memo } from 'react';\nimport { connect } from 'react-redux';\n\nimport * as MapLayerType from './mapLayerTypes';\nimport { loadingNationalLayer } from '../../Actions/mapActions';\nimport { createNationalPolygon } from './createPolygon';\n\nconst MapLayerNational = ({ dispatch, nationalLayerData, zoomLevel, mapLayerToDisplay }) => {\n  useEffect(() => {\n    console.log(\"run once\")\n    dispatch(loadingNationalLayer())\n  }, [dispatch])\n\n  if (zoomLevel < 10) {\n    return null\n  }\n\n  if (nationalLayerData && mapLayerToDisplay === MapLayerType.UC) {\n    return nationalLayerData.features.map((feature) => {\n      return createNationalPolygon(feature)\n    })\n  } else {\n    return null\n  }\n}\n\nconst MapStateToProps = (state) => ({\n  nationalLayerData: state.mapInfo.mapData.mapStoredData[MapLayerType.NATIONAL]\n})\n\nexport default memo(connect(MapStateToProps)(MapLayerNational))","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/volunteer/volunteerContentView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/events/eventsContainer.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/HeaderIcons.component.js",["1125","1126"],"import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { logout } from '../../Actions/authActions'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUser, faBell, faSignOut } from '@fortawesome/pro-duotone-svg-icons';\n\nconst HeaderIcons = ({ dispatch }) => {  \n  return (\n    <div className=\"headerIconContainer\">\n      {/* <button className=\"headerButton\">\n        <div className=\"dbHeaderIcon dbIconBg\">\n          <FontAwesomeIcon icon={faBell} className=\"dbFaBell dbIconFont\" />\n        </div>\n      </button> */}\n      <button className=\"headerButton\" onClick={() => { dispatch(logout()) }}>\n        <div className=\"dbHeaderIcon dbIconBg logoutIcon\">\n          <FontAwesomeIcon icon={faSignOut} className=\"dgFaSignOut dbIconFont\" />\n        </div>\n      </button>\n    </div>\n  )\n}\n\nexport default connect()(HeaderIcons)","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/organisationDashboardContent.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/projectContentView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/MapSettingLayerList.component.js",["1127"],"import React, { useState, useEffect, useRef } from 'react';\nimport { connect } from 'react-redux';\nimport { loadingLayer, loadingLsoLayer } from '../../Actions/mapActions';\nimport { Spinner } from 'react-bootstrap';\n\nimport * as MapLayerType from './mapLayerTypes';\n\nconst MapSettingLayerList = ({ dispatch, loading, mapLayer, showModal }) => {\n  const [activeButton, setActiveButton] = useState(mapLayer)\n  const [activeToolTip, setActiveToolTip] = useState(null)\n  const firstUpdate = useRef(true);\n\n  useEffect(() => {\n    if (firstUpdate.current) {\n      firstUpdate.current = false;\n      return;\n    }\n    if (mapLayer !== MapLayerType.NONE) {\n      showModal()\n    }\n  }, [mapLayer])\n\n  const checkActiveState = (type) => {\n    if (type === activeButton) {\n      return \"active\"\n    } else return \"\"\n  }\n\n  const checkActiveToolTip = (type) => {\n    if (type === activeToolTip) {\n      return \"showToolTip\"\n    } else return \"\"\n  }\n\n  const whichButton = (type) => {\n    if (loading) {\n      if (type === activeButton) {\n        return <LoadingSpinner />\n      } else {\n        return type\n      }\n    } else {\n      return type\n    }\n  }\n\n  const LoadingSpinner = () => {\n    return (\n      <div className=\"loadingSpinner\">\n        <Spinner animation=\"border\" role=\"status\" size=\"sm\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      </div>\n    )\n  }\n\n  return (\n    <>\n    <h6 className=\"mapModalLayerTitle\"> Map Layers </h6>\n    <div className=\"MapViewLayerListContainer\">\n      <div className=\"MapLayerButtonContainer\">\n        <button className={\"MapLayerButton \" + checkActiveState(MapLayerType.NONE)}\n        onClick={(e) => {\n          setActiveButton(MapLayerType.NONE)\n          dispatch(loadingLayer(MapLayerType.NONE))\n        }}> {whichButton(MapLayerType.NONE)} </button>\n      </div>\n\n      <div className=\"MapLayerButtonContainer\">\n        <button className={\"MapLayerButton \" + checkActiveState(MapLayerType.UC)}\n          onClick={(e) => {\n            setActiveButton(MapLayerType.UC)\n            dispatch(loadingLayer(MapLayerType.UC))\n          }}\n          onMouseOver={() => setActiveToolTip(MapLayerType.UC)}\n          onMouseLeave={() => setActiveToolTip(null)}\n        > {whichButton(MapLayerType.UC)} </button>\n        <p className={\"toolTip \" + checkActiveToolTip(MapLayerType.UC)}> Union Council </p>\n      </div>\n\n      <div className=\"MapLayerButtonContainer\">\n        <button className={\"MapLayerButton \" + checkActiveState(MapLayerType.TEHSIL)}\n          onClick={(e) => {\n            setActiveButton(MapLayerType.TEHSIL)\n            dispatch(loadingLayer(MapLayerType.TEHSIL))\n          }}\n          onMouseOver={() => setActiveToolTip(MapLayerType.TEHSIL)}\n          onMouseLeave={() => setActiveToolTip(null)}\n        > {whichButton(MapLayerType.TEHSIL)} </button>\n        <p className={\"toolTip \" + checkActiveToolTip(MapLayerType.TEHSIL)}> Tehsils </p>\n      </div>\n\n      <div className=\"MapLayerButtonContainer\">\n        <button className={\"MapLayerButton \" + checkActiveState(MapLayerType.DISTRICT)}\n          onClick={(e) => {\n            setActiveButton(MapLayerType.DISTRICT)\n            dispatch(loadingLayer(MapLayerType.DISTRICT))\n          }}\n          onMouseOver={() => setActiveToolTip(MapLayerType.DISTRICT)}\n          onMouseLeave={() => setActiveToolTip(null)}\n        > {whichButton(MapLayerType.DISTRICT)} </button>\n        <p className={\"toolTip \" + checkActiveToolTip(MapLayerType.DISTRICT)}> Districts </p>\n      </div>\n\n      <div className=\"MapLayerButtonContainer\">\n        <button className={\"MapLayerButton \" + checkActiveState(\"LSO\")}\n          onClick={(e) => {\n            setActiveButton(\"LSO\")\n            dispatch(loadingLsoLayer())\n          }}\n          onMouseOver={() => setActiveToolTip(\"LSO\")}\n          onMouseLeave={() => setActiveToolTip(null)}\n        > {whichButton(\"LSO\")} </button>\n        <p className={\"toolTip \" + checkActiveToolTip(\"LSO\")}> Local Support Organisations </p>\n      </div>\n    </div>\n    </>\n  )\n}\n\nconst MapStateToProps = (state) => ({\n  loading: state.mapInfo.mapData.loadingMapLayer,\n  mapLayer: state.mapInfo.mapData.mapLayerToDisplay\n})\n\nexport default connect(MapStateToProps)(MapSettingLayerList);","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/createPolygon.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/map/changeMapModeButton.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/volunteer/volunteerSelectionView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/events/eventAccordionContainer.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/organisationCard.component.js",["1128"],"import React from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport StandardCard from '../../sharedComponents/standardCard.component';\n\nconst OrganisationCard = ({ org, setSelectedOrg, orgBGColour, orgTextColour }) => {\n  return (\n    <div className={\"orgCardDash grow \" + orgBGColour} onClick={setSelectedOrg}>\n      <StandardCard name={org.name} image={org.imageURL} orgTextColour={orgTextColour} />\n    </div>\n  )\n}\n\nexport default OrganisationCard","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/singleOrganisationInfo.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/orgSelection.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/ProjectListView.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/volunteer/volunteerProfile.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/volunteer/volunteerRequestsInfo.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/orgInfo/orgBank.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/orgInfo/orgProfileInfo.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/orgInfo/orgLogo.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/projectList.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/orgInfo/orgSponsoringRequests.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/orgInfo/orgSponsoring.components.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/organisations/orgInfo/orgSocial.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/userImagePlaceholder.component.js",["1129","1130","1131"],"import React from 'react'\n\nimport userImage from '../../assets/Images/user.png'\nimport { faUser } from '@fortawesome/pro-solid-svg-icons';\nimport { FontAwsomeIcon } from '@fortawesome/react-fontawesome';\n\nconst UserImagePlaceholder = ({ image, style, parent=\"user-image\" }) => {\n  const usedImage = image ? image : userImage\n  return <img src={usedImage} style={style} />\n}\n\nexport default UserImagePlaceholder","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/volunteer/volunteerRequests.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/buttons.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/selectedProjectView.component.js",["1132","1133","1134"],"import React, { useState, useEffect, useCallback } from \"react\";\n\nimport ProjectSupplies from \"./supplyTab/projectSupplies.component\";\nimport ProjectInfoTab from \"./projectInfoTab.component\";\nimport ProjectFunding from \"./fundingTab/projectFunding.component\";\nimport ProjectVolunteer from \"./volunteerTab/volunteerTab.component\";\nimport FaqTab from \"./faqTab/faqTab.component\";\nimport UpdateTab from \"./updateTab/updateTab.component\";\nimport PublishButton from \"./publishButton.component\";\nimport { Tabs, Panel } from \"@bumaga/tabs\";\nimport { Tab } from \"../../utilities/tabComponent\";\n\nimport {\n  selectProjectDash,\n  selectProjectDashSupply,\n} from \"../../../Actions/projectActions\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronCircleLeft } from \"@fortawesome/pro-solid-svg-icons\";\nimport { useDispatch } from \"react-redux\";\n\nconst SelectedProjectView = ({\n  project,\n  suppliesDict,\n  volunteerDict,\n  volunteerRequestDict,\n  updatesDict,\n}) => {\n  const dispatch = useDispatch();\n  const [pageTitle, setPageTitle] = useState(\"Project Info\");\n\n  useEffect(() => {\n    return function () {\n      dispatch(selectProjectDash(null));\n      dispatch(selectProjectDashSupply(null));\n    };\n  }, []);\n\n  return (\n    <>\n      <div className=\"headerButtonsContainer\">\n        <button\n          className=\"standardButtonWithoutColour mcGreenBG\"\n          onClick={() => dispatch(selectProjectDash(null))}\n        >\n          {\" \"}\n          <FontAwesomeIcon\n            icon={faChevronCircleLeft}\n            style={{ textAlign: \"left\", marginRight: \"0.3em\" }}\n          />{\" \"}\n          Back{\" \"}\n        </button>\n        <PublishButton project={project} />\n        {pageTitle && <h3 style={{ display: \"none\" }}> {project.name} </h3>}\n      </div>\n      <Tabs>\n        <div className=\"projectViewMinorContainer\">\n          <div className=\"projectTabBar\">\n            <div className=\"projectTabs\">\n              <Tab\n                tabType=\"projectTab\"\n                passedOnClick={() => setPageTitle(\"Project Info\")}\n              >\n                <p> Project Info </p>\n              </Tab>\n              <Tab\n                tabType=\"projectTab\"\n                passedOnClick={() => setPageTitle(\"Project Funding\")}\n              >\n                <p> Funding </p>\n              </Tab>\n              <Tab\n                tabType=\"projectTab\"\n                passedOnClick={() => setPageTitle(\"Project Supplies\")}\n              >\n                <p> Supplies </p>\n              </Tab>\n              <Tab\n                tabType=\"projectTab\"\n                passedOnClick={() => setPageTitle(\"Project Volunteers\")}\n              >\n                <p> Volunteers </p>\n              </Tab>\n              <Tab\n                tabType=\"projectTab\"\n                passedOnClick={() => setPageTitle(\"Project FAQ\")}\n              >\n                <p> FAQ </p>\n              </Tab>\n              <Tab\n                tabType=\"projectTab\"\n                passedOnClick={() => setPageTitle(\"Project Updates\")}\n              >\n                <p> Updates </p>\n              </Tab>\n            </div>\n          </div>\n          <div className=\"projectTabContent\">\n            <Panel>\n              <ProjectInfoTab project={project} />\n            </Panel>\n            <Panel>\n              <div className=\"emptyDBContainer\">\n                {\" \"}\n                <p className=\"comingSoonText\"> Coming Soon </p>{\" \"}\n              </div>\n              {/* <ProjectFunding project={project} /> */}\n            </Panel>\n            <Panel>\n              <ProjectSupplies project={project} suppliesDict={suppliesDict} />\n            </Panel>\n            <Panel>\n              <ProjectVolunteer\n                project={project}\n                volunteerRequestDict={volunteerRequestDict}\n                volunteerDict={volunteerDict}\n              />\n            </Panel>\n            <Panel>\n              <FaqTab project={project} />\n            </Panel>\n            <Panel>\n              <UpdateTab project={project} updatesDict={updatesDict} />\n            </Panel>\n          </div>\n        </div>\n      </Tabs>\n    </>\n  );\n};\n\nexport default SelectedProjectView;\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/projectCard/projectCard.component.js",["1135"],"import React from 'react';\n\nimport ProjectCardSheet from './projectCardSheet.component';\nimport imagePlaceholder from '../../../../assets/Images/temp.jpg';\n\nconst ProjectCard = ({ project, suppliesDict, volunteerDict, onClick }) => {\n  let image = null\n  if (project.images && project.images.length !== 0) {\n    image = project.images[0]\n  } else {\n    image = imagePlaceholder\n  }\n\n  return (\n    <div className=\"projectCardContainer\">\n      <div className=\"projectCardSheet\">\n        <ProjectCardSheet project={project} suppliesDict={suppliesDict} volunteerDict={volunteerDict} />\n      </div>\n      <div className=\"projectCard\" onClick={onClick}>\n        <div className=\"projectCardTop\">\n          <img src={image} />\n        </div>\n        <div className=\"projectCardBottom\">\n          <p> {project.name} </p>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default ProjectCard","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/volunteer/volunteerRequestCard.component.js",["1136"],"import React from \"react\";\n\nconst VolunteerRequestCard = ({ request, setSelectedRequest }) => {\n  return (\n    <div\n      className=\"group h-60 w-48 relative overflow-hidden rounded-2xl shadow-solid hover:shadow transition transform duration-500 ease-in-out hover:scale-105 cursor-pointer\"\n      onClick={() => setSelectedRequest(request)}\n    >\n      <h5 className=\"absolute text-white font-bold bottom-4 left-4 z-20 transition transform duration-500 group-hover:-translate-y-1 group-hover:scale-105\">\n        {request.requestedProject.name}\n      </h5>\n      <div className=\"absolute top-0 left-0 h-60 w-48 bg-gradient-to-t from-black via-transparent opacity-50 z-10\"></div>\n      <img\n        className=\"h-full w-full object-cover transition transform duration-500 scale-105 group-hover:scale-100 group-hover:-translate-y-2\"\n        src={request.requestedProject.images[0]}\n      />\n    </div>\n  );\n};\n\nexport default VolunteerRequestCard;\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/projectInfoTab.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/publishButton.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/faqTab/faqTab.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/supplyTab/projectSupplies.component.js",["1137"],"import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport { useDispatch } from 'react-redux';\n\nimport SelectedProjectSupply from './selectedProjectSupply.component';\nimport GenericModal from '../../../sharedComponents/genericModal.component';\nimport AddSupplyForm from './addSupplyForm.component';\nimport { selectProjectDashSupply } from '../../../../Actions/projectActions';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\n\nconst ProjectSupplies = ({ project, selectedSupplyID, suppliesDict }) => {\n  if (selectedSupplyID) {\n    return (\n      <SelectedProjectSupply project={project} supply={suppliesDict[selectedSupplyID]} />\n    )\n  } else {\n    return (\n      <ProjectSupplyContent project={project} suppliesDict={suppliesDict} />\n    )\n  }\n}\n\nconst ProjectSupplyContent = ({ project, suppliesDict }) => {\n  const [addSupplyModal, setAddSupplyModal] = useState(false)\n  const dispatch = useDispatch()\n\n  const projectSupplies = project.supplies.map((supplyID) => suppliesDict[supplyID])\n\n  if (!project.supplies || project.supplies.length === 0) {\n    return (\n      <>\n      <div className=\"emptyDBContainer\">\n        <p> <FontAwesomeIcon icon={faExclamationTriangle} className=\"cnicExclamationIcon\" style={{color: 'red'}} /> You have not created any supplies yet. </p>\n        <button onClick={() => setAddSupplyModal(true)} className=\"standardButtonWithoutColour mcGreenBG\"> <FontAwesomeIcon icon={faPlus} style={{marginRight: \"0.3em\"}} /> Add Supply </button>\n      </div>\n      {addSupplyModal &&\n        <GenericModal showModal={setAddSupplyModal}>\n          <AddSupplyForm project={project} showModal={setAddSupplyModal} />\n        </GenericModal>\n      }\n      </>\n    )\n  } else {\n    return (\n      <>\n      <div className=\"headerButtonsContainerSingleRight\">\n        <span className=\"standardButtonWithoutColour mcGreenBG\" onClick={() => setAddSupplyModal(true)}> <FontAwesomeIcon icon={faPlus} style={{marginRight: \"0.3em\"}}/>  Add Supply </span>\n      </div>\n      <div className=\"projectDashSupplyContainerGrid\">\n        {\n          projectSupplies.map((supply) => {\n            return <ProjectSupplyListItem key={supply._id} onClick={() => dispatch(selectProjectDashSupply(supply._id))} supply={supply} />\n          })\n        }\n      </div>\n      {addSupplyModal &&\n        <GenericModal showModal={setAddSupplyModal}>\n          <AddSupplyForm project={project} showModal={setAddSupplyModal} />\n        </GenericModal>\n      }\n      </>\n    )\n  }\n}\n\nconst ProjectSupplyListItem = ({ onClick, supply }) => {\n  return (\n    <div className=\"projectDashCard projectSupplyListItem\" onClick={onClick}>\n      <p className=\"projectText\"> {supply.name} </p>\n      <div>\n        <p className=\"projectText\" style={{textAlign: \"end\"}}> {supply.amountReceived}/{supply.amountNeeded} </p>\n        <p className=\"projectText\" style={{ color: supply.supplyReceived ? \"green\": \"red\"}}> {supply.supplyReceived ? \"Aquired\" : \"Aquiring\"} </p>\n      </div>\n    </div>\n  )\n}\n\nconst MapStateToProps = (state) => ({\n  selectedSupplyID: state.projectInfo.createProject.selectedProjectDashBoardSupply\n})\n\nexport default connect(MapStateToProps)(ProjectSupplies)","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/volunteerTab/volunteerTab.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/fundingTab/projectFunding.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/updateTab/updateTab.component.js",["1138"],"import React, { useState, useEffect } from 'react';\n\nimport GenericModal from '../../../sharedComponents/genericModal.component';\nimport UpdateListOrSelect from './updateListOrSelect.component';\nimport AddUpdateForm from './addUpdateForm.component';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faPlus, faExclamationTriangle } from '@fortawesome/free-solid-svg-icons';\n\nconst UpdateTab = ({ project, updatesDict }) => {\n  const [addUpdateModal, setAddUpdateModal] = useState(false)\n\n  if (!project.updates || project.updates.length === 0) {\n    return (\n      <>\n      <div className=\"emptyDBContainer\">\n        <p> <FontAwesomeIcon icon={faExclamationTriangle} className=\"cnicExclamationIcon\" style={{color: 'red'}} /> You have not created any updates's yet. </p>\n        <button onClick={() => {\n          setAddUpdateModal(true)\n        }} className=\"standardButtonWithoutColour mcGreenBG\"> <FontAwesomeIcon icon={faPlus} style={{marginRight: \"0.3em\"}} /> Add Update </button>\n      </div>\n      {addUpdateModal &&\n        <GenericModal showModal={setAddUpdateModal}>\n          <AddUpdateForm project={project} showModal={setAddUpdateModal} />\n        </GenericModal>\n      }\n      </>\n    )\n  } else {\n    return <UpdateListOrSelect project={project} addUpdateModal={addUpdateModal} setAddUpdateModal={setAddUpdateModal} updatesDict={updatesDict} />\n  }\n}\n\nexport default UpdateTab","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/projectCard/projectCardSheet.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/supplyTab/selectedProjectSupply.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/faqTab/faqListItem.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/faqTab/addFaqForm.component.js",["1139"],"import React, { useEffect } from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { connect } from 'react-redux';\n\nimport { createFaq, changeProjectItemReset } from '../../../../Actions/projectActions';\n\nconst validationSchema = Yup.object().shape({\n  question: Yup.string()\n  .required(\"*Question is required\")\n  .max(150, \"*Question must be less than 150 characters\"),\n  answer: Yup.string()\n  .required(\"*Answer is required\")\n  .max(150, \"*Answer must be less than 150 characters\"),\n});\n\nconst AddFaqForm = ({ project, showModal, dispatch, loading, hasErrors, success }) => {\n\n  useEffect(() => {\n    if (success) {\n      dispatch(changeProjectItemReset())\n      showModal(false)\n    }\n  }, [showModal, success])\n\n  const formik = useFormik({\n    initialValues: {\n      question: \"\",\n      answer: \"\",\n    },\n    validationSchema: validationSchema,\n    validateOnChange: false,\n    validateOnBlur: false,\n    onSubmit: (values) => {\n      const faq = {\n        answer: values.answer,\n        question: values.question,\n        project: project\n      }\n      dispatch(createFaq(faq))\n    }\n  })\n\n  return (\n    <form onSubmit={formik.handleSubmit} className=\"addFaqForm\">\n\n      <h2 className=\"formHeader\"> Add FAQ </h2>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">Question</p>\n        <textarea\n          autoFocus\n          type=\"text\"\n          name=\"question\"\n          rows=\"2\"\n          placeholder=\"E.g. Why do we need Sewing Machine\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.question}\n        />\n        {formik.errors.question &&\n          <p className=\"formInputError\"> {formik.errors.question} </p>\n        }\n      </div>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">Answer</p>\n        <textarea\n          type=\"text\"\n          name=\"answer\"\n          rows=\"2\"\n          placeholder=\"E.g. To sew and mend clothes\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.answer}\n        />\n        {formik.errors.answer &&\n          <p className=\"formInputError\"> {formik.errors.answer} </p>\n        }\n      </div>\n\n      <div className=\"formGroup\">\n        <button className=\"standardButtonWithoutColour mcGreenBG\" type=\"submit\" disabled={loading}>\n        {\n          loading ? \n          <Spinner animation=\"border\" size=\"sm\" /> \n          :\n          null\n        }\n        {loading ? null : 'Add'}\n        </button>\n      </div>\n      {hasErrors &&\n        <p className=\"error\" style={{marginTop: '8px'}}> An error occurred please try again or contact support at info@ministryofchange.org </p>\n      }\n    </form>\n  )\n}\n\nconst MapStateToProps = (state) => ({\n  loading: state.projectInfo.createProjectItem.loading,\n  hasErrors: state.projectInfo.createProjectItem.hasErrors,\n  success: state.projectInfo.createProjectItem.success,\n})\n\nexport default connect(MapStateToProps)(AddFaqForm)","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/supplyTab/addSupplyForm.component.js",["1140"],"import React, { useEffect } from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { connect } from 'react-redux';\n\nimport { createSupply, changeProjectItemReset } from '../../../../Actions/projectActions';\n\nconst validationSchema = Yup.object().shape({\n  name: Yup.string()\n  .required(\"*Name of item is required\")\n  .max(30, \"*Name must be less than 30 characters\"),\n  description: Yup.string()\n  .required(\"*Description is required\")\n  .max(150, \"*Must be less than 150 charachters\"),\n  amountNeeded: Yup.number()\n  .required(\"*Please add the amount of this item you need.\")\n  .typeError(\"*Must be a number\")\n  .positive(\"*Number must be positive\"),\n  amountReceived: Yup.number()\n  .typeError(\"*Must be a number\")\n  .min(0, \"*Number must be positive\")\n  .test(\n    'lessThan',\n    '*Must be less than the amount needed',\n    function(v) {\n      const ref = Yup.ref('amountNeeded')\n      const currentVal = this.resolve(ref)\n      if (!currentVal) return true\n      return v <= this.resolve(ref)\n    }\n  )\n});\n\nconst AddSupplyForm = ({ project, showModal, dispatch, loading, hasErrors, success }) => {\n\n  useEffect(() => {\n    if (success) {\n      dispatch(changeProjectItemReset())\n      showModal(false)\n    }\n  }, [success, showModal])\n\n  const formik = useFormik({\n    initialValues: {\n      name: \"\",\n      description: \"\",\n      amountNeeded: \"\",\n      amountReceived: 0,\n    },\n    validationSchema: validationSchema,\n    validateOnChange: false,\n    validateOnBlur: false,\n    onSubmit: (values) => {\n      const supply = {\n        name: values.name,\n        description: values.description,\n        amountReceived: values.amountReceived,\n        amountNeeded: values.amountNeeded,\n        supplyReceived: false,\n        suppliedBy: [],\n        project: project\n      }\n      dispatch(createSupply(supply))\n    }\n  })\n\n  return (\n    <form onSubmit={formik.handleSubmit} className=\"addSupplyForm\">\n\n      <h2 className=\"formHeader\"> Add Items Needed </h2>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">Name</p>\n        <input\n          autoFocus\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"E.g. Sewing Machine\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.name}\n        />\n        {formik.errors.name &&\n          <p className=\"formInputError\"> {formik.errors.name} </p>\n        }\n      </div>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">Description</p>\n        <textarea\n          type=\"text\"\n          name=\"description\"\n          rows=\"2\"\n          placeholder=\"E.g. To sew and mend clothes\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.description}\n        />\n        {formik.errors.description &&\n          <p className=\"formInputError\"> {formik.errors.description} </p>\n        }\n      </div>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">Amount Needed</p>\n        <input\n          type=\"text\"\n          name=\"amountNeeded\"\n          placeholder=\"E.g. 42\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.amountNeeded}\n        />\n        {formik.errors.amountNeeded &&\n          <p className=\"formInputError\"> {formik.errors.amountNeeded} </p>\n        }\n      </div>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">Amount already aquired?</p>\n        <input\n          type=\"text\"\n          name=\"amountReceived\"\n          placeholder=\"0\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.amountReceived}\n        />\n        {formik.errors.amountReceived &&\n          <p className=\"formInputError\"> {formik.errors.amountReceived} </p>\n        }\n      </div>\n\n      <div className=\"formGroup\">\n        <button className=\"standardButtonWithoutColour mcGreenBG\" type=\"submit\" disabled={loading}>\n        {\n          loading ? \n          <Spinner animation=\"border\" size=\"sm\" /> \n          :\n          null\n        }\n        {loading ? null : 'Add'}\n        </button>\n      </div>\n      {hasErrors &&\n        <p className=\"error\" style={{marginTop: '8px'}}> An error occurred please try again or contact support at info@ministryofchange.org </p>\n      }\n    </form>\n  )\n}\n\nconst MapStateToProps = (state) => ({\n  loading: state.projectInfo.createProjectItem.loading,\n  hasErrors: state.projectInfo.createProjectItem.hasErrors,\n  success: state.projectInfo.createProjectItem.success,\n})\n\nexport default connect(MapStateToProps)(AddSupplyForm)","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/volunteerTab/projectVolunteerRequestForm.component.js",["1141","1142","1143"],"import React, { useState, useMemo, useEffect } from \"react\";\nimport LoadingSpinner from \"../../../utilities/loadingSpinner.component\";\nimport { useFormik } from \"formik\";\nimport * as Yup from \"yup\";\nimport { connect } from \"react-redux\";\n\nimport SkillsSelection from \"../../../sharedComponents/skillsSelection.component\";\n\nimport {\n  createVolunteerRequest,\n  changeProjectItemReset,\n} from \"../../../../Actions/projectActions\";\n\nconst validationSchema = Yup.object().shape({\n  volunteerLeadName: Yup.string()\n    .required(\"*Name is required\")\n    .max(100, \"*Name must be less than 100 charachters\"),\n  volunteerLeadContact: Yup.string()\n    .required(\"*Contact number is required\")\n    .matches(/^[0-9]+$/, \"*Contact number must be digits\")\n    .min(7, \"*Contact number must be longer than 7 charachters\")\n    .max(14, \"*Contact number must be less than 14 charachters\"),\n  volunteersNeeded: Yup.number()\n    .required(\"*Please type a number\")\n    .integer(\"*Only numbers allowed\")\n    .positive(\"*Number must be above 0\"),\n  skills: Yup.array().min(1, \"*Please select at least one skill\"),\n  description: Yup.string()\n    .required(\"*Description is required\")\n    .max(500, \"*Must be less than 150 charachters\"),\n});\n\nconst ProjectVolunteerRequestForm = ({\n  project,\n  showModal,\n  dispatch,\n  loading,\n  hasErrors,\n  success,\n}) => {\n  useEffect(() => {\n    if (success) {\n      dispatch(changeProjectItemReset());\n      showModal(false);\n    }\n  }, [success, showModal]);\n\n  const formik = useFormik({\n    initialValues: {\n      volunteersNeeded: 0,\n      description: \"\",\n      skills: [],\n    },\n    validationSchema: validationSchema,\n    onSubmit: (values) => {\n      const volunteerRequest = {\n        volunteerLeadName: values.volunteerLeadName,\n        volunteerLeadContact: values.volunteerLeadContact,\n        volunteersNeeded: values.volunteersNeeded,\n        description: values.description,\n        skills: values.skills,\n        project: project,\n      };\n      dispatch(createVolunteerRequest(volunteerRequest));\n    },\n  });\n\n  return (\n    <form onSubmit={formik.handleSubmit} className=\"addUpdateForm\">\n      <h2 className=\"formHeader\"> Create Volunteer Request </h2>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">\n          Name of person dealing with volunteers?\n        </p>\n        <input\n          type=\"text\"\n          name=\"volunteerLeadName\"\n          placeholder=\"Hamza Haroon\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.volunteerLeadName}\n        />\n        {formik.errors.volunteerLeadName && (\n          <p className=\"formInputError\"> {formik.errors.volunteerLeadName} </p>\n        )}\n      </div>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">\n          Number of person dealing with volunteers? (Only shown to volunteers)\n        </p>\n        <input\n          type=\"number\"\n          name=\"volunteerLeadContact\"\n          placeholder=\"01234567890\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.volunteerLeadContact}\n        />\n        {formik.errors.volunteerLeadContact && (\n          <p className=\"formInputError\">\n            {\" \"}\n            {formik.errors.volunteerLeadContact}{\" \"}\n          </p>\n        )}\n      </div>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">How many volunteers do you need?</p>\n        <input\n          type=\"number\"\n          name=\"volunteersNeeded\"\n          placeholder=\"0\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.volunteersNeeded}\n        />\n        {formik.errors.volunteersNeeded && (\n          <p className=\"formInputError\"> {formik.errors.volunteersNeeded} </p>\n        )}\n      </div>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">What do you need volunteers to do?</p>\n        <textarea\n          type=\"text\"\n          name=\"description\"\n          rows=\"3\"\n          placeholder=\"E.g. To help with coordination\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.description}\n        />\n        {formik.errors.description && (\n          <p className=\"formInputError\"> {formik.errors.description} </p>\n        )}\n      </div>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">\n          What kind of volunteers do you need? <span className=\"red\">*</span>{\" \"}\n        </p>\n        <SkillsSelection\n          selectedSkills={formik.values.skills}\n          setFieldValue={formik.setFieldValue}\n        />\n        {formik.errors.skills && (\n          <p className=\"formInputError\"> {formik.errors.skills} </p>\n        )}\n      </div>\n\n      <div className=\"formGroup\">\n        <button\n          className=\"standardButtonWithoutColour mcGreenBG\"\n          type=\"submit\"\n          disabled={loading}\n        >\n          {loading ? (\n            <LoadingSpinner size=\"1x\" style={{ minHeight: \"unset\" }} />\n          ) : null}\n          {loading ? null : \"Add\"}\n        </button>\n      </div>\n      {hasErrors && (\n        <p className=\"error\" style={{ marginTop: \"8px\" }}>\n          {\" \"}\n          An error occurred please try again or contact support at\n          info@ministryofchange.org{\" \"}\n        </p>\n      )}\n    </form>\n  );\n};\n\nconst MapStateToProps = (state) => ({\n  loading: state.projectInfo.createProjectItem.loading,\n  hasErrors: state.projectInfo.createProjectItem.hasErrors,\n  success: state.projectInfo.createProjectItem.success,\n});\n\nexport default connect(MapStateToProps)(ProjectVolunteerRequestForm);\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/infoTab/sponsorDonor.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/volunteerTab/volunteerInfo.component.js",["1144","1145","1146"],"import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport {\n  acceptVolunteerRequest,\n  declineVolunteerRequest,\n} from \"../../../../Actions/projectActions\";\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faEdit } from \"@fortawesome/pro-duotone-svg-icons\";\nimport {\n  faCheck,\n  faTimes,\n  faChevronCircleLeft,\n  faMale,\n  faFemale,\n  faTransgender,\n} from \"@fortawesome/pro-solid-svg-icons\";\n\nconst VolunteerInfo = ({ volunteer, volunteerRequestDict }) => {\n  return (\n    <>\n      <VolunteerRequirmentInfo volunteer={volunteer} />\n      <VolunteerRequestsCheck\n        volunteer={volunteer}\n        volunteerRequestDict={volunteerRequestDict}\n      />\n    </>\n  );\n};\n\nconst VolunteerRequestsCheck = ({ volunteer, volunteerRequestDict }) => {\n  let content = null;\n  if (volunteer.volunteerRequests && volunteer.volunteerRequests.length !== 0) {\n    content = (\n      <VolunteerRequests\n        volunteer={volunteer}\n        volunteerRequestDict={volunteerRequestDict}\n      />\n    );\n  } else {\n    content = <p> No Requests yet. </p>;\n  }\n\n  return (\n    <div className=\"volunteerRequestListContainer\">\n      <h4> Volunteer Requests </h4>\n      {content}\n    </div>\n  );\n};\n\nconst VolunteerRequests = ({\n  volunteer,\n  volunteerRequestDict = { volunteerRequestDict },\n}) => {\n  const [selectedRequest, setSelectedRequest] = useState(null);\n\n  if (selectedRequest) {\n    return (\n      <SelectedVolunteerRequest\n        request={volunteerRequestDict[selectedRequest]}\n        setSelectedRequest={setSelectedRequest}\n      />\n    );\n  } else {\n    return (\n      <div className=\"volunteerRequestList\">\n        {volunteer.volunteerRequests.map((request) => {\n          return (\n            <VolunteerRequest\n              key={request}\n              request={volunteerRequestDict[request]}\n              setSelectedRequest={setSelectedRequest}\n            />\n          );\n        })}\n      </div>\n    );\n  }\n};\n\nconst SelectedVolunteerRequest = ({ request, setSelectedRequest }) => {\n  const { volunteer } = request.requestingVolunteer;\n\n  return (\n    <div className=\"projectDashCard\">\n      <div className=\"headerButtonsContainer\">\n        <button\n          className=\"standardButtonWithoutColour mcGreenBG\"\n          onClick={() => setSelectedRequest(null)}\n        >\n          {\" \"}\n          <FontAwesomeIcon\n            icon={faChevronCircleLeft}\n            style={{ textAlign: \"left\", marginRight: \"0.3em\" }}\n          />{\" \"}\n          Back{\" \"}\n        </button>\n      </div>\n      <div className=\"volunteerRequestSelected\">\n        {volunteer.image && (\n          <div className=\"volunteerRequestSelectedImage\">\n            <img src={volunteer.image} />\n          </div>\n        )}\n        <div className=\"volunteerRequestSelectedInfo\">\n          <p className=\"projectTitle\"> Name </p>\n          <p className=\"projectText\">\n            {\" \"}\n            {volunteer.firstName} {volunteer.lastName}{\" \"}\n          </p>\n          <p className=\"projectTitle\"> Age </p>\n          <p className=\"projectText\"> {calcAge(volunteer.dob)} </p>\n          <p className=\"projectTitle\"> Gender </p>\n          <p className=\"projectText\"> {getGenderIcon(volunteer.gender)} </p>\n          <p className=\"projectTitle\"> Contact Number </p>\n          <p className=\"projectText\"> {volunteer.contactNumber} </p>\n          <p className=\"projectTitle\"> Location </p>\n          <p className=\"projectText\">\n            {\" \"}\n            {volunteer.city}, {volunteer.country}{\" \"}\n          </p>\n        </div>\n        <div className=\"volunteerRequestSelectedContent\">\n          <p className=\"projectTitle\"> Description </p>\n          <p className=\"projectText\"> {request.description} </p>\n          <p className=\"projectTitle\"> Motivation </p>\n          <p className=\"projectText\"> {request.motivation} </p>\n          <p className=\"projectTitle\"> Previous Experience </p>\n          <p className=\"projectText\"> {request.previousExperience} </p>\n          <p className=\"projectTitle\"> Availability </p>\n          <p className=\"projectText\"> {request.availability} </p>\n          <p className=\"projectTitle\"> Additional Information </p>\n          <p className=\"projectText\"> {request.additionalInformation} </p>\n          <br />\n          <VolunteerRequestButtons request={request} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst VolunteerRequestButtons = ({ request }) => {\n  const dispatch = useDispatch();\n\n  if (request.status === \"PENDING\") {\n    return (\n      <>\n        <button\n          onClick={() => dispatch(acceptVolunteerRequest(request._id))}\n          className=\"standardButtonWithoutColour mcGreenBG\"\n          style={{ height: 34, width: 34, marginRight: \"8px\" }}\n        >\n          {\" \"}\n          <FontAwesomeIcon icon={faCheck} />{\" \"}\n        </button>\n        <button\n          onClick={() => dispatch(declineVolunteerRequest(request._id))}\n          className=\"standardButtonWithoutColour mcRedBG\"\n          style={{ height: 34, width: 34 }}\n        >\n          {\" \"}\n          <FontAwesomeIcon icon={faTimes} />{\" \"}\n        </button>\n      </>\n    );\n  } else if (request.status === \"ACCEPTED\") {\n    return (\n      <p className=\"w-auto inline-block px-2 py-1 rounded-lg bg-green-500 font-bold text-white\">\n        {\" \"}\n        Accepted{\" \"}\n      </p>\n    );\n  } else {\n    return <p className=\"\"> Declined </p>;\n  }\n};\n\nconst VolunteerRequest = ({ request, setSelectedRequest }) => {\n  const { volunteer } = request.requestingVolunteer;\n\n  return (\n    <div\n      className=\"projectDashCard projectVolunteerRequestListItem\"\n      onClick={() => setSelectedRequest(() => request._id)}\n    >\n      {volunteer.image && (\n        <div className=\"volunteerRequestImage\">\n          <img src={volunteer.image} />\n        </div>\n      )}\n      <div className=\"volunteerRequestHeader\">\n        <h4>\n          {\" \"}\n          {volunteer.firstName} {volunteer.lastName}{\" \"}\n        </h4>\n        <div>\n          <span className=\"volunteerAge\"> {calcAge(volunteer.dob)} </span>\n          <span className=\"volunteerGender\">\n            {\" \"}\n            {getGenderIcon(volunteer.gender)}{\" \"}\n          </span>\n        </div>\n        <h6>\n          {\" \"}\n          {volunteer.city}, {volunteer.country}{\" \"}\n        </h6>\n      </div>\n    </div>\n  );\n};\n\nconst getGenderIcon = (gender) => {\n  if (gender === \"male\") {\n    return <FontAwesomeIcon style={{ color: \"blue\" }} icon={faMale} />;\n  } else if (gender === \"female\") {\n    return <FontAwesomeIcon style={{ color: \"pink\" }} icon={faFemale} />;\n  } else {\n    return <FontAwesomeIcon style={{ color: \"red\" }} icon={faTransgender} />;\n  }\n};\n\nconst calcAge = (birthday) => {\n  const dif = Date.now() - new Date(birthday).getTime();\n  const ms = new Date(dif);\n  return Math.abs(ms.getUTCFullYear() - 1970);\n};\n\nconst VolunteerRequirmentInfo = ({ volunteer }) => {\n  return (\n    <div\n      className=\"projectDashCard\"\n      style={{ height: \"fit-content\", position: \"relative\" }}\n    >\n      <h6> Volunteer Needs </h6>\n      <p className=\"projectTitle\"> Volunteer Skills Needed </p>\n      <div\n        className=\"categoryBadgeContainer\"\n        style={{ justifyContent: \"flex-start\" }}\n      >\n        {volunteer.skills.map((skill) => {\n          return <span key={skill}> {skill} </span>;\n        })}\n      </div>\n      <p className=\"projectTitle\"> Description </p>\n      <p className=\"projectText\"> {volunteer.description} </p>\n      {/* FIX */}\n      <button\n        className=\"standardButtonWithoutColour mcGreenBG\"\n        onClick={() => console.log(\"edit\")}\n        style={{ position: \"absolute\", top: \"8px\", right: \"8px\" }}\n      >\n        {\" \"}\n        <FontAwesomeIcon icon={faEdit} />{\" \"}\n      </button>\n    </div>\n  );\n};\n\nexport default VolunteerInfo;\n","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/fundingTab/projectFundingForm.component.js",["1147"],"import React, { useEffect, useRef } from 'react';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport { connect } from 'react-redux';\nimport { Spinner } from 'react-bootstrap';\n\nimport { createFunding, changeProjectItemReset } from '../../../../Actions/projectActions'\n\nconst validationSchema = Yup.object().shape({\n  fundingNeeded: Yup.number()\n  .required(\"*Amount of funding needed is required\")\n  .typeError(\"*Must be a number\")\n  .positive(\"*Must be positive\"),\n  fundingUsedFor: Yup.string()\n  .required(\"*Please add what the funding will be used for.\"),\n});\n\nconst ProjectFundingForm = ({ dispatch, loading, success, hasErrors, project, setEditing }) => {  \n  const isMounted = useRef(false);\n\n  useEffect(() => {\n    if (isMounted.current) {\n      dispatch(changeProjectItemReset())\n      setEditing(false)\n    } else {\n      isMounted.current = true;\n    }\n  }, [success]);\n\n  // if (success) {\n  //   dispatch(changeProjectItemReset())\n  //   setEditing(false)\n  // }\n  \n  const formik = useFormik({\n    initialValues: {\n      fundingNeeded: project.funding ? project.funding.fundingNeeded : 0,\n      fundingUsedFor: project.funding ? project.funding.fundingUsedFor : \"\",\n    },\n    validationSchema: validationSchema,\n    validateOnChange: false,\n    validateOnBlur: false,\n    onSubmit: (values) => {\n      const funding = {\n        fundingNeeded: values.fundingNeeded,\n        fundingUsedFor: values.fundingUsedFor,\n        project: project\n      }\n      dispatch(createFunding(funding))\n    }\n  })\n\n  return (\n    <form onSubmit={formik.handleSubmit} className=\"addFundingForm\">\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">How many funds do you need? (Rps)</p>\n        <input\n          disabled={(project.funding && project.funding.fundingNeeded) ? true : false}\n          type=\"text\"\n          name=\"fundingNeeded\"\n          placeholder=\"E.g. 42\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.fundingNeeded}\n        />\n        {formik.errors.fundingNeeded &&\n          <p className=\"formInputError\"> {formik.errors.fundingNeeded} </p>\n        }\n      </div>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">What will the funding be used for?</p>\n        <textarea\n          autoFocus\n          type=\"text\"\n          name=\"fundingUsedFor\"\n          rows=\"3\"\n          placeholder=\"E.g. to purchase sewing machines\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.fundingUsedFor}\n        />\n        {formik.errors.fundingUsedFor &&\n          <p className=\"formInputError\"> {formik.errors.fundingUsedFor} </p>\n        }\n      </div>\n\n      <div className=\"formGroup\">\n        <button className=\"standardButtonWithoutColour mcGreenBG\" type=\"submit\" disabled={loading}>\n        {\n          loading ? \n          <Spinner animation=\"border\" size=\"sm\" /> \n          :\n          null\n        }\n        {loading ? null : (project.funding && project.funding.fundingNeeded) ? 'Edit' : 'Create'}\n        </button>\n        <button onClick={() => setEditing(false)} className=\"standardButtonWithoutColour mcGreenBG\" type=\"submit\" disabled={loading} style={{marginTop: '8px'}}> Back </button>\n      </div>\n      {hasErrors &&\n        <p className=\"error\" style={{marginTop: '8px'}}> An error occurred please try again or contact support at info@ministryofchange.org </p>\n      }\n    </form>\n  )\n}\n\nconst MapStateToProps = (state) => ({\n  loading: state.projectInfo.createProjectItem.loading,\n  hasErrors: state.projectInfo.createProjectItem.hasErrors,\n  success: state.projectInfo.createProjectItem.success,\n})\n\nexport default connect(MapStateToProps)(ProjectFundingForm)","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/fundingTab/projectFundingInfo.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/updateTab/addUpdateForm.component.js",["1148","1149"],"import React, { useState, useMemo, useEffect } from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport { useFormik } from 'formik';\nimport * as Yup from 'yup';\nimport DatePicker from 'react-datepicker';\nimport { connect } from 'react-redux';\n\nimport Dropzone, { useDropzone } from 'react-dropzone';\nimport { baseStyle, acceptStyle, activeStyle, rejectStyle } from '../../../utilities/dropzoneStyles';\nimport Thumb from '../../../utilities/thumb.component';\n\nimport { createUpdate, changeProjectItemReset } from '../../../../Actions/projectActions';\n\nconst validationSchema = Yup.object().shape({\n  title: Yup.string()\n  .required(\"*Title of update is required\")\n  .max(50, \"*Title must be less than 50 characters\"),\n  description: Yup.string()\n  .required(\"*Description is required\")\n  .max(150, \"*Must be less than 150 charachters\"),\n  date: Yup.date()\n  .required(\"*Date of update is required.\")\n});\n\nconst AddUpdateForm = ({ project, showModal, dispatch, loading, hasErrors, success }) => {\n  const [rejectedFilesState, setRejectedFilesState] = useState([]);\n  const {\n    isDragActive,\n    isDragAccept,\n    isDragReject\n  } = useDropzone({\n    accept: 'image/jpeg, image/png, image/jpg, image/gif',\n    maxSize: 2000000,\n  });\n\n  const style = useMemo(() => ({\n    ...baseStyle,\n    ...(isDragActive ? activeStyle : {}),\n    ...(isDragAccept ? acceptStyle : {}),\n    ...(isDragReject ? rejectStyle : {})\n  }), [\n    isDragActive,\n    isDragReject\n  ]);\n\n  useEffect(() => {\n    if (success) {\n      dispatch(changeProjectItemReset())\n      showModal(false)\n    }\n  }, [success, showModal])\n\n  const formik = useFormik({\n    initialValues: {\n      title: \"\",\n      description: \"\",\n      date: \"\",\n      images: [],\n    },\n    validationSchema: validationSchema,\n    validateOnChange: false,\n    validateOnBlur: false,\n    onSubmit: (values) => {\n      const update = {\n        title: values.title,\n        description: values.description,\n        date: values.date,\n        images: values.images,\n        project: project\n      }\n      dispatch(createUpdate(update))\n    }\n  })\n\n  return (\n    <form onSubmit={formik.handleSubmit} className=\"addUpdateForm\">\n\n      <h2 className=\"formHeader\"> Create New Update </h2>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">Title</p>\n        <input\n          autoFocus\n          type=\"text\"\n          name=\"title\"\n          placeholder=\"E.g. First project update!\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.title}\n        />\n        {formik.errors.title &&\n          <p className=\"formInputError\"> {formik.errors.title} </p>\n        }\n      </div>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\">Description</p>\n        <textarea\n          type=\"text\"\n          name=\"description\"\n          rows=\"2\"\n          placeholder=\"E.g. To Inform people about my progress\"\n          onChange={formik.handleChange}\n          onBlur={formik.handleBlur}\n          value={formik.values.description}\n        />\n        {formik.errors.description &&\n          <p className=\"formInputError\"> {formik.errors.description} </p>\n        }\n      </div>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\"> Date of this update </p>\n        <DatePicker\n            selected={formik.values.date}\n            onChange={(date) => {\n              formik.setFieldValue('date', date);\n            }}\n            name=\"date\"\n            // className=\"datePicker\"\n            minDate={new Date()}\n          />\n        {formik.errors.date &&\n          <p className=\"formInputError\"> {formik.errors.date} </p>\n        }\n      </div>\n\n      <div className=\"formGroup\">\n        <p className=\"formGroupHeader\"> Images (Max 3 images, each should be less than 1MB) </p>\n        <Dropzone \n            accept = 'image/jpeg, image/png, image/jpg, image/gif'\n            maxSize = {11000000}\n            onDropRejected={(rejectedFiles) => {\n              console.log('rejected')\n              setRejectedFilesState(rejectedFiles)\n            }}\n            onDrop={(acceptedFiles, rejectedFiles) => {\n              if (rejectedFiles.length === 0) {\n                setRejectedFilesState([])\n              }\n              formik.setFieldValue('images', acceptedFiles);\n          }}>\n            {({getRootProps, getInputProps}) => (\n              <>\n              <div {...getRootProps({style})}>\n                <input {...getInputProps()} />\n                <p>Drag 'n' drop images here, or click to select images</p>\n                <div className=\"thumbnailRow\"> \n                  {\n                    formik.values.images.map((file) => {\n                      return <Thumb file={file} key={file.name} />\n                    })\n                  }\n                </div>\n              </div>\n              {rejectedFilesState.length === 0 ? null : <p className=\"redError\"> Some files were rejected. make sure they are not more than 1mb. </p>}\n              </>\n          )}\n          </Dropzone>\n      </div>\n\n      <div className=\"formGroup\">\n        <button className=\"standardButtonWithoutColour mcGreenBG\" type=\"submit\" disabled={loading}>\n        {\n          loading ? \n          <Spinner animation=\"border\" size=\"sm\" /> \n          :\n          null\n        }\n        {loading ? null : 'Add'}\n        </button>\n      </div>\n      {hasErrors &&\n        <p className=\"error\" style={{marginTop: '8px'}}> An error occurred please try again or contact support at info@ministryofchange.org </p>\n      }\n    </form>\n  )\n}\n\nconst MapStateToProps = (state) => ({\n  loading: state.projectInfo.createProjectItem.loading,\n  hasErrors: state.projectInfo.createProjectItem.hasErrors,\n  success: state.projectInfo.createProjectItem.success,\n})\n\nexport default connect(MapStateToProps)(AddUpdateForm)","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/updateTab/updateListOrSelect.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/infoTab/sponsorDonorModal.component.js",["1150"],"import React, { useState } from 'react';\nimport axios from 'axios';\nimport { useDispatch, connect } from 'react-redux'\nimport { API, rootURL, production } from '../../../../config'\nimport imagePlaceholder from '../../../../assets/Images/temp.jpg'\nimport LoadingSpinner from '../../../utilities/loadingSpinner.component';\nimport { getUserInfoBackground } from '../../../../Actions/userInfoActions'\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faTimesCircle } from '@fortawesome/pro-solid-svg-icons'\n\nconst SponsorDonorModal = ({ project, setShowModal, showModal, sponsorRequestsDict }) => {\n  const [typingTimeout, setTypingTimeout] = useState(0)\n  const [searchResults, setSearchResults] = useState(null)\n  const [loading, setLoading] = useState(false)\n  const [selectedSponsorKeys, setSelectedSponsorKeys] = useState([])\n\n  const onSearchChange = (event) => {\n    if (typingTimeout) {\n      clearTimeout(typingTimeout);\n    }\n\n    const text = event.target.value\n    setTypingTimeout(setTimeout(() => {\n      searchOrgName(text, setSearchResults, setLoading)\n    }, 500))\n  }\n\n  return (\n    <div className=\"addSponsorForm\">\n      <h3> Search for a Sponsor </h3>\n      <div className=\"textInputSponsor\">\n        <input type='text' onChange={onSearchChange}/>\n        <OrgSearchResultsDropDown project={project} sponsorRequestsDict={sponsorRequestsDict} orgSearchResults={searchResults} loading={loading} selectedSponsorKeys={selectedSponsorKeys} setSelectedSponsorKeys={setSelectedSponsorKeys} />\n        <SelectedOrgs project={project} sponsorRequestsDict={sponsorRequestsDict} selectedSponsorKeys={selectedSponsorKeys} setSelectedSponsorKeys={setSelectedSponsorKeys} sponsorDict={searchResults} />\n        <CurrentSponsorRequests project={project} setShowModal={setShowModal} sponsorRequestsDict={sponsorRequestsDict} />\n      </div>\n    </div>\n  )\n}\n\nconst CurrentSponsorRequests = ({ project, setShowModal, sponsorRequestsDict }) => {\n  const [loading, setLoading] = useState(false)\n  const dispatch = useDispatch()\n\n  const sponsorRequests = project.sponsorRequests.map((requestID) => sponsorRequestsDict[requestID] )\n  if (!sponsorRequests || sponsorRequests.length === 0) return null\n\n  const requestStatus = (request) => {\n    if (request.pending) return \"Pending\"\n    if (!request.pending && request.accepted) return \"Accepted\"\n    if (!request.accepted) return \"Declined\"\n    return \"Unknown\"\n  }\n\n  return (\n    <div className=\"sponsorRequestsContainer\">\n      <h3> Sponsor Requests </h3>\n      <div className=\"sponsorRequestsCardContainer\">\n      {\n        sponsorRequests.map((request) => {\n          return (\n            <div key={request._id} className=\"sponsorRequestCard\">\n              <img src={request.imageURL ? request.imageURL : imagePlaceholder} alt=\"Logo\" />\n              <p className=\"sponsorRequestName\"> {request.requestedOrganisation.name} </p>\n              <p className=\"sponsorRequestStatus\" > Status: {requestStatus(request)} </p>\n              <button onClick={() => {\n                if (loading) return\n                sendDeleteOrgSponsorRequest(dispatch, setLoading, null, request, setShowModal)\n              }} className=\"standardButtonWithoutColour mcRedBG\" style={{ fontSize: \"small\" }}>\n              {\n                loading === request._id ? <LoadingSpinner size=\"1x\" style={{minHeight: \"fit-content\", padding: \"0.3em 0.6em\"}} /> : \"Cancel Request\"\n              }\n              </button>\n            </div>\n          )\n        })\n      }\n      </div>\n    </div>\n  )\n}\n\nconst SelectedOrgs = ({ selectedSponsorKeys, setSelectedSponsorKeys, sponsorDict, project, sponsorRequestsDict }) => {\n  const dispatch = useDispatch()\n  const [loading, setLoading] = useState(false)\n  const [success, setSuccess] = useState(false)\n\n  if (selectedSponsorKeys.length === 0) return null\n\n  return (\n    <>\n    <div className=\"selectedSponorsContainer\">\n      {\n        selectedSponsorKeys.map((key) => {\n          return (\n            <div className=\"selectedSponsor\" key={key}>\n              <FontAwesomeIcon icon={faTimesCircle} onClick={() => {\n                const newArray = selectedSponsorKeys.filter((val) => { return val !== key })\n                setSelectedSponsorKeys(newArray)\n              }} />\n              <img src={sponsorDict[key].imageURL ? sponsorDict[key].imageURL : imagePlaceholder} alt=\"Logo\" />\n              <p> {sponsorDict[key].name} </p>\n            </div>\n          )\n        })\n      }\n    </div>\n    <button className=\"standardButtonWithoutColour mcGreenBG\" onClick={() => {\n      sendOrgSponsorRequest(dispatch, project, setLoading, setSuccess, selectedSponsorKeys, sponsorRequestsDict)\n    }}>\n      {\n        loading ? <LoadingSpinner size=\"1x\" style={{minHeight: \"fit-content\", padding: \"0.3em 0.6em\"}} /> : \"Send Request\"\n      }\n    </button>\n    {success &&\n      <p className=\"successReply\"> Your request has been sent. </p>\n    }\n    </>\n  )\n}\n\nconst OrgSearchResultsDropDown = ({ project, sponsorRequestsDict, orgSearchResults, loading, selectedSponsorKeys, setSelectedSponsorKeys }) => {\n  if (loading) return (\n    <div className=\"orgSearchResultsContainer\">\n      <LoadingSpinner size=\"2x\" style={{ minHeight: \"50px\" }} />\n    </div>\n  )\n\n  if (!orgSearchResults || orgSearchResults.length === 0) return null\n\n  return (\n    <div className=\"orgSearchResultsContainer\">\n      {\n        Object.keys(orgSearchResults).map((key) => {\n          return (\n            <div key={key} onClick={() => {\n              if (selectedSponsorKeys.includes(key)) return\n              if (checkSponsoredSingle(key, project, sponsorRequestsDict)) return\n              const newSelectedSponsorKeys = selectedSponsorKeys.concat(key)\n              setSelectedSponsorKeys(newSelectedSponsorKeys)\n            }}>\n              <img src={orgSearchResults[key].imageURL ? orgSearchResults[key].imageURL : imagePlaceholder} alt=\"Logo\" />\n              <p> {orgSearchResults[key].name} </p>\n            </div>\n          )\n        })\n      }\n    </div>\n  )\n}\n\nconst checkSponsoredSingle = (selected, project, sponsorRequestsDict) => {\n  const sponsorRequests = project.sponsorRequests.map((requestID) => sponsorRequestsDict[requestID] )\n  if (!sponsorRequests) { sponsorRequests = [] }\n  for (let i = 0; i < sponsorRequests.length; i++) {\n    if (selected === sponsorRequests[i].requestedOrganisation._id) return true\n  }\n  return false\n}\n\nconst checkSponsored = (selectedSponsors, project, sponsorRequestsDict) => {\n  const sponsorRequests = project.sponsorRequests.map((requestID) => sponsorRequestsDict[requestID] )\n\n  if (!project.sponsorRequests) { project.sponsorRequests = [] }\n  for (let i = 0; i < selectedSponsors.length; i++) {\n    for (let j = 0; j < sponsorRequests.length; j++) {\n      if (sponsorRequests[j].requestedOrganisation._id === selectedSponsors[i]) {\n        return true\n      }\n    }\n    if (!project.sponsors) { project.sponsors = [] }\n    for (let j = 0; j < project.sponsors.length; j++) {\n      if (project.sponsors[j] === selectedSponsors[i]) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\nconst sendDeleteOrgSponsorRequest = (dispatch, setLoading, setSuccess, selectedRequest, setShowModal) => {\n  setLoading(selectedRequest._id)\n\n  axios({\n    method: 'delete',\n    url: rootURL(production)+API+'/project/deleteSponsorRequest/'+selectedRequest._id,\n    headers: {'Content-Type': 'application/json'},\n    withCredentials: true,\n    credentials: 'include',\n  }).then((res) => {\n    setLoading(false)\n    // setShowModal(false)\n    dispatch(getUserInfoBackground())\n  })\n  .catch((err) => {\n    setLoading(false)\n  })\n}\n\nconst sendOrgSponsorRequest = (dispatch, project, setLoading, setSuccess, selectedSponsorKeys, sponsorRequestsDict) => {\n  if (checkSponsored(selectedSponsorKeys, project, sponsorRequestsDict)) return\n  setLoading(true)\n  axios({\n    method: 'post',\n    url: rootURL(production)+API+'/project/createSponsorRequest/'+project._id,\n    headers: {'Content-Type': 'application/json'},\n    withCredentials: true,\n    credentials: 'include',\n    data: {\n      selectedSponsors: selectedSponsorKeys\n    }\n  })\n  .then((res) => {\n    setLoading(false)\n    setSuccess(true)\n    dispatch(getUserInfoBackground())\n    return\n  })\n  .catch((error) => {\n    setLoading(false)\n    setSuccess(false)\n  });\n}\n\nconst searchOrgName = (searchText, setSearchResults, setLoading) => {\n  setLoading(true)\n  axios({\n    method: 'get',\n    url: rootURL(production)+API+'/organisation/search',\n    headers: {'Content-Type': 'application/json'},\n    params: {\n      search: searchText\n    },\n    withCredentials: true,\n    credentials: 'include'\n  })\n  .then((res) => {\n    setLoading(false)\n    if (res.data && res.data.length !== 0) {\n      const dict = {}\n      res.data.forEach(element => {\n        dict[element._id] = element\n      });\n      return setSearchResults(dict)\n    }\n    return setSearchResults(res.data)\n  })\n  .catch((error) => {\n    setLoading(false)\n  });\n}\n\nconst MapStateToProps = (state) => ({\n  sponsorRequestsDict: state.userInfo.sponsorRequests\n})\n\nexport default connect(MapStateToProps)(SponsorDonorModal)","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/supplyTab/projectSupplyReceivedListItem.component.js",["1151"],"import React, { useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { acceptSupplyRequest } from '../../../../Actions/projectActions';\nimport MapForDisplay from '../../../sharedComponents/mapForDisplay.component';\n\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faCaretDown } from \"@fortawesome/free-solid-svg-icons\";\n\n\nconst SupplyRequestItem = ({ project, supply, supplyRequest }) => {\n  const [viewExpand, setViewExpand] = useState(false)\n  const dispatch = useDispatch()\n\n  const toggleView = (viewExpand) => {\n    setViewExpand(!viewExpand)\n  }\n\n  return (\n    <div>\n      <div className={viewExpand ? \"projectSupplyRequestItem projectSupplyRequestItemExpanded\" : \"projectSupplyRequestItem\"} onClick={() => toggleView(viewExpand)}>\n        <div className=\"projectSupplyRequestItemHeader\">\n          <div className=\"projectSupplyRequestItemLeft\">\n            <p className=\"supplyRequestAmount\"> {supplyRequest.amount} </p>\n            <p className=\"supplyRequestAmountTitle\"> items offered </p>\n          </div>\n          <div className=\"projectSupplyRequestItemRight\">\n            {supplyRequest.accepted ? \"Accepted\" : \"Pending\"}\n            <button onClick={() => toggleView(viewExpand)}>\n              <FontAwesomeIcon icon={faCaretDown} rotation={viewExpand ? 180 : null} />\n            </button>\n          </div>\n        </div>\n        <SupplyRequestItemExpanded viewExpand={viewExpand} project={project} supply={supply} supplyRequest={supplyRequest} />\n      </div>\n    </div>\n  )\n}\n\nconst SupplyRequestItemExpanded = ({ viewExpand, project, supply, supplyRequest }) => {\n  if (viewExpand) {\n    return (\n      <div className=\"projectSupplyRequestItemBody\">\n        <div className=\"projectSupplyRequestItemBodyLeft\">\n          <p className=\"projectTitle\"> Description </p>\n          <p className=\"projectText\"> {supplyRequest.description} </p>\n          <p className=\"projectTitle\"> Name </p>\n          <p className=\"projectText\"> {supplyRequest.username} </p>\n          <p className=\"projectTitle\"> Mobile </p>\n          <p className=\"projectText\"> {supplyRequest.mobile} </p>\n          {supplyRequest.contactDetails &&\n          <>\n            <p className=\"projectTitle\"> Other Contact Details </p>\n            <p className=\"projectText\"> {supplyRequest.contactDetails} </p>\n          </>\n          }\n          <p className=\"projectText\"> {supplyRequest.canDeliver ? \"They can deliver\" : \"They cannot deliver\"} </p>\n          <SupplyAcceptPendingButton accepted={supplyRequest.accepted} project={project} supply={supply} supplyRequest={supplyRequest} />\n        </div>\n        <div className=\"projectSupplyRequestItemBodyRight\">\n          {(!supplyRequest.canDeliver && supplyRequest.location) &&\n            <MapForDisplay location={supplyRequest.location} />\n          }\n        </div>\n      </div>\n    )\n  } else return null\n}\n\nconst ProjectSupplyReceivedList = ({ project, supply }) => {\n  if (!supply.suppliedBy || supply.suppliedBy.length === 0) {\n    return (\n      <p style={{textAlign: 'center'}}> You have not recieved any supply requests yet. </p>\n    )\n  } else {\n    return (\n      <div className=\"projectSupplyRequestContainer\">\n        <p> Supply Requests </p>\n        {\n          supply.suppliedBy.map((supplyRequest) => {\n            return <SupplyRequestItem key={supplyRequest._id} project={project} supply={supply} supplyRequest={supplyRequest} />\n          })\n        }\n      </div>\n    )\n  }\n}\n\n\nconst SupplyAcceptPendingButton = ({ accepted, project, supplyRequest, supply }) => {\n  const dispatch = useDispatch()\n\n  if (accepted) {\n    return null\n  } else {\n    return (\n      <button className=\"standardButtonWithoutColour mcGreenBG\" onClick={() => {\n        dispatch(acceptSupplyRequest(project._id, supply._id, supplyRequest._id))\n      }} > Recieve </button>\n    )\n  }\n}\n\nexport default ProjectSupplyReceivedList","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/sharedComponents/projectCardDashProgressRing.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/updateTab/selectedUpdate.component.js",["1152","1153"],"import React from 'react';\n\n\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faChevronCircleLeft } from \"@fortawesome/free-solid-svg-icons\";\nimport { faCaretCircleLeft, faCaretCircleRight } from \"@fortawesome/pro-duotone-svg-icons\";\nimport ImageCarousel from '../../../sharedComponents/imageCarousel.component';\n\nconst SelectedUpdate = ({ update, setSelectedUpdate }) => {\n  const dateOptions = { weekday: \"long\", year: \"numeric\", month: \"short\", day: \"numeric\" }; \n\n  return (\n    <>\n    <div className=\"headerButtonsContainer\">\n      <button className=\"standardButtonWithoutColour mcGreenBG\" onClick={() => setSelectedUpdate(null)}> <FontAwesomeIcon icon={faChevronCircleLeft} style={{textAlign: 'left', marginRight: \"0.3em\"}}/> Back </button>\n    </div>\n    <div className=\"projectSelectedUpdateContainer\">\n      <div className=\"projectDashCard projectSelectedUpdateInfo\">\n        <p className=\"projectTitle\"> Title </p>\n        <p className=\"projectText\"> {update.title} </p>\n        <p className=\"projectTitle\"> Published </p>\n        <p className=\"projectText\"> {new Date(update.date).toLocaleDateString(\"en-US\", dateOptions)} </p>\n      </div>\n      <div className=\"projectDashCard projectSelectedUpdateImages\">\n        <ImageCarousel images={update.images} height=\"400px\" width=\"auto\" />\n      </div>\n      <div className=\"projectDashCard projectSelectedUpdateDesc\">\n        <p className=\"projectTitle\"> Description </p>\n        <p className=\"projectText\"> {update.description} </p>\n      </div>\n    </div>\n    </>\n  )\n}\n\nexport default SelectedUpdate","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/updateTab/updateList.component.js",[],"/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/dashboard/projects/updateTab/updateListItem.component.js",["1154"],"import React from 'react';\n\nconst UpdateListItem = ({ update, onClick }) => {\n  const dateOptions = { weekday: \"long\", year: \"numeric\", month: \"short\", day: \"numeric\" }; \n\n  return (\n    <div className=\"projectDashCard projectUpdateListItem\" onClick={onClick}>\n      <div>\n        <UpdateListItemImage images={update.images} />\n        <p className=\"projectText\"> {update.title} </p>\n      </div>\n      <p className=\"projectText\"> {new Date(update.date).toLocaleDateString(\"en-US\", dateOptions)} </p>\n    </div>\n  )\n}\n\nconst UpdateListItemImage = ({ images }) => {\n  if (images && images.length > 0) {\n    return <img src={images[0]} style={{ marginRight: '8px' }} />\n  } else {\n    return null\n  }\n}\n\nexport default UpdateListItem","/Users/daniyaalbeg/Documents/Developer/projects/Mc Master/mc/src/components/floodlight/floodLight.js",[],{"ruleId":"1155","replacedBy":"1156"},{"ruleId":"1157","replacedBy":"1158"},{"ruleId":"1159","severity":1,"message":"1160","line":40,"column":10,"nodeType":"1161","messageId":"1162","endLine":40,"endColumn":21},{"ruleId":"1159","severity":1,"message":"1163","line":97,"column":7,"nodeType":"1161","messageId":"1162","endLine":97,"endColumn":15},{"ruleId":"1164","severity":1,"message":"1165","line":106,"column":5,"nodeType":"1166","messageId":"1167","endLine":107,"endColumn":27},{"ruleId":"1159","severity":1,"message":"1168","line":33,"column":7,"nodeType":"1161","messageId":"1162","endLine":33,"endColumn":22},{"ruleId":"1159","severity":1,"message":"1169","line":45,"column":7,"nodeType":"1161","messageId":"1162","endLine":45,"endColumn":21},{"ruleId":"1159","severity":1,"message":"1170","line":2,"column":8,"nodeType":"1161","messageId":"1162","endLine":2,"endColumn":14},{"ruleId":"1159","severity":1,"message":"1171","line":3,"column":8,"nodeType":"1161","messageId":"1162","endLine":3,"endColumn":15},{"ruleId":"1159","severity":1,"message":"1172","line":4,"column":8,"nodeType":"1161","messageId":"1162","endLine":4,"endColumn":15},{"ruleId":"1159","severity":1,"message":"1173","line":1,"column":17,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":26},{"ruleId":"1174","severity":1,"message":"1175","line":60,"column":6,"nodeType":"1176","endLine":60,"endColumn":8,"suggestions":"1177"},{"ruleId":"1159","severity":1,"message":"1178","line":136,"column":7,"nodeType":"1161","messageId":"1162","endLine":136,"endColumn":18},{"ruleId":"1159","severity":1,"message":"1179","line":182,"column":20,"nodeType":"1161","messageId":"1162","endLine":182,"endColumn":29},{"ruleId":"1159","severity":1,"message":"1180","line":8,"column":10,"nodeType":"1161","messageId":"1162","endLine":8,"endColumn":28},{"ruleId":"1181","severity":1,"message":"1182","line":37,"column":20,"nodeType":"1183","messageId":"1167","endLine":37,"endColumn":24},{"ruleId":"1159","severity":1,"message":"1184","line":66,"column":15,"nodeType":"1161","messageId":"1162","endLine":66,"endColumn":27},{"ruleId":"1174","severity":1,"message":"1185","line":37,"column":5,"nodeType":"1176","endLine":37,"endColumn":14,"suggestions":"1186"},{"ruleId":"1174","severity":1,"message":"1187","line":64,"column":5,"nodeType":"1176","endLine":64,"endColumn":33,"suggestions":"1188"},{"ruleId":"1174","severity":1,"message":"1189","line":110,"column":6,"nodeType":"1176","endLine":110,"endColumn":19,"suggestions":"1190"},{"ruleId":"1174","severity":1,"message":"1191","line":117,"column":6,"nodeType":"1176","endLine":117,"endColumn":15,"suggestions":"1192"},{"ruleId":"1159","severity":1,"message":"1193","line":12,"column":21,"nodeType":"1161","messageId":"1162","endLine":12,"endColumn":30},{"ruleId":"1159","severity":1,"message":"1194","line":6,"column":25,"nodeType":"1161","messageId":"1162","endLine":6,"endColumn":38},{"ruleId":"1174","severity":1,"message":"1187","line":85,"column":5,"nodeType":"1176","endLine":85,"endColumn":33,"suggestions":"1195"},{"ruleId":"1174","severity":1,"message":"1196","line":94,"column":6,"nodeType":"1176","endLine":94,"endColumn":15,"suggestions":"1197"},{"ruleId":"1159","severity":1,"message":"1198","line":5,"column":25,"nodeType":"1161","messageId":"1162","endLine":5,"endColumn":40},{"ruleId":"1174","severity":1,"message":"1187","line":62,"column":7,"nodeType":"1176","endLine":65,"endColumn":4,"suggestions":"1199"},{"ruleId":"1174","severity":1,"message":"1200","line":20,"column":6,"nodeType":"1176","endLine":20,"endColumn":8,"suggestions":"1201"},{"ruleId":"1159","severity":1,"message":"1173","line":1,"column":17,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":26},{"ruleId":"1159","severity":1,"message":"1202","line":18,"column":7,"nodeType":"1161","messageId":"1162","endLine":18,"endColumn":16},{"ruleId":"1159","severity":1,"message":"1203","line":19,"column":7,"nodeType":"1161","messageId":"1162","endLine":19,"endColumn":24},{"ruleId":"1174","severity":1,"message":"1187","line":142,"column":5,"nodeType":"1176","endLine":142,"endColumn":33,"suggestions":"1204"},{"ruleId":"1159","severity":1,"message":"1205","line":198,"column":7,"nodeType":"1161","messageId":"1162","endLine":198,"endColumn":15},{"ruleId":"1206","severity":1,"message":"1207","line":228,"column":6,"nodeType":"1208","endLine":232,"endColumn":7},{"ruleId":"1174","severity":1,"message":"1187","line":86,"column":5,"nodeType":"1176","endLine":86,"endColumn":33,"suggestions":"1209"},{"ruleId":"1159","severity":1,"message":"1210","line":1,"column":17,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":23},{"ruleId":"1181","severity":1,"message":"1182","line":5,"column":26,"nodeType":"1183","messageId":"1167","endLine":5,"endColumn":30},{"ruleId":"1159","severity":1,"message":"1211","line":1,"column":28,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":36},{"ruleId":"1174","severity":1,"message":"1200","line":27,"column":6,"nodeType":"1176","endLine":27,"endColumn":8,"suggestions":"1212"},{"ruleId":"1213","severity":1,"message":"1214","line":114,"column":7,"nodeType":"1208","endLine":117,"endColumn":9},{"ruleId":"1159","severity":1,"message":"1215","line":6,"column":10,"nodeType":"1161","messageId":"1162","endLine":6,"endColumn":22},{"ruleId":"1159","severity":1,"message":"1216","line":4,"column":10,"nodeType":"1161","messageId":"1162","endLine":4,"endColumn":31},{"ruleId":"1217","severity":1,"message":"1218","line":83,"column":39,"nodeType":"1219","messageId":"1220","endLine":83,"endColumn":41},{"ruleId":"1159","severity":1,"message":"1221","line":4,"column":21,"nodeType":"1161","messageId":"1162","endLine":4,"endColumn":26},{"ruleId":"1159","severity":1,"message":"1222","line":7,"column":8,"nodeType":"1161","messageId":"1162","endLine":7,"endColumn":17},{"ruleId":"1159","severity":1,"message":"1223","line":25,"column":3,"nodeType":"1161","messageId":"1162","endLine":25,"endColumn":27},{"ruleId":"1174","severity":1,"message":"1224","line":106,"column":6,"nodeType":"1176","endLine":106,"endColumn":8,"suggestions":"1225"},{"ruleId":"1174","severity":1,"message":"1187","line":121,"column":5,"nodeType":"1176","endLine":121,"endColumn":33,"suggestions":"1226"},{"ruleId":"1159","severity":1,"message":"1221","line":4,"column":21,"nodeType":"1161","messageId":"1162","endLine":4,"endColumn":26},{"ruleId":"1159","severity":1,"message":"1222","line":7,"column":8,"nodeType":"1161","messageId":"1162","endLine":7,"endColumn":17},{"ruleId":"1174","severity":1,"message":"1187","line":93,"column":5,"nodeType":"1176","endLine":93,"endColumn":33,"suggestions":"1227"},{"ruleId":"1174","severity":1,"message":"1228","line":17,"column":6,"nodeType":"1176","endLine":17,"endColumn":16,"suggestions":"1229"},{"ruleId":"1174","severity":1,"message":"1230","line":10,"column":6,"nodeType":"1176","endLine":10,"endColumn":15,"suggestions":"1231"},{"ruleId":"1232","severity":1,"message":"1233","line":50,"column":9,"nodeType":"1234","endLine":50,"endColumn":70},{"ruleId":"1159","severity":1,"message":"1235","line":2,"column":10,"nodeType":"1161","messageId":"1162","endLine":2,"endColumn":17},{"ruleId":"1159","severity":1,"message":"1221","line":4,"column":21,"nodeType":"1161","messageId":"1162","endLine":4,"endColumn":26},{"ruleId":"1174","severity":1,"message":"1187","line":94,"column":5,"nodeType":"1176","endLine":94,"endColumn":33,"suggestions":"1236"},{"ruleId":"1159","severity":1,"message":"1237","line":42,"column":10,"nodeType":"1161","messageId":"1162","endLine":42,"endColumn":23},{"ruleId":"1213","severity":1,"message":"1214","line":15,"column":4,"nodeType":"1208","endLine":21,"endColumn":6},{"ruleId":"1159","severity":1,"message":"1238","line":8,"column":10,"nodeType":"1161","messageId":"1162","endLine":8,"endColumn":32},{"ruleId":"1174","severity":1,"message":"1230","line":21,"column":5,"nodeType":"1176","endLine":21,"endColumn":7,"suggestions":"1239"},{"ruleId":"1232","severity":1,"message":"1233","line":49,"column":9,"nodeType":"1234","endLine":49,"endColumn":72},{"ruleId":"1159","severity":1,"message":"1240","line":2,"column":10,"nodeType":"1161","messageId":"1162","endLine":2,"endColumn":14},{"ruleId":"1213","severity":1,"message":"1214","line":22,"column":15,"nodeType":"1208","endLine":24,"endColumn":17},{"ruleId":"1159","severity":1,"message":"1241","line":6,"column":8,"nodeType":"1161","messageId":"1162","endLine":6,"endColumn":27},{"ruleId":"1174","severity":1,"message":"1230","line":13,"column":6,"nodeType":"1176","endLine":13,"endColumn":8,"suggestions":"1242"},{"ruleId":"1243","severity":1,"message":"1244","line":164,"column":1,"nodeType":"1245","endLine":166,"endColumn":2},{"ruleId":"1181","severity":1,"message":"1182","line":10,"column":33,"nodeType":"1183","messageId":"1167","endLine":10,"endColumn":37},{"ruleId":"1246","severity":1,"message":"1247","line":2,"column":3,"nodeType":"1248","messageId":"1249","endLine":9,"endColumn":4},{"ruleId":"1246","severity":1,"message":"1247","line":13,"column":3,"nodeType":"1248","messageId":"1249","endLine":34,"endColumn":4},{"ruleId":"1250","severity":1,"message":"1251","line":3,"column":3,"nodeType":"1252","messageId":"1253","endLine":6,"endColumn":5},{"ruleId":"1250","severity":1,"message":"1251","line":7,"column":3,"nodeType":"1254","messageId":"1253","endLine":17,"endColumn":5},{"ruleId":"1250","severity":1,"message":"1251","line":18,"column":3,"nodeType":"1254","messageId":"1253","endLine":28,"endColumn":6},{"ruleId":"1250","severity":1,"message":"1251","line":29,"column":3,"nodeType":"1254","messageId":"1253","endLine":35,"endColumn":6},{"ruleId":"1250","severity":1,"message":"1251","line":36,"column":3,"nodeType":"1255","messageId":"1253","endLine":36,"endColumn":35},{"ruleId":"1159","severity":1,"message":"1211","line":1,"column":17,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":25},{"ruleId":"1159","severity":1,"message":"1173","line":1,"column":27,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":36},{"ruleId":"1159","severity":1,"message":"1256","line":7,"column":46,"nodeType":"1161","messageId":"1162","endLine":7,"endColumn":58},{"ruleId":"1213","severity":1,"message":"1214","line":21,"column":11,"nodeType":"1208","endLine":21,"endColumn":30},{"ruleId":"1159","severity":1,"message":"1173","line":1,"column":17,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":26},{"ruleId":"1174","severity":1,"message":"1257","line":45,"column":6,"nodeType":"1176","endLine":45,"endColumn":15,"suggestions":"1258"},{"ruleId":"1174","severity":1,"message":"1230","line":49,"column":6,"nodeType":"1176","endLine":49,"endColumn":8,"suggestions":"1259"},{"ruleId":"1159","severity":1,"message":"1221","line":3,"column":21,"nodeType":"1161","messageId":"1162","endLine":3,"endColumn":26},{"ruleId":"1174","severity":1,"message":"1257","line":55,"column":6,"nodeType":"1176","endLine":55,"endColumn":34,"suggestions":"1260"},{"ruleId":"1174","severity":1,"message":"1230","line":59,"column":6,"nodeType":"1176","endLine":59,"endColumn":8,"suggestions":"1261"},{"ruleId":"1232","severity":1,"message":"1233","line":48,"column":9,"nodeType":"1234","endLine":48,"endColumn":72},{"ruleId":"1159","severity":1,"message":"1262","line":11,"column":10,"nodeType":"1161","messageId":"1162","endLine":11,"endColumn":16},{"ruleId":"1263","severity":1,"message":"1264","line":30,"column":170,"nodeType":"1265","messageId":"1266","endLine":30,"endColumn":171},{"ruleId":"1263","severity":1,"message":"1264","line":30,"column":218,"nodeType":"1265","messageId":"1266","endLine":30,"endColumn":219},{"ruleId":"1263","severity":1,"message":"1264","line":68,"column":170,"nodeType":"1265","messageId":"1266","endLine":68,"endColumn":171},{"ruleId":"1263","severity":1,"message":"1264","line":68,"column":218,"nodeType":"1265","messageId":"1266","endLine":68,"endColumn":219},{"ruleId":"1267","severity":1,"message":"1268","line":5,"column":14,"nodeType":"1265","messageId":"1167","endLine":5,"endColumn":16},{"ruleId":"1159","severity":1,"message":"1269","line":21,"column":3,"nodeType":"1161","messageId":"1162","endLine":21,"endColumn":11},{"ruleId":"1159","severity":1,"message":"1270","line":25,"column":3,"nodeType":"1161","messageId":"1162","endLine":25,"endColumn":8},{"ruleId":"1159","severity":1,"message":"1271","line":27,"column":3,"nodeType":"1161","messageId":"1162","endLine":27,"endColumn":12},{"ruleId":"1159","severity":1,"message":"1272","line":29,"column":3,"nodeType":"1161","messageId":"1162","endLine":29,"endColumn":15},{"ruleId":"1159","severity":1,"message":"1273","line":31,"column":3,"nodeType":"1161","messageId":"1162","endLine":31,"endColumn":10},{"ruleId":"1181","severity":1,"message":"1182","line":10,"column":25,"nodeType":"1183","messageId":"1167","endLine":10,"endColumn":29},{"ruleId":"1159","severity":1,"message":"1211","line":1,"column":17,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":25},{"ruleId":"1159","severity":1,"message":"1274","line":52,"column":9,"nodeType":"1161","messageId":"1162","endLine":52,"endColumn":16},{"ruleId":"1174","severity":1,"message":"1275","line":65,"column":6,"nodeType":"1176","endLine":65,"endColumn":23,"suggestions":"1276"},{"ruleId":"1159","severity":1,"message":"1277","line":13,"column":63,"nodeType":"1161","messageId":"1162","endLine":13,"endColumn":77},{"ruleId":"1159","severity":1,"message":"1278","line":14,"column":46,"nodeType":"1161","messageId":"1162","endLine":14,"endColumn":62},{"ruleId":"1159","severity":1,"message":"1279","line":17,"column":10,"nodeType":"1161","messageId":"1162","endLine":17,"endColumn":25},{"ruleId":"1159","severity":1,"message":"1280","line":18,"column":10,"nodeType":"1161","messageId":"1162","endLine":18,"endColumn":14},{"ruleId":"1174","severity":1,"message":"1230","line":49,"column":6,"nodeType":"1176","endLine":49,"endColumn":47,"suggestions":"1281"},{"ruleId":"1174","severity":1,"message":"1282","line":60,"column":6,"nodeType":"1176","endLine":60,"endColumn":28,"suggestions":"1283"},{"ruleId":"1174","severity":1,"message":"1284","line":98,"column":6,"nodeType":"1176","endLine":98,"endColumn":8,"suggestions":"1285"},{"ruleId":"1159","severity":1,"message":"1211","line":1,"column":17,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":25},{"ruleId":"1159","severity":1,"message":"1286","line":3,"column":8,"nodeType":"1161","messageId":"1162","endLine":3,"endColumn":19},{"ruleId":"1159","severity":1,"message":"1279","line":6,"column":10,"nodeType":"1161","messageId":"1162","endLine":6,"endColumn":25},{"ruleId":"1159","severity":1,"message":"1287","line":7,"column":10,"nodeType":"1161","messageId":"1162","endLine":7,"endColumn":26},{"ruleId":"1159","severity":1,"message":"1288","line":4,"column":28,"nodeType":"1161","messageId":"1162","endLine":4,"endColumn":41},{"ruleId":"1159","severity":1,"message":"1289","line":5,"column":10,"nodeType":"1161","messageId":"1162","endLine":5,"endColumn":22},{"ruleId":"1159","severity":1,"message":"1290","line":1,"column":8,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":13},{"ruleId":"1159","severity":1,"message":"1291","line":7,"column":10,"nodeType":"1161","messageId":"1162","endLine":7,"endColumn":16},{"ruleId":"1159","severity":1,"message":"1292","line":7,"column":18,"nodeType":"1161","messageId":"1162","endLine":7,"endColumn":24},{"ruleId":"1174","severity":1,"message":"1293","line":21,"column":6,"nodeType":"1176","endLine":21,"endColumn":16,"suggestions":"1294"},{"ruleId":"1159","severity":1,"message":"1295","line":2,"column":10,"nodeType":"1161","messageId":"1162","endLine":2,"endColumn":21},{"ruleId":"1159","severity":1,"message":"1291","line":4,"column":10,"nodeType":"1161","messageId":"1162","endLine":4,"endColumn":16},{"ruleId":"1159","severity":1,"message":"1296","line":5,"column":10,"nodeType":"1161","messageId":"1162","endLine":5,"endColumn":24},{"ruleId":"1213","severity":1,"message":"1214","line":9,"column":10,"nodeType":"1208","endLine":9,"endColumn":47},{"ruleId":"1159","severity":1,"message":"1297","line":1,"column":38,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":49},{"ruleId":"1159","severity":1,"message":"1298","line":5,"column":8,"nodeType":"1161","messageId":"1162","endLine":5,"endColumn":22},{"ruleId":"1174","severity":1,"message":"1299","line":37,"column":6,"nodeType":"1176","endLine":37,"endColumn":8,"suggestions":"1300"},{"ruleId":"1213","severity":1,"message":"1214","line":21,"column":11,"nodeType":"1208","endLine":21,"endColumn":30},{"ruleId":"1213","severity":1,"message":"1214","line":13,"column":7,"nodeType":"1208","endLine":16,"endColumn":9},{"ruleId":"1159","severity":1,"message":"1173","line":1,"column":27,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":36},{"ruleId":"1159","severity":1,"message":"1173","line":1,"column":27,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":36},{"ruleId":"1174","severity":1,"message":"1230","line":25,"column":6,"nodeType":"1176","endLine":25,"endColumn":26,"suggestions":"1301"},{"ruleId":"1174","severity":1,"message":"1230","line":42,"column":6,"nodeType":"1176","endLine":42,"endColumn":26,"suggestions":"1302"},{"ruleId":"1159","severity":1,"message":"1211","line":1,"column":17,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":25},{"ruleId":"1159","severity":1,"message":"1303","line":1,"column":27,"nodeType":"1161","messageId":"1162","endLine":1,"endColumn":34},{"ruleId":"1174","severity":1,"message":"1230","line":46,"column":6,"nodeType":"1176","endLine":46,"endColumn":26,"suggestions":"1304"},{"ruleId":"1305","severity":1,"message":"1306","line":54,"column":28,"nodeType":"1161","messageId":"1307","endLine":54,"endColumn":48},{"ruleId":"1213","severity":1,"message":"1214","line":103,"column":13,"nodeType":"1208","endLine":103,"endColumn":42},{"ruleId":"1213","severity":1,"message":"1214","line":189,"column":11,"nodeType":"1208","endLine":189,"endColumn":40},{"ruleId":"1174","severity":1,"message":"1308","line":28,"column":6,"nodeType":"1176","endLine":28,"endColumn":15,"suggestions":"1309"},{"ruleId":"1174","severity":1,"message":"1187","line":41,"column":7,"nodeType":"1176","endLine":44,"endColumn":4,"suggestions":"1310"},{"ruleId":"1174","severity":1,"message":"1230","line":51,"column":6,"nodeType":"1176","endLine":51,"endColumn":26,"suggestions":"1311"},{"ruleId":"1312","severity":1,"message":"1313","line":155,"column":27,"nodeType":"1161","messageId":"1314","endLine":155,"endColumn":42},{"ruleId":"1159","severity":1,"message":"1315","line":14,"column":9,"nodeType":"1161","messageId":"1162","endLine":14,"endColumn":17},{"ruleId":"1159","severity":1,"message":"1316","line":6,"column":10,"nodeType":"1161","messageId":"1162","endLine":6,"endColumn":27},{"ruleId":"1159","severity":1,"message":"1317","line":6,"column":29,"nodeType":"1161","messageId":"1162","endLine":6,"endColumn":47},{"ruleId":"1213","severity":1,"message":"1214","line":19,"column":12,"nodeType":"1208","endLine":19,"endColumn":66},"no-native-reassign",["1318"],"no-negated-in-lhs",["1319"],"no-unused-vars","'faAmazonPay' is defined but never used.","Identifier","unusedVar","'CnicView' is assigned a value but never used.","no-duplicate-case","Duplicate case label.","SwitchCase","unexpected","'newFundingState' is assigned a value but never used.","'newSupplyState' is assigned a value but never used.","'MCRing' is defined but never used.","'MCRing2' is defined but never used.","'MCRing3' is defined but never used.","'useEffect' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch', 'featuredFetched', 'featuredLoading', 'statFetched', 'statLoading', 'userInfoFetched', and 'userInfoLoading'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["1320"],"'HomeViewMap' is assigned a value but never used.","'hasErrors' is assigned a value but never used.","'LightenDarkenColor' is defined but never used.","no-empty-pattern","Unexpected empty object pattern.","ObjectPattern","'randomColour' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'dispatch', 'id', 'loading', and 'orgs'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1321"],"React Hook useMemo has a missing dependency: 'isDragAccept'. Either include it or remove the dependency array.",["1322"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["1323"],"React Hook useEffect has missing dependencies: 'dispatch' and 'history'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1324"],"'setErrors' is assigned a value but never used.","'setFieldValue' is defined but never used.",["1325"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.history'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1326"],"'yupToFormErrors' is defined but never used.",["1327"],"React Hook useEffect has missing dependencies: 'dispatch' and 'id'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1328"],"'FILE_SIZE' is assigned a value but never used.","'SUPPORTED_FORMATS' is assigned a value but never used.",["1329"],"'copyText' is assigned a value but never used.","jsx-a11y/iframe-has-title","<iframe> elements must have a unique title property.","JSXOpeningElement",["1330"],"'useRef' is defined but never used.","'useState' is defined but never used.",["1331"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","'RESET_DELETE' is defined but never used.","'faGameConsoleHandheld' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'Field' is defined but never used.","'SelectMap' is defined but never used.","'createUserVolunteerReset' is defined but never used.","React Hook useEffect has a missing dependency: 'auth'. Either include it or remove the dependency array.",["1332"],["1333"],["1334"],"React Hook useEffect has a missing dependency: 'ref'. Either include it or remove the dependency array.",["1335"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1336"],"react/style-prop-object","Style prop value must be an object","JSXAttribute","'connect' is defined but never used.",["1337"],"'faHouseReturn' is defined but never used.","'filterAndSearchProject' is defined but never used.",["1338"],"'Link' is defined but never used.","'ProjectFundingPanel' is defined but never used.",["1339"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unreachable","Unreachable code.","ExpressionStatement","unreachableCode","VariableDeclaration","ReturnStatement","'faPlusCircle' is defined but never used.","React Hook useEffect has missing dependencies: 'dispatch' and 'setSubmitted'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1340"],["1341"],["1342"],["1343"],"'faEdit' is defined but never used.","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","eqeqeq","Expected '===' and instead saw '=='.","'faHomeLg' is defined but never used.","'faBox' is defined but never used.","'faBoxFull' is defined but never used.","'faPersonSign' is defined but never used.","'faClock' is defined but never used.","'history' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'refs'. Either include it or remove the dependency array.",["1344"],"'toggleMapModal' is defined but never used.","'getMapResetFetch' is defined but never used.","'FontAwesomeIcon' is defined but never used.","'faTh' is defined but never used.",["1345"],"React Hook useEffect has missing dependencies: 'dispatch' and 'filteredObjects'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1346"],"React Hook useCallback has a missing dependency: 'center'. Either include it or remove the dependency array.",["1347"],"'HeaderIcons' is defined but never used.","'faProjectDiagram' is defined but never used.","'FilterOrgType' is defined but never used.","'filterEvents' is defined but never used.","'React' is defined but never used.","'faUser' is defined but never used.","'faBell' is defined but never used.","React Hook useEffect has a missing dependency: 'showModal'. Either include it or remove the dependency array. If 'showModal' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1348"],"'useDispatch' is defined but never used.","'FontAwsomeIcon' is defined but never used.","'useCallback' is defined but never used.","'ProjectFunding' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["1349"],["1350"],["1351"],"'useMemo' is defined but never used.",["1352"],"no-use-before-define","'volunteerRequestDict' was used before it was defined.","usedBeforeDefined","React Hook useEffect has missing dependencies: 'dispatch' and 'setEditing'. Either include them or remove the dependency array. If 'dispatch' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["1353"],["1354"],["1355"],"no-const-assign","'sponsorRequests' is constant.","const","'dispatch' is assigned a value but never used.","'faCaretCircleLeft' is defined but never used.","'faCaretCircleRight' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"1356","fix":"1357"},{"desc":"1358","fix":"1359"},{"desc":"1360","fix":"1361"},{"desc":"1362","fix":"1363"},{"desc":"1364","fix":"1365"},{"desc":"1360","fix":"1366"},{"desc":"1367","fix":"1368"},{"desc":"1360","fix":"1369"},{"desc":"1370","fix":"1371"},{"desc":"1360","fix":"1372"},{"desc":"1360","fix":"1373"},{"desc":"1370","fix":"1374"},{"desc":"1375","fix":"1376"},{"desc":"1360","fix":"1377"},{"desc":"1360","fix":"1378"},{"desc":"1379","fix":"1380"},{"desc":"1381","fix":"1382"},{"desc":"1360","fix":"1383"},{"desc":"1384","fix":"1385"},{"desc":"1384","fix":"1386"},{"desc":"1387","fix":"1388"},{"desc":"1384","fix":"1389"},{"desc":"1390","fix":"1391"},{"desc":"1384","fix":"1392"},{"desc":"1393","fix":"1394"},{"desc":"1395","fix":"1396"},{"desc":"1397","fix":"1398"},{"desc":"1399","fix":"1400"},{"desc":"1401","fix":"1402"},{"desc":"1384","fix":"1403"},{"desc":"1404","fix":"1405"},{"desc":"1406","fix":"1407"},{"desc":"1406","fix":"1408"},{"desc":"1409","fix":"1410"},{"desc":"1360","fix":"1411"},{"desc":"1406","fix":"1412"},"Update the dependencies array to be: [dispatch, featuredFetched, featuredLoading, statFetched, statLoading, userInfoFetched, userInfoLoading]",{"range":"1413","text":"1414"},"Update the dependencies array to be: [dispatch, fetched, id, loading, orgs]",{"range":"1415","text":"1416"},"Update the dependencies array to be: [isDragAccept, isDragActive, isDragReject]",{"range":"1417","text":"1418"},"Update the dependencies array to be: [orgID, auth, history]",{"range":"1419","text":"1420"},"Update the dependencies array to be: [dispatch, history, success]",{"range":"1421","text":"1422"},{"range":"1423","text":"1418"},"Update the dependencies array to be: [dispatch, props.history, success]",{"range":"1424","text":"1425"},{"range":"1426","text":"1418"},"Update the dependencies array to be: [dispatch, id]",{"range":"1427","text":"1428"},{"range":"1429","text":"1418"},{"range":"1430","text":"1418"},{"range":"1431","text":"1428"},"Update the dependencies array to be: [auth]",{"range":"1432","text":"1433"},{"range":"1434","text":"1418"},{"range":"1435","text":"1418"},"Update the dependencies array to be: [isActive, ref]",{"range":"1436","text":"1437"},"Update the dependencies array to be: [dispatch, success]",{"range":"1438","text":"1439"},{"range":"1440","text":"1418"},"Update the dependencies array to be: [dispatch]",{"range":"1441","text":"1442"},{"range":"1443","text":"1442"},"Update the dependencies array to be: [dispatch, setSubmitted, success]",{"range":"1444","text":"1445"},{"range":"1446","text":"1442"},"Update the dependencies array to be: [dispatch, setSelectedSupply, setSubmitted, success]",{"range":"1447","text":"1448"},{"range":"1449","text":"1442"},"Update the dependencies array to be: [refs, selectedProject]",{"range":"1450","text":"1451"},"Update the dependencies array to be: [mapMode, filter, filterCategory, search, dispatch]",{"range":"1452","text":"1453"},"Update the dependencies array to be: [fetched, computeDict, dispatch, filteredObjects]",{"range":"1454","text":"1455"},"Update the dependencies array to be: [center]",{"range":"1456","text":"1457"},"Update the dependencies array to be: [mapLayer, showModal]",{"range":"1458","text":"1459"},{"range":"1460","text":"1442"},"Update the dependencies array to be: [dispatch, showModal, success]",{"range":"1461","text":"1462"},"Update the dependencies array to be: [success, showModal, dispatch]",{"range":"1463","text":"1464"},{"range":"1465","text":"1464"},"Update the dependencies array to be: [dispatch, setEditing, success]",{"range":"1466","text":"1467"},{"range":"1468","text":"1418"},{"range":"1469","text":"1464"},[3697,3699],"[dispatch, featuredFetched, featuredLoading, statFetched, statLoading, userInfoFetched, userInfoLoading]",[1286,1295],"[dispatch, fetched, id, loading, orgs]",[2925,2953],"[isDragAccept, isDragActive, isDragReject]",[4061,4074],"[orgID, auth, history]",[4200,4209],"[dispatch, history, success]",[2937,2965],[3141,3150],"[dispatch, props.history, success]",[2577,2617],[905,907],"[dispatch, id]",[5674,5702],[3033,3061],[919,921],[4415,4417],"[auth]",[4899,4927],[3606,3634],[500,510],"[isActive, ref]",[256,265],"[dispatch, success]",[3627,3655],[532,534],"[dispatch]",[497,499],[1225,1234],"[dispatch, setSubmitted, success]",[1309,1311],[1736,1764],"[dispatch, setSelectedSupply, setSubmitted, success]",[1837,1839],[2384,2401],"[refs, selectedProject]",[1979,2020],"[mapMode, filter, filterCategory, search, dispatch]",[2262,2284],"[fetched, computeDict, dispatch, filteredObjects]",[3084,3086],"[center]",[679,689],"[mapLayer, showModal]",[1233,1235],[768,788],"[dispatch, showModal, success]",[1293,1313],"[success, showModal, dispatch]",[1456,1476],[890,899],"[dispatch, setEditing, success]",[1423,1463],[1581,1601]]